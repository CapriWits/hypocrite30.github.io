<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm</title>
    <url>/2021/03/27/Algorithm/Algorithm/</url>
    <content><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p> 📕 JianShu：<a href="https://www.jianshu.com/u/fc4ebe02fff2">https://www.jianshu.com/u/fc4ebe02fff2</a> 有常见算法的题解</p>
<p>💻 GitHub：<a href="https://github.com/hypocrite30/LeetCode">https://github.com/hypocrite30/LeetCode</a> 代码仓库</p>
<p><strong>欢迎关注，交流学习。</strong></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Java For-loop&amp; For-each &amp; Iterator 效率分析</title>
    <url>/2021/03/16/JavaSE/Java%20For-loop&amp;%20For-each%20&amp;%20Iterator%20%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ul>
<li><p><code>public static native long nanoTime();</code>  来测试时间，主程序外围获取当前时间，然后作差得到运行时间。</p>
</li>
<li><p>程序中同时测试 <code>ArrayList</code>和 <code>LinkedList</code>两种实现方式的遍历效率，代表了数组和链表两种数据结构。</p>
</li>
<li><p>成员变量 <code>public static final int MAGNITUDE = 10000;</code>用来控制数据的 <code>数量级</code>。</p>
</li>
<li><p>初始化声明两种 <code>List&lt;String&gt;</code>，并递增变量至数量级大小，过程中转化为 String 存储到集合当中，作为实验数据。</p>
</li>
<li><p>测试的运行程序逻辑是：将集合中的数据取出来，并赋值给另一个元素 <code>str</code>。但是这里存在时间复杂度的区别， <code>ArrayList</code>中的 <code>get(int index)</code>在数组实现上 时间复杂度是常数级i的 <code>O(1)</code>，而 <code>LinkedList</code>中的 <code>get(int index)</code>在链表实现上 时间复杂度是线性 <code>O(n)</code>，但是测试的 <code>ArrayList</code>和 <code>LinkedList</code>的时间比较是<code>同数据结构</code>之间比较，符合控制变量法，所以不需要结果上的 数值，而关注 运行时间的 <code>时间数量级</code>，这样比较才有意义。</p>
</li>
</ul>
<h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAGNITUDE = <span class="hljs-number">10000</span>;    <span class="hljs-comment">// 数量级</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testForloop</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAGNITUDE; i++) &#123;<br>            str = list.get(i);<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testForeach</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            str = s;<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testIterator</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            str = iterator.next();<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/* initialize */</span><br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        List&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAGNITUDE; i++) &#123;<br>            arrayList.add(String.valueOf(i));<br>            linkedList.add(String.valueOf(i));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========Test for ArrayList========&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;For loop: &quot;</span> + testForloop(arrayList));<br>        System.out.println(<span class="hljs-string">&quot;Foreach: &quot;</span> + testForeach(arrayList));<br>        System.out.println(<span class="hljs-string">&quot;Iterator: &quot;</span> + testIterator(arrayList));<br><br>        System.out.println(<span class="hljs-string">&quot;========Test for LinkedList========&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;For loop: &quot;</span> + testForloop(linkedList));<br>        System.out.println(<span class="hljs-string">&quot;Foreach: &quot;</span> + testForeach(linkedList));<br>        System.out.println(<span class="hljs-string">&quot;Iterator: &quot;</span> + testIterator(linkedList));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><ul>
<li>如上文分析：<code>同数据结构</code> 比较原则。</li>
</ul>
<h3 id="数量级：1-000"><a href="#数量级：1-000" class="headerlink" title="数量级：1,000"></a>数量级：1,000</h3><blockquote>
<p>========Test for ArrayList========<br>For loop: 99000<br>Foreach: 321700<br>Iterator: 194500<br>========Test for LinkedList========<br>For loop: 1215800<br>Foreach: 341500<br>Iterator: 94900</p>
</blockquote>
<h3 id="数量级：10-000"><a href="#数量级：10-000" class="headerlink" title="数量级：10,000"></a>数量级：10,000</h3><blockquote>
<p>========Test for ArrayList========<br>For loop: 933200<br>Foreach: 942500<br>Iterator: 585800<br>========Test for LinkedList========<br>For loop: 129958500<br>Foreach: 1433000<br>Iterator: 967600</p>
</blockquote>
<h3 id="数量级：100-000"><a href="#数量级：100-000" class="headerlink" title="数量级：100,000"></a>数量级：100,000</h3><blockquote>
<p>========Test for ArrayList========<br>For loop: 3730800<br>Foreach: 6669800<br>Iterator: 5215100<br>========Test for LinkedList========<br>For loop: 18907275800<br>Foreach: 7468100<br>Iterator: 5632400</p>
</blockquote>
<ul>
<li><code>ArrayList</code>：在小数量级上，For-loop效率会高一点，For &lt; Iterator &lt; For-each，这里得出的结论根据时间消耗得出，无法仔细比较效率高低，数量级小时，For效率高一点，整体来说，三者速度级别差不多。</li>
<li><code>LinkedList</code>：链表中很明显 For loop 效率就低很多了。For-each和Iterator相差不大。数量大（一般超过 100,000级别）效果更明显。Iterator &lt; For-each &lt; &lt;&lt;For-loop。Iterator和For-each效率在链表中差不多，For差一些就是了。</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p> For-each 和 Iterator 基本都在一个数量级上，这可能与 For-each 就是基于 Iterator 实现的，至于 For-each 会稍微慢一点，可能是 For-each 隐式转换 Iterator 耗费多余时间，</p>
</li>
<li><p><code>ArrayList</code>基于数组，index都是确定的，在查改反面效率会高一点，自然带着下表的 For 效率会高很多。<code>LinkedList</code>基于链表，查改开销会比较大，但它是<code>双向循环带头节点的链表</code>，增删会比数组快，这两种数据结构的比较差别就在这，实际中还是要看在哪方面的应用来确定。</p>
</li>
</ul>
<h2 id="工程中三种循环的使用建议。"><a href="#工程中三种循环的使用建议。" class="headerlink" title="工程中三种循环的使用建议。"></a>工程中三种循环的使用建议。</h2><ul>
<li><code>《Effective Java》第三版第58条</code>中建议，一般采用 Foreach 进行循环，因为它在 <code>简洁性</code>和 <code>预防Bug</code>上优于For-loop 和 Iterator（确切说是 Iterator 配合 while 使用）</li>
</ul>
<p><code>简洁性</code>就不需要多阐述了，光看代码量和可读性，就知道 For-each 的<code>简洁性</code>特点。</p>
<h4 id="For-each-优势于-while-loop"><a href="#For-each-优势于-while-loop" class="headerlink" title="For-each 优势于 while-loop"></a>For-each 优势于 while-loop</h4><hr>
<h5 id="预防Bug"><a href="#预防Bug" class="headerlink" title="预防Bug"></a>预防Bug</h5><ul>
<li>说到预防Bug，这里牵涉到 第57条 中的 <code>将局部变量的作用域最小化</code>。</li>
</ul>
<h5 id="为什么要“将局部变量的作用域最小化”"><a href="#为什么要“将局部变量的作用域最小化”" class="headerlink" title="为什么要“将局部变量的作用域最小化”"></a>为什么要“将局部变量的作用域最小化”</h5><p>书中提到，原因类似于 第15条的本质，<code>使类和成员的可访问性最小化</code>。将局部变量作用域最小化，可以增强代码的可读性和可维护性，并降低出错的可能性。</p>
<blockquote>
<p> 循环中提供了特殊的机会来将变量的作用域最小化。无论是传统的for循环，还是for-each形式的 for 循环，都允许声明<strong>循环变量</strong>，它们的作用域被限定<strong>在正好需要的范围</strong>之内。如果在循环终止之后不再需要循环变量的内容，for-loop就优先于 while loop。</p>
</blockquote>
<ul>
<li>如下是一种遍历集合的首选做法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Preferred idiom for iterating over a collection or array</span><br><span class="hljs-keyword">for</span> (Element e : c) &#123;<br>    ... <span class="hljs-comment">// Do Someting with e</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>如果需要访问迭代器，可能要调用它的 remove 方法，首选做法是利用传统的 for 循环替代 for-each 循环：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Idiom for iterating when you need the iterator</span><br><span class="hljs-keyword">for</span> (Iterator&lt;Element&gt; i = c.iterator(); i.hasNext(); ) &#123;<br>    Element e = i.next();<br>    ... <span class="hljs-comment">// Do someting with e and i</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>为什么有些时候不能用 for-each ，它的实现还是基于 iterator 的 <code>hasNext() + next()</code>，但是有时候需要在循环过程中对集合进行操作，此时就必须使用 iterator 对象进行操作了，因为使用 iterator 循环时，集合的操作权就交给了 iterator，虽然可以用集合对象进行操作，如 <code>romove()</code>但这样会破坏 iterator 初始化的结果，导致最终程序运行的结果与预期偏差很大，这里引用我的另一篇文章，有 Java 在 iterator 中 remove() 的 bug详解。</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/642d6fd39013">https://www.jianshu.com/p/642d6fd39013</a></p>
</blockquote>
<ul>
<li>至于为什么 for loop 要比 while loop 更好，参考一下代码片段，连续的两个 whIle loop，以及出现的一个 bug</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator&lt;Element&gt; i = c.iterator();<br><span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>    doSometing(i.next());<br>&#125;<br>...<br>Iterator&lt;Element&gt; i2 = c.iterator();<br><span class="hljs-keyword">while</span> (i.hasNext()) &#123;   <span class="hljs-comment">// This is bug!</span><br>    doSometing(i2.next());<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>在第二个 while loop 中，使用了 迭代器 <code>i</code> 的判断，实际操作的是 <code>i2</code> 遍历的对象，bug 就在这里，实际工程中，因为   迭代器 <code>i</code>的产生是在 while loop 外面的，作用于包含了整段程序，包括 while loop 使用结束之后，加上中间有其他的逻辑代码，难免会不小心使用到上面残余的 迭代器<code>i</code>，这就造成很严重的 bug，而不会轻易被发现，IDE也不会报错。 所以要利用好 for loop 声明迭代器，控制它的作用范围。</p>
<p>上面的bug程序最终的结果是下面的 while loop 不会执行，因为在上面的 while loop 执行结束之后，迭代器 <code>i</code>就会遍历到尽头，这样继续判断 <code>i.hasNext()</code>只会返回 <code>false</code>。</p>
<h4 id="For-each-优势于-For-loop"><a href="#For-each-优势于-For-loop" class="headerlink" title="For-each 优势于 For-loop"></a>For-each 优势于 For-loop</h4><hr>
<ul>
<li>以下面一个 两层集合嵌套迭代出现的 bug 来展开讨论</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Can you spot the bug?</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Suit</span> </span>&#123;CLUB, DIAMOND, HEART, SPADE&#125;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Rank</span> </span>&#123;<br>    ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,<br>    EIGHT, NINE, TEN, JACK, QUEEN, KING<br>&#125;<br>...<br><span class="hljs-keyword">static</span> Collection&lt;Suit&gt; suits = Arrays.asList(Suit.values());<br><span class="hljs-keyword">static</span> Collection&lt;Rank&gt; ranks = Arrays.asList(Rank.values());<br><br>List&lt;Card&gt; deck = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); )<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )<br>        deck.add(<span class="hljs-keyword">new</span> Card(i.next(), j.next()));<br>    <br></code></pre></div></td></tr></table></figure>
<p>这里的bug比较难找，可能很多大师也会犯这个错误。bug在于，在迭代器上对外部的集合 suits 调用太多 <code>next</code> 方法，它应该从外部的循环进行调用，以便每种花色都调用一次，但它却是从内部循环调用，因此每次牌调用一次。在用完所有花色之后，循环就会抛出 <code>NoSuchElementException</code>异常。</p>
<p>如果碰巧外部集合的大小是内部集合大小的几倍（可能因为它们是相同的集合），循环就会正常终止，但是实际完成情况跟预期是有出入的。</p>
<ul>
<li>下面是打印一对骰子出现的所有可能情况：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Same bug, different symptom!</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Face</span> </span>&#123;ONE, TWO, THREE, FOUR, FIVE, SIX&#125;<br>Collection&lt;Face&gt; faces = EnumSet.allOf(Face.class);<br><br><span class="hljs-keyword">for</span> (Iterator&lt;Face&gt; i = faces.iterator(); i.hasNext(); )<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Face&gt; j = faces.iterator(); i.hasNext(); )<br>        System.out.println(i.next() + <span class="hljs-string">&quot; &quot;</span> + j.next());<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>ONE ONE<br>TWO TWO<br>THREE THREE<br>FOUR FOUR<br>FIVE FIVE<br>SIX SIX</p>
</blockquote>
<p>同样的错误，也是重复调用 <code>next</code>。这种程序不会抛出异常，所以往往找bug会特别难受。</p>
<ul>
<li>下面开始修正此 bug</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Fixed, but ugly - so we need for-each</span><br><span class="hljs-keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); ) &#123;<br>    Suit suit = i.next();<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )<br>        deck.add(<span class="hljs-keyword">new</span> Card(suit, j.next()));<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>至此引出 for-each ，让这个问题完全消失，并且产生的代码也能很简洁。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Preferred idiom for neat iteration on collections and arrays</span><br><span class="hljs-keyword">for</span> (Suit suit : suits)<br>    <span class="hljs-keyword">for</span> (Rank rank : ranks)<br>        deck.add(<span class="hljs-keyword">new</span> Card(suit, rank));<br></code></pre></div></td></tr></table></figure>


<h4 id="For-each-无法使用的地方"><a href="#For-each-无法使用的地方" class="headerlink" title="For-each 无法使用的地方"></a>For-each 无法使用的地方</h4><hr>
<ul>
<li><code>解构过滤</code>：如果需要遍历集合，并删除指定元素，需要使用显式的迭代器，以便使用它的 remove 方法。使用 Java 8 中添加的 Collection 的 <code>removeIf</code>，常常可以避免显式遍历。</li>
<li><code>转换</code>：如果需要遍历列表或者数组，并取代它的部分或者全部元素值，就需要列表迭代器或者数组索引，以便设置元素的值。</li>
<li><code>平行迭代</code>：如果需要并行地遍历多个集合，就需要显式地控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以同步前进（就如上述有问题的牌和骰子的示例中无意间所示范的那样）</li>
</ul>
<h4 id="For-each-拓展使用"><a href="#For-each-拓展使用" class="headerlink" title="For-each 拓展使用"></a>For-each 拓展使用</h4><ul>
<li>for-each 不止能遍历集合和数组，还能遍历实现 <code>Iterable</code>接口的任何对象，只需要实现接口对应的方法即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an iterator over elements of type &#123;<span class="hljs-doctag">@code</span> T&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an Iterator.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Iterator&lt;T&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> T&gt; action)</span> </span>&#123;<br>        Objects.requireNonNull(action);<br>        <span class="hljs-keyword">for</span> (T t : <span class="hljs-keyword">this</span>) &#123;<br>            action.accept(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，与传统的for循环相比，for-each循环在简洁性、灵活性以及出错预防性方面都占有绝对优势，并且<strong>没有性能惩罚</strong>的问题。因此，当可以选择的时候，for-each循环应该优先于for循环。</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Java手动实现迭代器。(LeetCode 341)</title>
    <url>/2021/03/23/JavaSE/Java%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%82(LeetCode%20341)/</url>
    <content><![CDATA[<h1 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a>341. 扁平化嵌套列表迭代器</h1><hr>
<p><a href="https://imgtu.com/i/6T7qHO"><img src="https://z3.ax1x.com/2021/03/23/6T7qHO.png" alt="leetCode 341"></a></p>
<p><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">https://leetcode-cn.com/problems/flatten-nested-list-iterator/</a></p>
<ul>
<li>先声明 <code>NestedInteger</code> 的结构（题目给出）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NestedInteger</span> </span>&#123;<br><br>    <span class="hljs-comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isInteger</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span><br>    <span class="hljs-comment">// Return null if this NestedInteger holds a nested list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span><br>    <span class="hljs-comment">// Return null if this NestedInteger holds a single integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;NestedInteger&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<h2 id="迭代器（效率最高）"><a href="#迭代器（效率最高）" class="headerlink" title="迭代器（效率最高）"></a>迭代器（效率最高）</h2><ul>
<li>手动遍历，将遍历结果存在集合中，然后生成迭代器，其他操作基于此迭代器即可。</li>
<li>遍历方式是DFS，因为此结构可以联系到数据结构中的 <code>树</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use Java Iterator</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Iterator&lt;Integer&gt; iterator;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (NestedInteger node : nestedList) &#123;<br>            DFS(node, list);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.iterator = list.iterator(); <span class="hljs-comment">// all the operation use list&#x27;s iterator</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> iterator.next();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> iterator.hasNext();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DFS get every element into List res;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(NestedInteger node, List&lt;Integer&gt; res)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node.isInteger()) &#123;<br>            res.add(node.getInteger());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (NestedInteger child : node.getList()) &#123;<br>            DFS(child, res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>


<h2 id="队列-DFS（用队列实现-Iterator）"><a href="#队列-DFS（用队列实现-Iterator）" class="headerlink" title="队列 + DFS（用队列实现 Iterator）"></a>队列 + DFS（用队列实现 Iterator）</h2><ul>
<li>道理同上，DFS手动遍历，将遍历结果存在队列中</li>
<li>用队列手动实现 <code>iterator</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use DFS and Queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> ArrayDeque&lt;Integer&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        DFS(nestedList);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasNext() ? queue.pollFirst() : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> !queue.isEmpty();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DFS the nestedList, offer the elements into the queue</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (NestedInteger elem : nestedList) &#123;<br>            <span class="hljs-keyword">if</span> (elem.isInteger()) &#123; <span class="hljs-comment">// elem is Integer, offer the queue</span><br>                queue.addLast(elem.getInteger());<br>            &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// elem is List, DFS the list and offer the elements into queue</span><br>                DFS(elem.getList());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>


<h2 id="栈-递归-Stack-Recursion"><a href="#栈-递归-Stack-Recursion" class="headerlink" title="栈 + 递归 (Stack + Recursion)"></a>栈 + 递归 (Stack + Recursion)</h2><ul>
<li>不同于队列的是，队列要在初始化阶段，将遍历的结果全部处理好，最后按照顺序进行操作即可。</li>
<li>利用栈的思想是，先将这些 <code>NestedInteger</code>按顺序（倒序）存放在栈中，而要使用里面的元素时，再一步步的<strong>拆封</strong>出来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use Stack and Recursion</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    Deque&lt;NestedInteger&gt; stack = <span class="hljs-keyword">new</span> ArrayDeque&lt;NestedInteger&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nestedList.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            stack.push(nestedList.get(i));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasNext() ? stack.pop().getInteger() : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// stack not empty, judge the peek elem&#x27;s type(List/Integer)</span><br>            NestedInteger elem = stack.peek();<br>            <span class="hljs-keyword">if</span> (elem.isInteger()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// peek elem is list, iterate the list to push elem into the stack</span><br>                elem = stack.pop();<br>                List&lt;NestedInteger&gt; list = elem.getList();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                    stack.push(list.get(i));<br>                &#125;<br>                <span class="hljs-keyword">return</span> hasNext();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Java在Iterator中remove &amp; ConcurrentModificationException问题</title>
    <url>/2021/03/15/JavaSE/Java%20%E5%9C%A8Iterator%E4%B8%AD%20remove%20&amp;%20ConcurrentModificationException%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(cur)) &#123;<br>                arrayList.remove(cur);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*for (String s : arrayList) &#123;</span><br><span class="hljs-comment">            if (&quot;b&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">                arrayList.remove(s);</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                System.out.println(s + &quot; &quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>for-each实际就是隐式使用 iterator 遍历集合，上面的例子会抛出异常，并删除失败。</li>
</ul>
<blockquote>
<p>a<br>Exception in thread “main” java.util.ConcurrentModificationException<br>    at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:937)<br>    at java.base/java.util.ArrayList$Itr.next(ArrayList.java:891)<br>    at Solution.main(Solution.java:14)</p>
</blockquote>
<ul>
<li>然而删除<strong>倒数第二个</strong>元素却不会报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;c&quot;</span>.equals(cur)) &#123;<br>                arrayList.remove(cur);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*for (String s : arrayList) &#123;</span><br><span class="hljs-comment">            if (&quot;c&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">                arrayList.remove(s);</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                System.out.println(s + &quot; &quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>a<br>b<br>[a, b, d]</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p>首先先观察 ArrayList 的 <code>iterator()</code>，看迭代器怎么构造。</p>
</li>
<li><p>ArrayList 的 父类 <code>AbstractList</code>中</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Itr();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>Itr 是里面的内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Index of element to be returned by subsequent call to next.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> cursor = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Index of element returned by most recent call to next or</span><br><span class="hljs-comment">     * previous.  Reset to -1 if this element is deleted by a call</span><br><span class="hljs-comment">     * to remove.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> lastRet = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The modCount value that the iterator believes that the backing</span><br><span class="hljs-comment">     * List should have.  If this expectation is violated, the iterator</span><br><span class="hljs-comment">     * has detected concurrent modification.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> expectedModCount = modCount;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cursor != size();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        checkForComodification();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> i = cursor;<br>            E next = get(i);<br>            lastRet = i;<br>            cursor = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;<br>            checkForComodification();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException();<br>        checkForComodification();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            AbstractList.<span class="hljs-keyword">this</span>.remove(lastRet);<br>            <span class="hljs-keyword">if</span> (lastRet &lt; cursor)<br>                cursor--;<br>            lastRet = -<span class="hljs-number">1</span>;<br>            expectedModCount = modCount;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li><p><code>cursor</code>：下一个要访问的元素的索引</p>
</li>
<li><p><code>lastRet</code>：上一个访问的元素的索引</p>
</li>
<li><p><code>expectedModCount</code>是期望的该 List 被修改的次数，初始化为<code>modCount</code></p>
</li>
<li><p><code>modCount</code>是AbstractList 的一个成员变量。</p>
</li>
</ul>
<blockquote>
<p>The number of times this list has been structurally modified. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.<br>This field is used by the iterator and list iterator implementation returned by the iterator and listIterator methods. If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a ConcurrentModificationException in response to the next, remove, previous, set or add operations. This provides fail-fast behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration.<br>Use of this field by subclasses is optional. If a subclass wishes to provide fail-fast iterators (and list iterators), then it merely has to increment this field in its add(int, E) and remove(int) methods (and any other methods that it overrides that result in structural modifications to the list). A single call to add(int, E) or remove(int) must add no more than one to this field, or the iterators (and list iterators) will throw bogus ConcurrentModificationExceptions. If an implementation does not wish to provide fail-fast iterators, this field may be ignored.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount = <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>结构修改是指那些改变列表大小的修改，或者以某种方式扰乱列表，使得正在进行的迭代可能产生不正确的结果。</li>
<li>此字段由迭代器和<code>listIterator</code>方法返回的迭代器和列表迭代器实现使用。如果此字段的值意外更改，迭代器（或列表迭代器）将抛出<code>ConcurrentModificationException</code>以响应<code>next</code>、<code>remove</code>、previous、<code>set</code>或<code>add</code>操作。这提供了<code>快速失败</code>的行为。</li>
</ul>
<ul>
<li>深入 ArrayList 里观察 <code>next()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    checkForComodification();<br>    <span class="hljs-keyword">int</span> i = cursor;<br>    <span class="hljs-keyword">if</span> (i &gt;= size)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    Object[] elementData = ArrayList.<span class="hljs-keyword">this</span>.elementData;<br>    <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>    cursor = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (E) elementData[lastRet = i];<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li><p>抛出的<code>ConcurrentModificationException</code>异常是<code>checkForComodification()</code>抛出的。</p>
</li>
<li><p>条件是：<code>modCount != expectedModCount</code></p>
</li>
</ul>
<p>所以在 add remove 的过程中 <code>modCount</code>会自增自减。如果用集合的 <code>remove</code>则 List 的<code>modCount</code>减少一，而 Iterator 的 <code>expectedModCount</code>不变，就会抛出异常。</p>
<ul>
<li>至于为什么倒数第二个元素删除不会报错，我们要先了解 Iterator 遍历的特点。</li>
</ul>
<p>while + iterator 的组合是需要先判空 <code>hasNext()</code>，然后再<code>next()</code>，最后才 <code>remove()</code>，否则会报错，可以自行实验，调换 next 和 remove。</p>
<p>因为要先 next，将游标<code>越过</code>当前的元素，然后再决定要怎么操作当前的（游标前面的）这个元素，即游标是插在 当前元素 和 下一个元素的中间（可以这么理解）。</p>
<p>删除倒数第二个元素的时候，cursor指向<code>最后一个元素</code>，而此时删掉了倒数第二个元素后，cursor和size()正好相等了，所以<code>hasNext()</code>返回false，遍历结束，成功的删除了倒数第二个元素。</p>
<h2 id="建议用法"><a href="#建议用法" class="headerlink" title="建议用法"></a>建议用法</h2><ul>
<li><p>一个原则是，尽量在遍历的过程中不要对原集合进行增删，容易改变原结构，可以用 immutable 的思想，重新封装一个集合。</p>
</li>
<li><p>要 remove() ，则要在 <code>iterator()</code>上面来进行 <code>remove()</code>，因为Iterator迭代，就把操作权交给了 Iterator，就不要再用原集合进行操作了。</p>
</li>
<li><p>正确用法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a&quot;</span>.equals(cur)) &#123;<br>                iterator.remove();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>b<br>c<br>d<br>[b, c, d]</p>
</blockquote>
<ul>
<li>以上分析是基于 <code>ArrayList</code>，基于链表的 LinkedList道理大同小异，思想不变，测试的结果也是不变的。</li>
<li>既然正确是 使用 iterator 来操作集合，就应该去阅读 iterator 里的 next() 实现，而不应该去看 ArrayList 里的实现，要更深入了解就去阅读源码吧。</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Centos 6无法使用yum解决办法</title>
    <url>/2021/03/27/Linux/Centos%206%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8yum%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Centos-6无法使用yum解决办法"><a href="#Centos-6无法使用yum解决办法" class="headerlink" title="Centos 6无法使用yum解决办法"></a>Centos 6无法使用yum解决办法</h1><p>CentOS 6已经随着2020年11月的结束进入了EOL（Reaches End of Life），不过有一些老设备依然需要支持，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了最后一个版本的镜像，只是这个镜像不会再有更新了</p>
<p>官方便在12月2日正式将CentOS 6相关的软件源移出了官方源，随之而来逐级镜像也会陆续将其删除。</p>
<p>不过有一些老设备依然需要维持在当前系统，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了各个版本软件源的镜像，只是这个软件源不会再有更新了。</p>
<h2 id="一、一键修复"><a href="#一、一键修复" class="headerlink" title="一、一键修复"></a>一、一键修复</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sed -i <span class="hljs-string">&quot;s|enabled=1|enabled=0|g&quot;</span> <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br>mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.backup<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Aliyun.repo <br>yum clean all<br>yum makecache<br></code></pre></div></td></tr></table></figure>
<h2 id="二、手动修复"><a href="#二、手动修复" class="headerlink" title="二、手动修复"></a>二、手动修复</h2><p>首先把fastestmirrors关了</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#编辑</span><br>vi <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br><span class="hljs-comment">#修改</span><br>enable=<span class="hljs-number">0</span><br><span class="hljs-comment">#或者执行以下命令</span><br>sed -i <span class="hljs-string">&quot;s|enabled=1|enabled=0|g&quot;</span> <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br></code></pre></div></td></tr></table></figure>
<p>先把之前的repo挪到备份，然后下面两个二选一</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.bak<br></code></pre></div></td></tr></table></figure>
<p>替换为官方Vault源(海外服务器用)</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Official.repo<br></code></pre></div></td></tr></table></figure>
<p>或者替换为阿里云Vault镜像(国内服务器用)</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Aliyun.repo<br></code></pre></div></td></tr></table></figure>


<blockquote>
<p>以上转自：熊猫畔</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Java算法竞赛常用模板</title>
    <url>/2021/02/10/JavaSE/Java%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="Java算法竞赛常用模板"><a href="#Java算法竞赛常用模板" class="headerlink" title="Java算法竞赛常用模板"></a>Java算法竞赛常用模板</h1><h2 id="一、输入输出"><a href="#一、输入输出" class="headerlink" title="一、输入输出"></a>一、输入输出</h2><h3 id="简单输入"><a href="#简单输入" class="headerlink" title="简单输入"></a>简单输入</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner <br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><br>Scanner sc1 = <span class="hljs-keyword">new</span> Scanner(System.in);<br>Scanner sc2 = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> BufferedInputStream(System.in));<br><span class="hljs-comment">// sc2用到缓冲流，读入更快</span><br></code></pre></div></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        long t1, t2, t3;<br>        Scanner sc1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br>        Scanner sc2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> BufferedInputStream(System.<span class="hljs-params">in</span>)</span>);<br><br>        t1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        String next = sc1.next<span class="hljs-literal">()</span>;<br>        t2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        t3 = t2 - t1;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;sc1:&quot;</span> + t3);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(next);<br><br>        t1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        String next2 = sc2.next<span class="hljs-literal">()</span>;<br>        t2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        t3 = t2 - t1;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;sc2:&quot;</span> + t3);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(next2);<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>abc<br>sc1:7968695900<br>abc<br>abc<br>sc2:1945031900<br>abc</p>
</blockquote>
<h3 id="复杂输入"><a href="#复杂输入" class="headerlink" title="复杂输入"></a>复杂输入</h3><div class="hljs code-wrapper"><pre><code>    如：1,2,3,4,5
</code></pre></div>
<figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = sc.next();<br>    <span class="hljs-keyword">String</span>[] <span class="hljs-built_in">split</span> = <span class="hljs-built_in">str</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-built_in">int</span>[] strInt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-built_in">split</span>.length];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">split</span>.length; i++) &#123;<br>        strInt[i] = Integer.parseInt(<span class="hljs-built_in">split</span>[i]);<br>    &#125;<br>    System.out.<span class="hljs-built_in">println</span>(Arrays.toString(strInt));<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>1,2,3,4,5<br>[1, 2, 3, 4, 5]</p>
</blockquote>
<h3 id="文件输入"><a href="#文件输入" class="headerlink" title="文件输入"></a>文件输入</h3><div class="hljs code-wrapper"><pre><code>    用于大数据的读入，不用手动输入那么麻烦。BufferedInputStream缓冲流来加速，文件输入流用**绝对路径**，避免不必要的麻烦，要不就把资源文件放在src目录下。
</code></pre></div>
<figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws FileNotFoundException &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> <span class="hljs-type">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type"></span><br><span class="hljs-type"></span>    FileInputStream(<span class="hljs-string">&quot;E:\\input.txt&quot;</span>)));<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>        list.add(sc.nextInt());<br>    &#125;<br>    System.out.println(list);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>按照空格分割字符串</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">String</span>[] s=<span class="hljs-built_in">str</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; +&quot;</span>);<br><span class="hljs-keyword">String</span>[] s=<span class="hljs-built_in">str</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\\s+&quot;</span>);<br><span class="hljs-comment">// 以一个或多个空格分割</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li><p><strong>public int indexOf(String str)：</strong>返回字符串中第一次出现str的位置；</p>
</li>
<li><p><strong>public int indexOf(String str,int fromIndex)：</strong>返回字符串从fromIndex开始第一次出现str的位置；</p>
</li>
<li><p><strong>public String substring(int beginIndex)：</strong>返回该字符串从beginIndex开始到结尾的子字符串；</p>
</li>
<li><p><strong>public String substring(int beginIndex,int endIndex)：</strong>返回该字符串从beginIndex开始到endsIndex结尾的子字符串</p>
</li>
<li><p><strong>public char[] toCharArray ()</strong> <strong>：</strong>将此字符串转换为新的字符数组</p>
</li>
<li><p><strong>public String replace (CharSequence target, CharSequence replacement)</strong> <strong>：</strong>将与target匹配的字符串使用replacement字符串替换。</p>
</li>
<li><p><strong>String replaceAll(String regex, String replacement)：</strong>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串</p>
</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> ss=<span class="hljs-built_in">str</span>.replaceAll(<span class="hljs-string">&quot; +&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">String</span> ss=<span class="hljs-built_in">str</span>.replaceAll(<span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">// 二者都能把一个或多个空格换成逗号</span><br></code></pre></div></td></tr></table></figure>
<h3 id="大数"><a href="#大数" class="headerlink" title="大数"></a>大数</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">//BigDecimal类型构造方法</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(double val)</span></span><br>          <span class="hljs-comment">//将 double 转换为 BigDecimal，后者是 double 的二进制浮点值准确的十进制表示形式。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(int val)</span></span><br>          <span class="hljs-comment">//将 int 转换为 BigDecimal。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(long val)</span></span><br>          <span class="hljs-comment">//将 long 转换为 BigDecimal。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(String val)</span></span><br>          <span class="hljs-comment">//将 BigDecimal 的字符串表示形式转换为 BigDecimal。</span><br><span class="hljs-comment">//BigInteger类型构造方法</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(int val)</span></span><br>          <span class="hljs-comment">//将 int 转换为 BigInteger。</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(String val)</span></span><br>          <span class="hljs-comment">//将 BigDecimal 的字符串表示形式转换为 BigInteger。</span><br><span class="hljs-comment">//BigInteger转换方法</span><br>BigInteger valueOf(long val)<br>          <span class="hljs-comment">//返回其值等于指定 long 的值的 BigInteger。</span><br>		  <span class="hljs-comment">//如：BigInteger bi1=new BigInteger(1000);</span><br><span class="hljs-comment">//通用方法</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.max</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//返回最大数</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.min</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//返回最小数</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.add</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：+</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.subtract</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：-</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.multiply</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：*</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.divide</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：/</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.mod</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：%</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.abs</span>()<br>    <span class="hljs-comment">//返回其值是此 BigIntege(BigDecimal)r 的绝对值的 BigInteger(BigDecimal)。</span><br></code></pre></div></td></tr></table></figure>
<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><ul>
<li>Calendar实例化</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Calendar calendar = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br></code></pre></div></td></tr></table></figure>
<ul>
<li><strong>YEAR</strong>       指示年的 get 和 set 的字段数字。</li>
<li><strong>MONTH</strong>  指示月份的 get 和 set 的字段数字。</li>
<li><strong>DATE</strong>       指示日的 get 和 set 的字段数字。-</li>
<li><strong>HOUR</strong>       get 和 set 的字段数字,指示当天中的某小时</li>
<li><strong>MINUTE</strong> get 和 set 的字段数字,指示当前小时中的某分钟</li>
<li><strong>SECOND</strong> get 和 set 的字段数字,指示当前分钟中的某秒</li>
<li><strong>DAY_OF_MONTH</strong>   get 和 set 的字段数字, 指示以月为起点过了几天。</li>
<li><strong>DAY_OF_WEEK</strong>   get 和 set 的字段数字, 指示以周为起点过了几天。</li>
<li><strong>DAY_OF_YEAR</strong>   get 和 set 的字段数字, 指示以年为起点过了几天。</li>
<li><strong>DAY_OF_WEEK_IN_MONTH</strong>   get 和 set 的字段数字, 指示当前月中的第几个星期。</li>
</ul>
<blockquote>
<p>public static final int SUNDAY = 1;</p>
<p>public static final int JANUARY = 0;</p>
<p>以上表示，一周的开始是周日，即为1，以此类推。</p>
<p>一年的开始是一月，即为0，所以对月的设置要 - 1，对月的读取要 + 1</p>
</blockquote>
<div class="hljs code-wrapper"><pre><code>    `get(int field); `// 获取给定字段的值，field即上面的字段数字
</code></pre></div>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">Calendar calendar = Calendar.getInstance();<br><span class="hljs-comment">// 设置日期为: 2020.1.21</span><br>calendar.<span class="hljs-keyword">set</span>(Calendar.YEAR, 2020);<br>calendar.<span class="hljs-keyword">set</span>(Calendar.MONTH, 0);<br>calendar.<span class="hljs-keyword">set</span>(Calendar.DAY_OF_MONTH, 21);<br><span class="hljs-comment">// 获取2020.1.21是星期几</span><br>System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(calendar.<span class="hljs-built_in">get</span>(Calendar.DAY_OF_WEEK));<br><br>输出：<br>3 <span class="hljs-comment">// 3代表星期二</span><br></code></pre></div></td></tr></table></figure>
<h4 id="Calendar类与Date类的转换"><a href="#Calendar类与Date类的转换" class="headerlink" title="Calendar类与Date类的转换"></a>Calendar类与Date类的转换</h4><ul>
<li><p>Date类</p>
<div class="hljs code-wrapper"><pre><code>  Date date = new Date();
  System.out.println(&quot;毫秒:&quot;+date.getTime());//输入毫秒
   
  //时间转字符串
  SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
  String time = sdf.format(date);
  System.out.println(&quot;时间转字符串:&quot;+time);
   
  //利用字符串来转时间格式（记得抛出异常）
  String time02 = &quot;2018-09-05&quot;;
  SimpleDateFormat  sdf2 = new SimpleDateFormat (&quot;yyyy-MM-dd&quot;);
  Date date2 = sdf2.parse(time02);
  System.out.println(&quot;字符串转时间格式：&quot;+date2);
</code></pre></div>
</li>
<li><p>Calendar类</p>
<div class="hljs code-wrapper"><pre><code>  // 使用默认时区和语言环境获得一个日历
  Calendar cal = Calendar.getInstance();
  // 赋值时年月日时分秒常用的6个值，注意月份下标从0开始，所以取月份要+1
  System.out.println(&quot;年:&quot; + cal.get(Calendar.YEAR));
  System.out.println(&quot;月:&quot; + (cal.get(Calendar.MONTH) + 1));
  System.out.println(&quot;日:&quot; + cal.get(Calendar.DAY_OF_MONTH));
  System.out.println(&quot;时:&quot; + cal.get(Calendar.HOUR_OF_DAY));
  System.out.println(&quot;分:&quot; + cal.get(Calendar.MINUTE));
  System.out.println(&quot;秒:&quot; + cal.get(Calendar.SECOND));
   
  //手动设置某个日期
  Calendar cal02 = Calendar.getInstance();
  //注意，设置时间的时候月份的下标是在0开始的
  //设置时间不一定要这6个参数3个参数也是可以的
  cal02.set(2018,9,1,12,0,0);//二零一八年十月一号十二点
  System.out.println(cal02.getTime());//getTime()返回Date类型
</code></pre></div>
</li>
<li><p>Calendar转换为Date</p>
</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Calendar cal = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>Date date = cal.get<span class="hljs-constructor">Time()</span>;<br>SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)</span>;<br>String s = simpleDateFormat.format(date);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;时间为====&quot;</span>+s);<br></code></pre></div></td></tr></table></figure>
<ul>
<li>Date转换为Calendar</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-type">Date</span> date2 = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>Calendar cal2 = Calendar.getInstance();<br>cal2.setTime(date2);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(cal2.<span class="hljs-keyword">get</span>(Calendar.YEAR) +&quot;-&quot;+(cal2.<span class="hljs-keyword">get</span>(Calendar.MONTH)+<span class="hljs-number">1</span>)+&quot;-&quot;+cal2.<span class="hljs-keyword">get</span>(Calendar.DATE));<br></code></pre></div></td></tr></table></figure>
<p>例题：</p>
<p>从键盘输入一个日期，格式为yyyy-M-d</p>
<p>要求计算该日期与1949年10月1日距离多少天</p>
<p>例如：</p>
<p>用户输入了：1949-10-2 程序输出：1</p>
<p>用户输入了：1949-11-1 程序输出：31</p>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        Calendar cal = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>        Scanner sc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> BufferedInputStream(System.<span class="hljs-params">in</span>)</span>);<br>        String s = sc.next<span class="hljs-literal">()</span>;<br>        String<span class="hljs-literal">[]</span> str = s.split(<span class="hljs-string">&quot;-&quot;</span>);<br>        cal.set(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[0])</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[1])</span> - <span class="hljs-number">1</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[2])</span>);<br>        Calendar standard = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>        standard.set(<span class="hljs-number">1949</span>, <span class="hljs-number">10</span> - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        long t1 = cal.get<span class="hljs-constructor">TimeInMillis()</span>;<br>        long t2 = standard.get<span class="hljs-constructor">TimeInMillis()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println((t1 - t2)<span class="hljs-operator"> / </span>(<span class="hljs-number">1000</span><span class="hljs-operator"> * </span><span class="hljs-number">60</span><span class="hljs-operator"> * </span><span class="hljs-number">60</span><span class="hljs-operator"> * </span><span class="hljs-number">24</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><div class="hljs code-wrapper"><pre><code>    定义：（常用）
</code></pre></div>
<blockquote>
<p>Deque<Integer> q=new LinkedList<Integer>();</p>
</blockquote>
<p>LinkedList底层是链表，ArrayDeque底层是数组实现</p>
<ul>
<li><p><code>offerFirst / addFirst(Object e);</code> 队首插入</p>
</li>
<li><p><code>offerLast / addLast(Object e); </code>队尾插入</p>
</li>
<li><p><code>pollFirst(); </code>队首删除</p>
</li>
<li><p><code>pollLast(); </code>队尾删除</p>
</li>
<li><p><code>peekFirst(); </code>队首获取</p>
</li>
<li><p><code>peekLast(); </code>队尾获取</p>
</li>
</ul>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="其他进制字符串-gt-十进制整数"><a href="#其他进制字符串-gt-十进制整数" class="headerlink" title="其他进制字符串-&gt;十进制整数"></a>其他进制字符串-&gt;十进制整数</h3><ul>
<li>public static Integer valueOf(int i)</li>
<li>public static Integer valueOf(String s)</li>
<li>public static Integer valueOf(String s, int radix) - radix为s字符串符合的进制</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(12)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 十进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;12&quot;</span>)</span>);<span class="hljs-comment">//12</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;12&quot;</span>,10)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 二进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 2)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 8进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 8)</span>);<span class="hljs-comment">//576</span><br> <br><span class="hljs-comment">// 16进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 16)</span>);<span class="hljs-comment">//4352</span><br></code></pre></div></td></tr></table></figure>
<p>同理，用 public static int parseInt(String s)或 public static int parseInt(String s, int radix)转换为int型</p>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 十进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;12&quot;</span>)</span>); <span class="hljs-comment">// 12</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;12&quot;</span>, 10)</span>); <span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 二进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 2)</span>); <span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 8进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 8)</span>); <span class="hljs-comment">// 576</span><br> <br><span class="hljs-comment">// 16进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 16)</span>); <span class="hljs-comment">// 4352</span><br> <br><span class="hljs-comment">// 32进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 32)</span>); <span class="hljs-comment">// 33792</span><br></code></pre></div></td></tr></table></figure>
<h3 id="十进制整数-gt-其他进制字符串"><a href="#十进制整数-gt-其他进制字符串" class="headerlink" title="十进制整数-&gt;其他进制字符串"></a>十进制整数-&gt;其他进制字符串</h3><ul>
<li>public static String toBinaryString(int i) - 转二进制</li>
<li>public static String toOctalString(int i) - 转八进制</li>
<li>public static String toHexString(int i) - 转十六进制</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> n = <span class="hljs-number">12</span>;<br><span class="hljs-comment">// 十进制整数 -&gt; 十进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>)</span>);<span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 二进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 2)</span>);<span class="hljs-comment">// 1100</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 8进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 8)</span>);<span class="hljs-comment">// 14</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 16进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 16)</span>);<span class="hljs-comment">// c</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 32进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 32)</span>);<span class="hljs-comment">// c</span><br></code></pre></div></td></tr></table></figure>
<h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">String</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[] &#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>&#125;;<br>    <span class="hljs-comment">// 按照长度降序</span><br>    Arrays.sort(arr, (s1, s2) -&gt; &#123;<br>        <span class="hljs-keyword">return</span> s2.length() - s1.length();<br>    &#125;);<br>    System.out.<span class="hljs-built_in">println</span>(Arrays.toString(arr));<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h2><ul>
<li>Arrays工具类转stream再求和</li>
</ul>
<figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">int[]<span class="hljs-built_in"> array </span>=<span class="hljs-built_in"> new </span>int[]&#123;1,2,3&#125;;<br>Arrays.stream(array).sum();<br></code></pre></div></td></tr></table></figure>
<ul>
<li>for loop 求和，虽然代码量比上面的大一点，但是效率比上面的高很多，建议还是使用for loop求和，别搞花里胡哨的</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>java中数组多种遍历求和的效率分析</title>
    <url>/2021/02/01/JavaSE/java%E4%B8%AD%E6%95%B0%E7%BB%84%E5%A4%9A%E7%A7%8D%E9%81%8D%E5%8E%86%E6%B1%82%E5%92%8C%E7%9A%84%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="java中数组多种遍历求和的效率分析"><a href="#java中数组多种遍历求和的效率分析" class="headerlink" title="java中数组多种遍历求和的效率分析"></a>java中数组多种遍历求和的效率分析</h1><h2 id="int型数组的遍历求和效率分析"><a href="#int型数组的遍历求和效率分析" class="headerlink" title="int型数组的遍历求和效率分析"></a>int型数组的遍历求和效率分析</h2><ul>
<li>转换成流的形式，再求和。IntStream.of(a).sum();</li>
<li>另一种转换流求和的方式，Arrays.stream(a).sum();</li>
<li>普通for loop 求和：for i</li>
<li>增强for loop 求和：for-each</li>
</ul>
<p>测试方法使用的是 System.nanoTime() 求出求和段的运行时间，单位为纳秒(10^-9 s)</p>
<h3 id="测试代码如下："><a href="#测试代码如下：" class="headerlink" title="测试代码如下："></a>测试代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            a[i] = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">long</span> l1, l2;<br>        <span class="hljs-keyword">int</span> sum1, sum2, sum3 = <span class="hljs-number">0</span>, sum4 = <span class="hljs-number">0</span>;<br><br>        l1 = System.nanoTime();<br>        sum1 = IntStream.of(a).sum();<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;IntStream.of(a).sum(): &quot;</span>);<br>        System.out.println(sum1);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        sum2 = Arrays.stream(a).sum();<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;Arrays.stream(a).sum(): &quot;</span>);<br>        System.out.println(sum2);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            sum3 += a[i];<br>        &#125;<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;for loop: &quot;</span>);<br>        System.out.println(sum3);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : a) &#123;<br>            sum4 += i;<br>        &#125;<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;iterator loop: &quot;</span>);<br>        System.out.println(sum4);<br>        System.out.println(l2 - l1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>IntStream.of(a).sum(): 5050<br>24215600<br>Arrays.stream(a).sum(): 5050<br>184000<br>for loop: 5050<br>1600<br>iterator loop: 5050<br>1800</p>
</blockquote>
<p>求和结果都是正确的。所以根据最后求和速度进行排序，效率从低到高：</p>
<blockquote>
<p>IntStream.of(A).sum() &lt; Arrays.stream(A).sum() &lt; iterator loop &lt; for loop</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>负数取模运算</title>
    <url>/2020/05/27/JavaSE/%E8%B4%9F%E6%95%B0%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="负数取模运算"><a href="#负数取模运算" class="headerlink" title="负数取模运算"></a>负数取模运算</h1><hr>
<h2 id="一、引例"><a href="#一、引例" class="headerlink" title="一、引例"></a>一、引例</h2><div class="hljs code-wrapper"><pre><code>System.out.println(&quot;3 % 5 = &quot; + 3 % 5);
System.out.println(&quot;-3 % 5 = &quot; + -3 % 5);
System.out.println(&quot;3 % -5 = &quot; + 3 % -5);
System.out.println(&quot;-3 % -5 = &quot; + -3 % -5);
</code></pre></div>
<blockquote>
<p> 3 % 5 = 3<br> -3 % 5 = -3<br> 3 % -5 = 3<br> -3 % -5 = -3  </p>
</blockquote>
<h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><blockquote>
<p>被除数是负数，则取模后符号也为负</p>
</blockquote>
<blockquote>
<p>被除数是正数，则取模后符号也为正</p>
</blockquote>
<blockquote>
<p>结果的符号与除数的正负号无关</p>
</blockquote>
<h2 id="二、整数除法问题"><a href="#二、整数除法问题" class="headerlink" title="二、整数除法问题"></a>二、整数除法问题</h2><ul>
<li><p>向上取整(Ceiling) 向X轴正方向取整，即取比实际结果稍大的数<br>比如：17 / 8 == 3， 8 / 3 == 3，-9 / 4 == -2</p>
</li>
<li><p>向下取整(Floor) 向X轴负方向取整，即取比实际结果稍小的数<br>比如：17 / 8 == 2， 8 / 3 == 2，-9 / 4 == -3</p>
</li>
<li><p>向零取整(Truncate) 向原点方向取整，即直接省略小数部分，取整<br>比如：17 / 8 == 2， 8 / 3 == 2，-9 / 4 == -2</p>
</li>
</ul>
<h2 id="三、取模通用公式"><a href="#三、取模通用公式" class="headerlink" title="三、取模通用公式"></a>三、取模通用公式</h2><blockquote>
<p>a % b = r</p>
</blockquote>
<blockquote>
<p>r = a - (a/b) * b</p>
</blockquote>
<h2 id="四、计算机语言差异性"><a href="#四、计算机语言差异性" class="headerlink" title="四、计算机语言差异性"></a>四、计算机语言差异性</h2><ul>
<li><p>C/Java<br>采用Truncate除法，即向零取整</p>
</li>
<li><p>Python<br>采用Floor除法，即向下取整</p>
</li>
</ul>
<h2 id="五、Truncate除法的问题"><a href="#五、Truncate除法的问题" class="headerlink" title="五、Truncate除法的问题"></a>五、Truncate除法的问题</h2><p>在一些题目中，数组元素可能出现负数，这样导致取模的时候，会出现取整问题的歧义</p>
<blockquote>
<p>在Java中，默认Truncate除法，为避免歧义可以使用：</p>
</blockquote>
<blockquote>
<p>1、使用Math.floorMod方法进行Floor除法</p>
</blockquote>
<blockquote>
<p>2、如在前缀和计算中，用<br>int modulus = <strong>(sum % K + K) % k</strong>;<br>而不用 <strong>sum % k</strong>，避免负数干扰结果</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟机下Linux配置静态ip，使得XShell成功连接</title>
    <url>/2021/01/23/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8BLinux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%EF%BC%8C%E4%BD%BF%E5%BE%97XShell%E6%88%90%E5%8A%9F%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="虚拟机下Linux配置静态ip，使得XShell成功连接"><a href="#虚拟机下Linux配置静态ip，使得XShell成功连接" class="headerlink" title="虚拟机下Linux配置静态ip，使得XShell成功连接"></a>虚拟机下Linux配置静态ip，使得XShell成功连接</h1><ul>
<li>Linux：centOS6.7</li>
<li>虚拟机：VMware Workstation Pro15</li>
<li>SSH客户端：XShell6</li>
</ul>
<h2 id="一、配置VMware的虚拟网络编辑器"><a href="#一、配置VMware的虚拟网络编辑器" class="headerlink" title="一、配置VMware的虚拟网络编辑器"></a>一、配置VMware的虚拟网络编辑器</h2><p>进VMware之前，右键，用管理员模式打开，后面需要管理员权限，先不要开虚拟机</p>
<blockquote>
<p>菜单栏（最顶上一栏） -&gt; 编辑 -&gt;  虚拟网络编辑器</p>
</blockquote>
<p><a href="https://imgtu.com/i/sTn2BF"><img src="https://z3.ax1x.com/2021/01/23/sTn2BF.png" alt="sTn2BF.png"></a></p>
<p>按照①②配置，<strong>把③的子网IP记住</strong>，后面要用到。</p>
<p>然后点击④进入NAT设置。</p>
<p><img src="https://s3.ax1x.com/2021/01/23/sT1Epd.png" alt="NAT设置"></p>
<p>①中配置<strong>默认网关</strong>，其中前三大位要与前面记住的子网IP前面相同，后面默认会配置2，也可以自定义。然后该默认网关192.168.248.2要记住，后面需要用到。</p>
<p>②照做就行</p>
<p>③按确定返回上图，再点击下栏确定就可以保存虚拟网络编辑器的配置。</p>
<h2 id="二、配置VMware-Network-Adapter-VMnet8的指定IP"><a href="#二、配置VMware-Network-Adapter-VMnet8的指定IP" class="headerlink" title="二、配置VMware Network Adapter VMnet8的指定IP"></a>二、配置VMware Network Adapter VMnet8的指定IP</h2><blockquote>
<p> windows设置 -&gt; 网络和Internet -&gt; 更改适配器选项 -&gt;  右键VMware Network Adapter VMnet8进入属性</p>
</blockquote>
<p><a href="https://imgchr.com/i/sT86w6"><img src="https://s3.ax1x.com/2021/01/23/sT86w6.png" alt="sT86w6.png"></a></p>
<p><a href="https://imgchr.com/i/sT8vlj"><img src="https://s3.ax1x.com/2021/01/23/sT8vlj.png" alt="sT8vlj.png"></a></p>
<p><a href="https://imgchr.com/i/sTGUBt"><img src="https://s3.ax1x.com/2021/01/23/sTGUBt.png" alt="VMnet8属性"></a></p>
<p>①选择IPv4的项目，②然后进入属性。</p>
<p><a href="https://imgchr.com/i/sTGqD1"><img src="https://s3.ax1x.com/2021/01/23/sTGqD1.png" alt="sTGqD1.png"></a></p>
<p>默认是自动获得IP地址，勾选“使用下面的IP地址”自定义IP</p>
<p>①配置IP地址，前三位同虚拟网络编辑器配置的子网IP前三位相同，最后一位的1自定义，这里我设置为1</p>
<p>②配完①一般子网掩码会自动填好，没自动补上就填上虚拟网络编辑器里的子网掩码。</p>
<p>③默认网关就是干菜虚拟网络编辑器里面NAT设置里的那个默认网关。</p>
<p>④确定保存，然后再确定就保存成功了。</p>
<h2 id="三、配置网络适配器"><a href="#三、配置网络适配器" class="headerlink" title="三、配置网络适配器"></a>三、配置网络适配器</h2><p>管理员模式进入VMware，选择要配置的那台虚拟机，进入网络适配器</p>
<p><a href="https://imgchr.com/i/sTYOfO"><img src="https://s3.ax1x.com/2021/01/23/sTYOfO.png" alt="sTYOfO.png"></a></p>
<p><a href="https://imgchr.com/i/sTtE9S"><img src="https://s3.ax1x.com/2021/01/23/sTtE9S.png" alt="sTtE9S.png"></a></p>
<p>如图配置即可。</p>
<h2 id="四、配置ifcfg-eth0文件"><a href="#四、配置ifcfg-eth0文件" class="headerlink" title="四、配置ifcfg-eth0文件"></a>四、配置ifcfg-eth0文件</h2><p>打开虚拟机，建议用root用户登录，方便后面对ifcfg-eth0文件进行编辑。</p>
<p>打开terminal终端，输入指令：<strong>vim /etc/sysconfig/network-scripts/ifcfg-eth0</strong></p>
<p>这是使用终端vim的方式修改，不会vim操作的自行百度，或者根据上面的路劲去找ifcfg-eth0文件打开进行修改。</p>
<p>下面的配置建议对字段进行复制，防止配错。</p>
<ol>
<li><strong>以下进行修改</strong></li>
</ol>
<ul>
<li>ONBOOT=yes  # 系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。</li>
<li>BOOTPROTO=static  # 静态模式</li>
</ul>
<ol start="2">
<li><strong>将下面的字段追加到最后一行，根据注释进行相应的配置</strong></li>
</ol>
<ul>
<li>IPADDR=192.168.248.128    # 自定义的IP地址，用XShell对服务器进行连接的IP，前三位与前面保持一致</li>
<li>NETMASK=255.255.255.0    # 子网掩码</li>
<li>NETWORK=192.168.248.0   #  网络地址，与虚拟网络编辑器设置的一样</li>
<li>BROADCAST=192.168.248.255  # 广播地址，前三位与前面一致，最后一位255</li>
<li>DNS1=192.168.248.2  # DNS地址，与默认网关相同</li>
<li>GATEWAY=192.168.248.2  # 默认网关</li>
</ul>
<p>然后esc : wq保存</p>
<p>退出后，终端输入指令：<strong>service network restart</strong>  重启网络</p>
<p>然后 ping baidu.com，看能不能ping通，能说明能上网。</p>
<p>输入指令：ifconfig，查看刚才自定义的静态ip地址是否配置成功。</p>
<p><a href="https://imgchr.com/i/sTa2DJ"><img src="https://s3.ax1x.com/2021/01/23/sTa2DJ.png" alt="sTa2DJ.png"></a></p>
<h2 id="五、SSH客户端连接服务器"><a href="#五、SSH客户端连接服务器" class="headerlink" title="五、SSH客户端连接服务器"></a>五、SSH客户端连接服务器</h2><p>可以先本地cmd中ping 一下服务器</p>
<p><a href="https://imgchr.com/i/sTdFbj"><img src="https://s3.ax1x.com/2021/01/23/sTdFbj.png" alt="sTdFbj.png"></a></p>
<p>如图能ping通，接下来进入XShell，将该ip连接就可以了，至此虚拟机静态IP配置结束。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis-plus</title>
    <url>/2021/03/20/SSM/mybatis-plus/</url>
    <content><![CDATA[<h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h3><p>国产的开源框架，基于 MyBatis</p>
<p>核心功能就是简化 MyBatis 的开发，提高效率。</p>
<h3 id="MyBatis-Plus-快速上手"><a href="#MyBatis-Plus-快速上手" class="headerlink" title="MyBatis Plus 快速上手"></a>MyBatis Plus 快速上手</h3><p>Spring Boot(2.3.0) + MyBatis Plus（国产的开源框架，并没有接入到 Spring 官方孵化器中）</p>
<p>1、创建 Maven 工程</p>
<p><a href="https://imgtu.com/i/cAs0KO"><img src="https://z3.ax1x.com/2021/03/31/cAs0KO.png" alt="cAs0KO.png"></a></p>
<p>2、pom.xml 引入 MyBatis Plus 的依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>3、创建实体类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>4、创建 Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>5、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></div></td></tr></table></figure>
<p>6、启动类需要添加 @MapperScan(“mapper所在的包”)，否则无法加载 Mppaer bean。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.southwind.mybatisplus.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisplusApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MybatisplusApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>7、测试</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper mapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        mapper.selectList(<span class="hljs-keyword">null</span>).forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>


<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><blockquote>
<p>@TableName</p>
</blockquote>
<p>映射数据库的表名</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<blockquote>
<p>@TableId</p>
</blockquote>
<p>设置主键映射，value 映射主键字段名</p>
<p>type 设置主键类型，主键的生成策略，</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">AUTO(<span class="hljs-number">0</span>),<br>NONE(<span class="hljs-number">1</span>),<br>INPUT(<span class="hljs-number">2</span>),<br>ASSIGN_ID(<span class="hljs-number">3</span>),<br>ASSIGN_UUID(<span class="hljs-number">4</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>ID_WORKER(<span class="hljs-number">3</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>ID_WORKER_STR(<span class="hljs-number">3</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>UUID(<span class="hljs-number">4</span>);<br></code></pre></div></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AUTO</td>
<td>数据库自增</td>
</tr>
<tr>
<td>NONE</td>
<td>MP set 主键，雪花算法实现</td>
</tr>
<tr>
<td>INPUT</td>
<td>需要开发者手动赋值</td>
</tr>
<tr>
<td>ASSIGN_ID</td>
<td>MP 分配 ID，Long、Integer、String</td>
</tr>
<tr>
<td>ASSIGN_UUID</td>
<td>分配 UUID，Strinig</td>
</tr>
</tbody></table>
<p>INPUT 如果开发者没有手动赋值，则数据库通过自增的方式给主键赋值，如果开发者手动赋值，则存入该值。</p>
<p>AUTO 默认就是数据库自增，开发者无需赋值。</p>
<p>ASSIGN_ID MP 自动赋值，雪花算法。</p>
<p>ASSIGN_UUID 主键的数据类型必须是 String，自动生成 UUID 进行赋值</p>
<blockquote>
<p>@TableField</p>
</blockquote>
<p>映射非主键字段，value 映射字段名</p>
<p>exist 表示是否为数据库字段 false，如果实体类中的成员变量在数据库中没有对应的字段，则可以使用 exist，VO、DTO</p>
<p>select 表示是否查询该字段</p>
<p>fill 表示是否自动填充，将对象存入数据库的时候，由 MyBatis Plus 自动给某些字段赋值，create_time、update_time</p>
<p>1、给表添加 create_time、update_time 字段</p>
<p>2、实体类中添加成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>3、创建自动填充处理器</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.handler;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<blockquote>
<p>@Version</p>
</blockquote>
<p>标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功。</p>
<p>version = 2</p>
<p>线程 1:update … set version = 2  where version = 1</p>
<p>线程2 ：update … set version = 2 where version = 1</p>
<p>1、数据库表添加 version 字段，默认值为 1</p>
<p>2、实体类添加 version 成员变量，并且添加 @Version </p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>3、注册配置类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>


<blockquote>
<p>@EnumValue</p>
</blockquote>
<p>1、通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.enums;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">StatusEnum</span> </span>&#123;<br>    WORK(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;上班&quot;</span>),<br>    REST(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;休息&quot;</span>);<br><br>    StatusEnum(Integer code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@EnumValue</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>    <span class="hljs-keyword">private</span> StatusEnum status;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">type-enums-package:</span> <br>  <span class="hljs-string">com.southwind.mybatisplus.enums</span><br></code></pre></div></td></tr></table></figure>
<p>2、实现接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.enums;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">AgeEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IEnum</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    ONE(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;一岁&quot;</span>),<br>    TWO(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;两岁&quot;</span>),<br>    THREE(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;三岁&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    AgeEnum(Integer code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.code;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<blockquote>
<p>@TableLogic</p>
</blockquote>
<p>映射逻辑删除</p>
<p>1、数据表添加 deleted 字段</p>
<p>2、实体类添加注解</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.AgeEnum;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> AgeEnum age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>    <span class="hljs-meta">@TableField(value = &quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> StatusEnum statusEnum;<br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Integer deleted;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>3、application.yml 添加配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">global-config:</span><br>  <span class="hljs-attr">db-config:</span><br>    <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>


<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//mapper.selectList(null);</span><br>QueryWrapper wrapper = <span class="hljs-keyword">new</span> QueryWrapper();<br><span class="hljs-comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,&quot;小红&quot;);</span><br><span class="hljs-comment">//        map.put(&quot;age&quot;,3);</span><br><span class="hljs-comment">//        wrapper.allEq(map);</span><br><span class="hljs-comment">//        wrapper.gt(&quot;age&quot;,2);</span><br><span class="hljs-comment">//        wrapper.ne(&quot;name&quot;,&quot;小红&quot;);</span><br><span class="hljs-comment">//        wrapper.ge(&quot;age&quot;,2);</span><br><br><span class="hljs-comment">//like &#x27;%小&#x27;</span><br><span class="hljs-comment">//        wrapper.likeLeft(&quot;name&quot;,&quot;小&quot;);</span><br><span class="hljs-comment">//like &#x27;小%&#x27;</span><br><span class="hljs-comment">//        wrapper.likeRight(&quot;name&quot;,&quot;小&quot;);</span><br><br><span class="hljs-comment">//inSQL</span><br><span class="hljs-comment">//        wrapper.inSql(&quot;id&quot;,&quot;select id from user where id &lt; 10&quot;);</span><br><span class="hljs-comment">//        wrapper.inSql(&quot;age&quot;,&quot;select age from user where age &gt; 3&quot;);</span><br><br><span class="hljs-comment">//        wrapper.orderByDesc(&quot;age&quot;);</span><br><br><span class="hljs-comment">//        wrapper.orderByAsc(&quot;age&quot;);</span><br><span class="hljs-comment">//        wrapper.having(&quot;id &gt; 8&quot;);</span><br><br>mapper.selectList(wrapper).forEach(System.out::println);<br></code></pre></div></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//        System.out.println(mapper.selectById(7));</span><br><span class="hljs-comment">//        mapper.selectBatchIds(Arrays.asList(7,8,9)).forEach(System.out::println);</span><br><br><span class="hljs-comment">//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理</span><br><span class="hljs-comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(&quot;id&quot;,7);</span><br><span class="hljs-comment">//        mapper.selectByMap(map).forEach(System.out::println);</span><br><br>QueryWrapper wrapper = <span class="hljs-keyword">new</span> QueryWrapper();<br>wrapper.eq(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">////        System.out.println(mapper.selectCount(wrapper));</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //将查询的结果集封装到Map中</span><br><span class="hljs-comment">//        mapper.selectMaps(wrapper).forEach(System.out::println);</span><br><span class="hljs-comment">//        System.out.println(&quot;-------------------&quot;);</span><br><span class="hljs-comment">//        mapper.selectList(wrapper).forEach(System.out::println);</span><br><br><span class="hljs-comment">//分页查询</span><br><span class="hljs-comment">//        Page&lt;User&gt; page = new Page&lt;&gt;(2,2);</span><br><span class="hljs-comment">//        Page&lt;User&gt; result = mapper.selectPage(page,null);</span><br><span class="hljs-comment">//        System.out.println(result.getSize());</span><br><span class="hljs-comment">//        System.out.println(result.getTotal());</span><br><span class="hljs-comment">//        result.getRecords().forEach(System.out::println);</span><br><br><span class="hljs-comment">//        Page&lt;Map&lt;String,Object&gt;&gt; page = new Page&lt;&gt;(1,2);</span><br><span class="hljs-comment">//        mapper.selectMapsPage(page,null).getRecords().forEach(System.out::println);</span><br><br><span class="hljs-comment">//        mapper.selectObjs(null).forEach(System.out::println);</span><br><br><br>System.out.println(mapper.selectOne(wrapper));<br></code></pre></div></td></tr></table></figure>


<h3 id="自定义-SQL（多表关联查询）"><a href="#自定义-SQL（多表关联查询）" class="headerlink" title="自定义 SQL（多表关联查询）"></a>自定义 SQL（多表关联查询）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductVO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer category;<br>    <span class="hljs-keyword">private</span> Integer count;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> Integer userId;<br>    <span class="hljs-keyword">private</span> String userName;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.ProductVO;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select p.*,u.name userName from product p,user u where p.user_id = u.id and u.id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">List&lt;ProductVO&gt; <span class="hljs-title">productList</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User user = <span class="hljs-keyword">new</span> User();<br>user.setTitle(<span class="hljs-string">&quot;小明&quot;</span>);<br>user.setAge(<span class="hljs-number">22</span>);<br>mapper.insert(user);<br>System.out.println(user);<br></code></pre></div></td></tr></table></figure>


<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//mapper.deleteById(1);</span><br><span class="hljs-comment">//        mapper.deleteBatchIds(Arrays.asList(7,8));</span><br><span class="hljs-comment">//        QueryWrapper wrapper = new QueryWrapper();</span><br><span class="hljs-comment">//        wrapper.eq(&quot;age&quot;,14);</span><br><span class="hljs-comment">//        mapper.delete(wrapper);</span><br><br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">10</span>);<br>mapper.deleteByMap(map);<br></code></pre></div></td></tr></table></figure>


<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>        <span class="hljs-regexp">//u</span>pdate ... version = <span class="hljs-number">3</span> where version = <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>        User user = mapper.selectById(<span class="hljs-number">7</span>);<br><span class="hljs-regexp">//</span>        user.setTitle(<span class="hljs-string">&quot;一号&quot;</span>);<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>        <span class="hljs-regexp">//u</span>pdate ... version = <span class="hljs-number">3</span> where version = <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>        User user1 = mapper.selectById(<span class="hljs-number">7</span>);<br><span class="hljs-regexp">//</span>        user1.setTitle(<span class="hljs-string">&quot;二号&quot;</span>);<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>        mapper.updateById(user1);<br><span class="hljs-regexp">//</span>        mapper.updateById(user);<br><br>User user = mapper.selectById(<span class="hljs-number">1</span>);<br>user.setTitle(<span class="hljs-string">&quot;小红&quot;</span>);<br>QueryWrapper wrapper = new QueryWrapper();<br>wrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">22</span>);<br>mapper.update(user,wrapper);<br></code></pre></div></td></tr></table></figure>


<h3 id="MyBatisPlus-自动生成"><a href="#MyBatisPlus-自动生成" class="headerlink" title="MyBatisPlus 自动生成"></a>MyBatisPlus 自动生成</h3><p>根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller</p>
<p>1、pom.xml 导入 MyBatis Plus Generator</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>Velocity（默认）、Freemarker、Beetl</p>
<p>2、启动类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建generator对象</span><br>        AutoGenerator autoGenerator = <span class="hljs-keyword">new</span> AutoGenerator();<br>        <span class="hljs-comment">//数据源</span><br>        DataSourceConfig dataSourceConfig = <span class="hljs-keyword">new</span> DataSourceConfig();<br>        dataSourceConfig.setDbType(DbType.MYSQL);<br>        dataSourceConfig.setUrl(<span class="hljs-string">&quot;jdbc:mysql://ip:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>);<br>        dataSourceConfig.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSourceConfig.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSourceConfig.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        autoGenerator.setDataSource(dataSourceConfig);<br>        <span class="hljs-comment">//全局配置</span><br>        GlobalConfig globalConfig = <span class="hljs-keyword">new</span> GlobalConfig();<br>        globalConfig.setOutputDir(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        globalConfig.setOpen(<span class="hljs-keyword">false</span>);<br>        globalConfig.setAuthor(<span class="hljs-string">&quot;southwind&quot;</span>);<br>        globalConfig.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<br>        autoGenerator.setGlobalConfig(globalConfig);<br>        <span class="hljs-comment">//包信息</span><br>        PackageConfig packageConfig = <span class="hljs-keyword">new</span> PackageConfig();<br>        packageConfig.setParent(<span class="hljs-string">&quot;com.southwind.mybatisplus&quot;</span>);<br>        packageConfig.setModuleName(<span class="hljs-string">&quot;generator&quot;</span>);<br>        packageConfig.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        packageConfig.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        packageConfig.setServiceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>);<br>        packageConfig.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        packageConfig.setEntity(<span class="hljs-string">&quot;entity&quot;</span>);<br>        autoGenerator.setPackageInfo(packageConfig);<br>        <span class="hljs-comment">//配置策略</span><br>        StrategyConfig strategyConfig = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategyConfig.setEntityLombokModel(<span class="hljs-keyword">true</span>);<br>        strategyConfig.setNaming(NamingStrategy.underline_to_camel);<br>        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);<br>        autoGenerator.setStrategy(strategyConfig);<br><br>        autoGenerator.execute();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>来自：<a href="https://space.bilibili.com/434617924">https://space.bilibili.com/434617924</a></p>
<p><a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis-9.28</title>
    <url>/2021/03/20/SSM/mybatis/</url>
    <content><![CDATA[<h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境：</p>
<ul>
<li>JDK1.8</li>
<li>Mysql 5.7</li>
<li>maven 3.6.1</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件的。  最好的方式：看官网文档；</p>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><div align=center>
<img src="https://z3.ax1x.com/2021/03/31/cAwfYV.png" alt="cAwfYV.png" border="0" />
</div>

<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li><p>maven仓库：</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，io文件持久化。</li>
<li>生活：冷藏. 罐头。</li>
</ul>
<p><strong>为什么需要需要持久化？</strong></p>
<ul>
<li><p>有一些对象，不能让他丢掉。</p>
</li>
<li><p>内存太贵了</p>
</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul>
<li>帮助程序猿将数据存入到数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点：使用的人多！</strong></p>
<p>Spring   SpringMVC    SpringBoot</p>
<h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p>
<h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CREATE DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br>CREATE TABLE `user`(<br>  `id` INT(<span class="hljs-number">20</span>) NOT NULL PRIMARY KEY,<br>  `name` VARCHAR(<span class="hljs-number">30</span>) DEFAULT NULL,<br>  `pwd` VARCHAR(<span class="hljs-number">30</span>) DEFAULT NULL<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>INSERT INTO `user`(`id`,`name`,`pwd`) VALUES <br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;狂神&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123890&#x27;</span>)<br></code></pre></div></td></tr></table></figure>
<p>新建项目</p>
<ol>
<li><p>新建一个普通的maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">   <br><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3></li>
</ol>
<ul>
<li><p>编写mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>编写mybatis工具类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//sqlSessionFactory --&gt; sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3></li>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br>        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">                <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">                <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.dao.UserDao&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--select查询语句--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>       select * from mybatis.user<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3></li>
</ul>
<p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册 mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//第一步：获得SqlSession对象</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br><br>    <span class="hljs-comment">//方式一：getMapper</span><br>    UserDao userDao = sqlSession.getMapper(UserDao.class);<br>    List&lt;User&gt; userList = userDao.getUserList();<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//关闭SqlSession</span><br>    sqlSession.close();<br>&#125;<br><br></code></pre></div></td></tr></table></figure>


</li>
</ul>
<p>你们可以能会遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误。</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p>
<h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p>
<ul>
<li>id : 就是对应的namespace中的方法名；</li>
<li>resultType：Sql语句执行的返回值！</li>
<li>parameterType ： 参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据ID查询用户</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></div></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span> resultType=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;<br>        select * from mybatis.user where id = #&#123;id&#125;<br>&lt;/select&gt;<br><br></code></pre></div></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>   <br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>   <br>    User user = mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>   <br>    sqlSession.close();<br>&#125;<br>   <br></code></pre></div></td></tr></table></figure>
<h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3></li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>
<h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from mybatis.user where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p>注意点：</p>
<ul>
<li>增删改需要提交事务！</li>
</ul>
<h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul>
<li>标签不要匹配错</li>
<li>resource 绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointerException，没有注册到资源!</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出问题！</li>
</ul>
<h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//万能的Map</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br><br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">@Test<br>public void addUser2()&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br><br>    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();<br><br>    map.put(&quot;userid&quot;,5);<br>    map.put(&quot;passWord&quot;,&quot;2222333&quot;);<br><br>    mapper.addUser2(map);<br><br>    sqlSession.close();<br>&#125;<br><br></code></pre></div></td></tr></table></figure>


<p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br></code></pre></div></td></tr></table></figure></li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br></code></pre></div></td></tr></table></figure>
<h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3></li>
</ul>
<p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p><a href="https://imgtu.com/i/cABU8f"><img src="https://z3.ax1x.com/2021/03/31/cABU8f.png" alt="cABU8f.png"></a></p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></div></td></tr></table></figure>
<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11111&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>
<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul>
<li>类型别名是为 Java 类型设置一个短的名字。‘</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p>
<p><a href="https://imgtu.com/i/cAB65q"><img src="https://z3.ax1x.com/2021/03/31/cAB65q.png" alt="cAB65q.png"></a></p>
<p><img src="https://upload-images.jianshu.io/upload_images/22416923-5fb07cc49d386349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1569657672791.png"></p>
<h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>练习时间：</p>
<ul>
<li>将数据库配置文件外部引入</li>
<li>实体类别名</li>
<li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li>
</ul>
<h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><a href="https://imgtu.com/i/cAB5qJ"><img src="https://z3.ax1x.com/2021/03/31/cAB5qJ.png" alt="cAB5qJ.png"></a></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><a href="https://imgtu.com/i/cABOxO"><img src="https://z3.ax1x.com/2021/03/31/cABOxO.png" alt="cABOxO.png"></a></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！</p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p>
<p><a href="https://imgtu.com/i/cADSZd"><img src="https://z3.ax1x.com/2021/03/31/cADSZd.png" alt="cADSZd.png"></a></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>测试出现问题</p>
<p><a href="https://imgtu.com/i/cADEQS"><img src="https://z3.ax1x.com/2021/03/31/cADEQS.png" alt="cADEQS.png"></a></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">//    select * from mybatis.user where id = #&#123;id&#125;<br>//类型处理器<br>//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;<br></code></pre></div></td></tr></table></figure>


<p>解决方法：</p>
<ul>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


</li>
</ul>
<h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p>
<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   pwd<br><span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   password<br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li> 如果世界总是这么简单就好了。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><a href="https://imgtu.com/i/cADmZj"><img src="https://z3.ax1x.com/2021/03/31/cADmZj.png" alt="cADmZj.png"></a></p>
<ul>
<li><p>SLF4J </p>
</li>
<li><p>LOG4J  【掌握】</p>
</li>
<li><p>LOG4J2</p>
</li>
<li><p> JDK_LOGGING</p>
</li>
<li><p>COMMONS_LOGGING</p>
</li>
<li><p>STDOUT_LOGGING   【掌握】</p>
</li>
<li><p>NO_LOGGING</p>
</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p><a href="https://imgtu.com/i/cADuon"><img src="https://z3.ax1x.com/2021/03/31/cADuon.png" alt="cADuon.png"></a></p>
<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>Log4j的使用！，直接测试运行刚才的查询</p>
<p><a href="https://imgtu.com/i/cAD1zT"><img src="https://z3.ax1x.com/2021/03/31/cAD1zT.png" alt="cAD1zT.png"></a></p>
</li>
</ol>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);<br></code></pre></div></td></tr></table></figure></li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);<br>logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);<br>logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);<br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">语法：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit startIndex,pageSize;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit <span class="hljs-number">3</span>;  #[<span class="hljs-number">0</span>,n]<br></code></pre></div></td></tr></table></figure>


<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//分页</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></div></td></tr></table></figure></li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--//分页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br>UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; userList =  mapper.getUserByLimit(map);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br><br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//分页2</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure></li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br><span class="hljs-comment">//RowBounds实现</span><br>RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//通过Java代码层面实现分页</span><br>List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="hljs-keyword">null</span>,rowBounds);<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><a href="https://imgtu.com/i/cAD8QU"><img src="https://z3.ax1x.com/2021/03/31/cAD8QU.png" alt="cAD8QU.png"></a></p>
<p>了解即可，万一 以后公司的架构师，说要使用，你需要知道它是什么东西！</p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure></li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<p> <a href="https://imgtu.com/i/cADteJ"><img src="https://z3.ax1x.com/2021/03/31/cADteJ.png" alt="cADteJ.png"></a></p>
<p><strong>Mybatis详细的执行流程！</strong></p>
<p><a href="https://imgtu.com/i/cADNw9"><img src="https://z3.ax1x.com/2021/03/31/cADNw9.png" alt="cADNw9.png"></a></p>
<h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>


<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserByID</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>


<p>测试类</p>
<p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">has</span> <span class="hljs-title">a</span> <span class="hljs-title">fully</span> <span class="hljs-title">featured</span> <span class="hljs-title">builder</span>, <span class="hljs-title">Automate</span> <span class="hljs-title">your</span> <span class="hljs-title">logging</span> <span class="hljs-title">variables</span>, <span class="hljs-title">and</span> <span class="hljs-title">much</span> <span class="hljs-title">more</span>.</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>在实体类上加注解即可！</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@SneakyThrows</span><br></code></pre></div></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Data</span>：无参构造，get、set、tostring、hashcode，equals<br><span class="hljs-variable">@AllArgsConstructor</span><br><span class="hljs-variable">@NoArgsConstructor</span><br><span class="hljs-variable">@EqualsAndHashCode</span><br><span class="hljs-variable">@ToString</span><br><span class="hljs-variable">@Getter</span><br></code></pre></div></td></tr></table></figure>


<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p>
<p><a href="https://imgtu.com/i/cADwJx"><img src="https://z3.ax1x.com/2021/03/31/cADwJx.png" alt="cADwJx.png"></a></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><a href="https://imgtu.com/i/cAD0W6"><img src="https://z3.ax1x.com/2021/03/31/cAD0W6.png" alt="cAD0W6.png"></a></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(`id`, `name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;秦老师&#x27;</span>); <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `fktid` (`tid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><br></code></pre></div></td></tr></table></figure>


<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路:</span><br><span class="hljs-comment">        1. 查询所有的学生信息</span><br><span class="hljs-comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span><br><span class="hljs-comment">    --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>    select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>


<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>    select s.id sid,s.name sname,t.name tname<br>    from student s,teacher t<br>    where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>环境搭建，和刚才一样</li>
</ol>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br></code></pre></div></td></tr></table></figure>




<h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--按结果嵌套查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>    select s.id sid, s.name sname, t.name tname,t.id tid<br>    from student s,teacher t<br>    where s.tid = t.id and t.id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span><br><span class="hljs-comment">    javaType=&quot;&quot; 指定属性的类型！</span><br><span class="hljs-comment">    集合中的泛型信息，我们使用ofType获取</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>    select * from mybatis.teacher where id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from mybatis.student where tid = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p><strong>慢SQL       1s        1000s</strong>      </p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。<br><br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></div></td></tr></table></figure>


<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br></code></pre></div></td></tr></table></figure>


<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;<br>    <br>    <br>&#125;<br></code></pre></div></td></tr></table></figure></li>
<li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p>
</li>
</ol>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">select * from mybatis.blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    update mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>
<p>==<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>==</p>
<p>if</p>
<p>where ， set  ， choose ，when</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


</li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where标签</li>
</ul>
<h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <br><br>  <span class="hljs-operator">&lt;</span>foreach item<span class="hljs-operator">=</span>&quot;id&quot; collection<span class="hljs-operator">=</span>&quot;ids&quot;<br>      <span class="hljs-keyword">open</span><span class="hljs-operator">=</span>&quot;(&quot; separator<span class="hljs-operator">=</span>&quot;or&quot; <span class="hljs-keyword">close</span><span class="hljs-operator">=</span>&quot;)&quot;<span class="hljs-operator">&gt;</span><br>        #&#123;id&#125;<br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><br>(id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>)<br><br></code></pre></div></td></tr></table></figure>
<p><a href="https://imgtu.com/i/cADrQO"><img src="https://z3.ax1x.com/2021/03/31/cADrQO.png" alt="cADrQO.png"></a></p>
<p><a href="https://imgtu.com/i/cADyOe"><img src="https://z3.ax1x.com/2021/03/31/cADyOe.png" alt="cADyOe.png"></a></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>            id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>


<p>==动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了==</p>
<p>建议：</p>
<ul>
<li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li>
</ul>
<h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">查询  ：  连接数据库 ，耗资源！<br>	一次查询的结果，给他暂存在一个可以直接取到的地方！<span class="hljs-comment">--&gt; 内存 ： 缓存</span><br>	<br>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了<br></code></pre></div></td></tr></table></figure>


<ol>
<li><p>什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li><p>为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li><p>什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
<ul>
<li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p>
</li>
<li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p>
</li>
<li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p>
</li>
</ul>
</li>
</ul>
<h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：  SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志！</li>
<li>测试在一个Sesion中查询两次相同记录</li>
<li>查看日志输出</li>
</ol>
<p><a href="https://imgtu.com/i/cAD2TA"><img src="https://z3.ax1x.com/2021/03/31/cAD2TA.png" alt="cAD2TA.png"></a></p>
<p>缓存失效的情况：</p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
<p><a href="https://imgtu.com/i/cADTOg"><img src="https://z3.ax1x.com/2021/03/31/cADTOg.png" alt="cADTOg.png"></a></p>
</li>
</ol>
<ol start="3">
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
<p><a href="https://imgtu.com/i/cADHmQ"><img src="https://z3.ax1x.com/2021/03/31/cADHmQ.png" alt="cADHmQ.png"></a></p>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--显示的开启全局缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>   <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li>
<li><p>测试</p>
<ol>
<li><p>问题:我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">Caused by: java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.NotSerializableException</span>: com<span class="hljs-selector-class">.kuang</span><span class="hljs-selector-class">.pojo</span>.User<br></code></pre></div></td></tr></table></figure>


</li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>
</ul>
<h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><a href="https://imgtu.com/i/cArQ7d"><img src="https://z3.ax1x.com/2021/03/31/cArQ7d.png" alt="cArQ7d.png"></a></p>
<h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存<br></code></pre></div></td></tr></table></figure>
<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>在mapper中指定使用我们的ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">       user.home – 用户主目录</span><br><span class="hljs-comment">       user.dir  – 用户当前工作目录</span><br><span class="hljs-comment">       java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br>    <br>    &lt;defaultCache<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;10000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;259200&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br> <br>    &lt;cache<br>            name=&quot;cloud_user&quot;<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;5000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;1800&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      name:缓存名称。</span><br><span class="hljs-comment">      maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">      maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="hljs-comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">      clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="hljs-comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="hljs-comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">   --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>


<p>Redis数据库来做缓存！  K-V</p>
<blockquote>
<p>From：<a href="https://www.kuangstudy.com/">https://www.kuangstudy.com/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
</search>

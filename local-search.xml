<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于设计绝对值abs的一些思考</title>
    <link href="/2021/09/18/JavaSE/%E5%85%B3%E4%BA%8E%E8%AE%BE%E8%AE%A1%E7%BB%9D%E5%AF%B9%E5%80%BCabs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <url>/2021/09/18/JavaSE/%E5%85%B3%E4%BA%8E%E8%AE%BE%E8%AE%A1%E7%BB%9D%E5%AF%B9%E5%80%BCabs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="关于设计绝对值abs的一些思考"><a href="#关于设计绝对值abs的一些思考" class="headerlink" title="关于设计绝对值abs的一些思考"></a>关于设计绝对值abs的一些思考</h1><p><img src="https://img.shields.io/badge/JDK-1.8-red"></p><p>「<strong>取绝对值</strong>」对于 <code>Integer</code> 毫无疑问直接判断正负</p><ul><li><code>Math::abs(int)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt; <span class="hljs-number">0</span>) ? -a : a;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意到双精度浮点数 <code>Double</code> 官方使用以下实现</p><ul><li><code>Math::abs(double)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt;= <span class="hljs-number">0.0D</span>) ? <span class="hljs-number">0.0D</span> - a : a;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Java 遵循 <a href="https://en.wikipedia.org/wiki/IEEE_754-2008">IEEE-754</a> 标准，因此实现上存在 <code>+0.0</code> &amp; <code>-0.0</code>，两者除了文本表示不同，在计算过程中也不同。如：<code>1 / +- 0.0</code> 得到的结果是 <code>+Infinity</code> &amp; <code>-Infinity</code> </p><ul><li><code>abs</code> 计算结果仍然是负数，出现<strong>错误</strong>，原因既是 <code>+0.0 == -0.0 </code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> x = -<span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> / abs(x) &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;abs(x) &lt; 0&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (a &lt; <span class="hljs-number">0</span>) ? -a : a;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>尝试解决问题，添加判断条件：<code>if (val &lt; 0 || val == -0.0)</code> 对 <code>-0.0</code> 单独考虑，进行双重判断，这里采用 <code>Double::compare(double, double)</code> 实现</p><ul><li><strong>成功实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || Double.compare(value, -<span class="hljs-number">0.0</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> -value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>再追求极致的优化。查看  <a href="https://github.com/openjdk/jdk/blob/36e2ddad4d2ef3ce27475af6244d0246a8315c0c/src/java.base/share/classes/java/lang/Double.java#L1117">Double::compare</a> 实现。</p><ul><li>对于<strong>正数</strong>进行额外的<strong>两次</strong>比较</li><li>对于 <strong>-0.0</strong> 进行额外的<strong>三次</strong>比较</li><li>对于 <strong>+0.0</strong> 进行额外的<strong>四次</strong>比较</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d1, <span class="hljs-keyword">double</span> d2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (d1 &lt; d2)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;           <span class="hljs-comment">// Neither val is NaN, thisVal is smaller</span><br>    <span class="hljs-keyword">if</span> (d1 &gt; d2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;            <span class="hljs-comment">// Neither val is NaN, thisVal is larger</span><br><br>    <span class="hljs-comment">// Cannot use doubleToRawLongBits because of possibility of NaNs.</span><br>    <span class="hljs-keyword">long</span> thisBits    = Double.doubleToLongBits(d1);<br>    <span class="hljs-keyword">long</span> anotherBits = Double.doubleToLongBits(d2);<br><br>    <span class="hljs-keyword">return</span> (thisBits == anotherBits ?  <span class="hljs-number">0</span> : <span class="hljs-comment">// Values are equal</span><br>            (thisBits &lt; anotherBits ? -<span class="hljs-number">1</span> : <span class="hljs-comment">// (-0.0, 0.0) or (!NaN, NaN)</span><br>             <span class="hljs-number">1</span>));                          <span class="hljs-comment">// (0.0, -0.0) or (NaN, !NaN)</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>而实际上，要想实现只需要 <code>Double::doubleToLongBits</code> 方法，将 <code>Double</code> 转 <code>Long</code> </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MINUS_ZERO_LONG_BITS =<br>        Double.doubleToLongBits(-<span class="hljs-number">0.0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> ||<br>            Double.doubleToLongBits(value) == MINUS_ZERO_LONG_BITS) &#123;<br>        <span class="hljs-keyword">return</span> -value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不过 <code>Double::doubleToLongBits</code> 也只有微不足道的性能提升，因为它会对 <code>NaN</code> 进行约束，<code>NaN</code> 会赋值为 <code>0x7ff8000000000000L</code> ，如果确保 <code>abs</code> 入参肯定是 <code>double</code>，则只需要取出 <code>Double::doubleToRawLongBits</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">doubleToLongBits</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!isNaN(value)) &#123;<br>        <span class="hljs-keyword">return</span> doubleToRawLongBits(value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x7ff8000000000000L</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>于是就变成这样实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MINUS_ZERO_LONG_BITS =<br>  Double.doubleToRawLongBits(-<span class="hljs-number">0.0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> ||<br>      Double.doubleToRawLongBits(value) == MINUS_ZERO_LONG_BITS) &#123;<br>    <span class="hljs-keyword">return</span> -value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到 <code>JDK8</code> 就结束了，而 <code>JDK9</code> 开始引入 <code>@HotSpotIntrinsicCandidate</code> 注解，即 <code>HotSpot JVM</code> 内部的 <code>JIT compiler</code> 会移除 <code>JDK</code> 中的实现方法，采用 <code>CPU</code> 指令直接实现，这会比高级语言转汇编转机器语言要快很多，毕竟 CPU 并不会在乎数据类型的问题，只需要重新解释(reinterpreting) 储存在 CPU 寄存器的一组位的问题，以便于与 Java 数据类型一致。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">long</span> <span class="hljs-title">doubleToRawLongBits</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span></span>;<br></code></pre></div></td></tr></table></figure><p>但这么实现，仍然有条件分支，如果 CPU 分支预测(branch predictor) 失误，性能开销就会增大。接下来考虑减少条件分支。</p><p>利用 <code>0.0</code> 与 <code>+/0.0</code> 作差，都会使正负零转化为正零</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-number">0.0</span> - (-<span class="hljs-number">0.0</span>)); <span class="hljs-comment">// 0.0</span><br>System.out.println(<span class="hljs-number">0.0</span> - (+<span class="hljs-number">0.0</span>)); <span class="hljs-comment">// 0.0</span><br></code></pre></div></td></tr></table></figure><p>对方法进行改写</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span> - value;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> -value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意到对于普通负数而言，<code>0.0 - value</code> 与 <code>-value</code> 的结果相同，所以合并分支</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (value &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span> - value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>AKA</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a &lt;= <span class="hljs-number">0.0</span>) ? <span class="hljs-number">0.0</span> - a : a;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>会发现，JDK <code>Math::abs(double,double)</code> 实现相同（逃</li></ul><p>遵循 <code>IEEE-754</code> 的双精度浮点数二进制表达形式，只需要将二进制在高位符号位改成 0 即可实现转正数(abs)，需要掩码 <code>0x7fffffffffffffffL</code> == 63位 1 bit</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(Long.bitCount(<span class="hljs-number">0x7fffffffffffffffL</span>)); <span class="hljs-comment">// 63</span><br></code></pre></div></td></tr></table></figure><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> Double.longBitsToDouble(<br>    Double.doubleToRawLongBits(value) &amp; <span class="hljs-number">0x7fffffffffffffffL</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌此版本不存在分支，在某些条件下的吞吐量增加 **10%**，单分支实现在 Java 标准库存在多年，在随即到来的 JDK 18 中，改进版本已经提交「From: 2021/9/18」</p><p>然而在许多情况下，这些改进并没有太大意义，因为 JIT 编译器会适当使用汇编指令(if available) 会完全替代 Java code，所以这种改动并<strong>不能</strong>使程序显著性提升很多（逃</p><h2 id="🔗Reference"><a href="#🔗Reference" class="headerlink" title="🔗Reference"></a>🔗Reference</h2><blockquote><p><a href="https://habr.com/en/post/574082/">One does not simply calculate the absolute value</a></p><p><a href="https://github.com/openjdk/jdk/blob/36e2ddad4d2ef3ce27475af6244d0246a8315c0c/src/java.base/share/classes/java/lang/Double.java#L1117">OpenJDK Double::compare</a></p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#doubleToLongBits-double-">JavaSE 8 doubleToLongBits</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ConcurrentHashMap源码分析JDK8</title>
    <link href="/2021/08/29/JavaSE/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90JDK8/"/>
    <url>/2021/08/29/JavaSE/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90JDK8/</url>
    
    <content type="html"><![CDATA[<h2 id="ConcurrentHashMap源码分析JDK8"><a href="#ConcurrentHashMap源码分析JDK8" class="headerlink" title="ConcurrentHashMap源码分析JDK8"></a>ConcurrentHashMap源码分析JDK8</h2><h3 id="一、jdk1-8容器初始化"><a href="#一、jdk1-8容器初始化" class="headerlink" title="一、jdk1.8容器初始化"></a>一、jdk1.8容器初始化</h3><h4 id="1、源码分析"><a href="#1、源码分析" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><blockquote><p>在<code>jdk8</code>的<code>ConcurrentHashMap</code>中一共有5个构造方法，这四个构造方法中都没有对内部的数组做初始化， 只是对一些变量的初始值做了处理</p><p>jdk8的ConcurrentHashMap的数组初始化是在第一次添加元素时完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//没有维护任何变量的操作，如果调用该方法，数组长度默认是16</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentHashMap</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//传递进来一个初始容量，ConcurrentHashMap会基于这个值计算一个比这个值大的2的幂次方数作为初始容量</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="hljs-number">1</span>)) ?<br>               MAXIMUM_CAPACITY :<br>               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>)); <span class="hljs-comment">// 1.5n + 1</span><br>    <span class="hljs-keyword">this</span>.sizeCtl = cap;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>📌注意，调用这个方法，得到的初始容量和 <code>HashMap</code> 以及<code>jdk7</code>的<code>ConcurrentHashMap</code>不同，即使你传递的是一个2的幂次方数，该方法计算出来的初始容量依然是<strong>比这个值大</strong>的2的幂次方数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//调用四个参数的构造</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity, loadFactor, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//计算一个大于或者等于给定的容量值，该值是2的幂次方数作为初始容量</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity,</span></span><br><span class="hljs-function"><span class="hljs-params">                         <span class="hljs-keyword">float</span> loadFactor, <span class="hljs-keyword">int</span> concurrencyLevel)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!(loadFactor &gt; <span class="hljs-number">0.0f</span>) || initialCapacity &lt; <span class="hljs-number">0</span> || concurrencyLevel &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="hljs-comment">// Use at least as many bins</span><br>        initialCapacity = concurrencyLevel;   <span class="hljs-comment">// as estimated threads</span><br>    <span class="hljs-keyword">long</span> size = (<span class="hljs-keyword">long</span>)(<span class="hljs-number">1.0</span> + (<span class="hljs-keyword">long</span>)initialCapacity / loadFactor);<br>    <span class="hljs-keyword">int</span> cap = (size &gt;= (<span class="hljs-keyword">long</span>)MAXIMUM_CAPACITY) ?<br>        MAXIMUM_CAPACITY : tableSizeFor((<span class="hljs-keyword">int</span>)size);<br>    <span class="hljs-keyword">this</span>.sizeCtl = cap;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//基于一个Map集合，构建一个ConcurrentHashMap</span><br><span class="hljs-comment">//初始容量为16</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcurrentHashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;<br>    putAll(m);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、sizeCtl含义解释"><a href="#2、sizeCtl含义解释" class="headerlink" title="2、sizeCtl含义解释"></a>2、<code>sizeCtl</code>含义解释</h4><blockquote><p><strong>注意：以上这些构造方法中，都涉及到一个变量<code>sizeCtl</code>，这个变量是一个非常重要的变量，而且具有非常丰富的含义，它的值不同，对应的含义也不一样，这里我们先对这个变量不同的值的含义做一下说明，后续源码分析过程中，进一步解释</strong></p><p><code>sizeCtl</code>为0，代表数组未初始化， 且数组的初始容量为16</p><p><code>sizeCtl</code>为正数，如果数组未初始化，那么其记录的是数组的初始容量，如果数组已经初始化，那么其记录的是数组的扩容阈值0.75n</p><p><code>sizeCtl</code>为-1，表示数组正在进行初始化</p><p><code>sizeCtl</code>小于0，并且不是-1，表示数组正在扩容， -(1+n)，表示此时有n个线程正在共同完成数组的扩容操作</p></blockquote><h3 id="二、jdk1-8添加安全"><a href="#二、jdk1-8添加安全" class="headerlink" title="二、jdk1.8添加安全"></a>二、jdk1.8添加安全</h3><h4 id="1、源码分析-1"><a href="#1、源码分析-1" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><h5 id="1-1、添加元素put-putVal方法"><a href="#1-1、添加元素put-putVal方法" class="headerlink" title="1.1、添加元素put/putVal方法"></a>1.1、添加元素put/putVal方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> putVal(key, value, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>CHM</code> 不允许有 <strong>空值或空键</strong></li><li><code>int hash = spread(key.hashCode())</code> 扰动函数生成哈希值，<code>(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS</code>：高十六位参与哈希值运算，同时 <code>&amp; 0x7fffffff</code> 即 <code>0111 1111 1111 1111 1111 1111 1111 1111</code> 高位为0，得到的哈希值必然为 <strong>正数</strong> </li><li>在 <code>else</code> 里只对待插入桶 <code>f</code> 加锁，不影响 <code>table</code> 的其他元素，保证了安全和高效</li><li>进入 <code>else</code> 后又进行桶头结点的判断，防止其他线程在插入之前，将桶结构树化，因为 树化 <code>treeifyBin</code> 在 <code>synchronized</code> 之外</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;<br>    <span class="hljs-comment">//如果有空值或者空键，直接抛异常</span><br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span> || value == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-comment">//基于key计算hash值，并进行一定的扰动</span><br>    <span class="hljs-keyword">int</span> hash = spread(key.hashCode());<br>    <span class="hljs-comment">//记录某个桶上元素的个数，如果超过8个，会转成红黑树</span><br>    <span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 死循环</span><br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-keyword">int</span> n, i, fh;<br>        <span class="hljs-comment">//如果数组还未初始化，先对数组进行初始化</span><br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            tab = initTable();<br>    <span class="hljs-comment">//如果hash计算得到的桶位置没有元素，利用cas将元素添加</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//cas+自旋（和外侧的for构成自旋循环），添加前再判空，保证元素添加安全</span><br>            <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-keyword">null</span>,<br>                         <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="hljs-keyword">null</span>)))<br>                <span class="hljs-keyword">break</span>;                   <span class="hljs-comment">// no lock when adding to empty bin</span><br>        &#125;<br>        <span class="hljs-comment">//如果hash计算得到的桶位置元素的hash值为MOVED，证明正在扩容，那么协助扩容</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            tab = helpTransfer(tab, f);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//hash计算的桶位置元素不为空，且当前没有处于扩容操作，进行元素添加</span><br>            V oldVal = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">//对当前桶头结点进行加锁，保证线程安全，执行元素添加操作</span><br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-comment">//普通链表节点</span><br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        binCount = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;<br>                            K ek;<br>                            <span class="hljs-comment">// key相同，则将值覆盖掉「是否覆盖取决于onlyIfAbsent」</span><br>                            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                                ((ek = e.key) == key ||<br>                                 (ek != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;<br>                                oldVal = e.val;<br>                                <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                    e.val = value;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                            Node&lt;K,V&gt; pred = e;<br>                            <span class="hljs-comment">// 尾插法</span><br>                            <span class="hljs-keyword">if</span> ((e = e.next) == <span class="hljs-keyword">null</span>) &#123;<br>                                pred.next = <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(hash, key,<br>                                                          value, <span class="hljs-keyword">null</span>);<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">//树结构，将元素添加到红黑树中</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        Node&lt;K,V&gt; p;<br>                        binCount = <span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,<br>                                                       value)) != <span class="hljs-keyword">null</span>) &#123;<br>                            oldVal = p.val;<br>                            <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                p.val = value;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (binCount != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//链表长度大于/ 等于8，将链表转成红黑树</span><br>                <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)<br>                    treeifyBin(tab, i); <span class="hljs-comment">// 里面还要判断数组长度大于等于64，才会树化</span><br>                <span class="hljs-comment">//如果是重复键，直接将旧值返回</span><br>                <span class="hljs-keyword">if</span> (oldVal != <span class="hljs-keyword">null</span>)<br>                    <span class="hljs-keyword">return</span> oldVal;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//添加的是新元素，维护集合长度，并判断是否要进行扩容操作</span><br>    addCount(<span class="hljs-number">1L</span>, binCount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>通过以上源码，我们可以看到，当需要添加元素时，会针对当前元素所对应的桶位进行加锁操作，这样一方面保证元素添加时，多线程的安全，同时对某个桶位加锁不会影响其他桶位的操作，进一步提升多线程的并发效率</p></blockquote><h5 id="1-2、数组初始化，initTable方法"><a href="#1-2、数组初始化，initTable方法" class="headerlink" title="1.2、数组初始化，initTable方法"></a>1.2、数组初始化，initTable方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;<br>    Node&lt;K,V&gt;[] tab; <span class="hljs-keyword">int</span> sc;<br>    <span class="hljs-comment">//cas+自旋，保证线程安全，对数组进行初始化操作</span><br>    <span class="hljs-keyword">while</span> ((tab = table) == <span class="hljs-keyword">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//如果sizeCtl的值（-1）小于0，说明此时正在初始化， 让出cpu</span><br>        <span class="hljs-keyword">if</span> ((sc = sizeCtl) &lt; <span class="hljs-number">0</span>)<br>            Thread.yield(); <span class="hljs-comment">// lost initialization race; just spin</span><br>        <span class="hljs-comment">//cas修改sizeCtl的值为-1，修改成功，进行数组初始化，失败，继续自旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc, -<span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// double-checked</span><br>                <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//sizeCtl为0，取默认长度16，否则取sizeCtl的值，即自定义值</span><br>                    <span class="hljs-keyword">int</span> n = (sc &gt; <span class="hljs-number">0</span>) ? sc : DEFAULT_CAPACITY;<br>                    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-comment">//基于初始长度，构建数组对象</span><br>                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node&lt;?,?&gt;[n];<br>                    table = tab = nt;<br>                    <span class="hljs-comment">//计算扩容阈值，并赋值给sc</span><br>                    sc = n - (n &gt;&gt;&gt; <span class="hljs-number">2</span>); <span class="hljs-comment">// 0.75n</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//将扩容阈值，赋值给sizeCtl</span><br>                sizeCtl = sc;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tab;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、图解"><a href="#2、图解" class="headerlink" title="2、图解"></a>2、图解</h4><h5 id="2-1、put加锁图解"><a href="#2-1、put加锁图解" class="headerlink" title="2.1、put加锁图解"></a>2.1、put加锁图解</h5><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/CHM1.8%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8.jpg" alt="CHM1.8添加安全"></p><h3 id="三、jdk1-8扩容安全"><a href="#三、jdk1-8扩容安全" class="headerlink" title="三、jdk1.8扩容安全"></a>三、jdk1.8扩容安全</h3><ul><li>线程</li></ul><h4 id="1、源码分析-2"><a href="#1、源码分析-2" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = tab.length, stride;<br>    <span class="hljs-comment">//如果是多cpu，那么每个线程划分任务，最小任务量是16个桶位的迁移</span><br>    <span class="hljs-keyword">if</span> ((stride = (NCPU &gt; <span class="hljs-number">1</span>) ? (n &gt;&gt;&gt; <span class="hljs-number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)<br>        stride = MIN_TRANSFER_STRIDE; <span class="hljs-comment">// subdivide range</span><br>    <span class="hljs-comment">//如果是扩容线程，此时新数组为null</span><br>    <span class="hljs-keyword">if</span> (nextTab == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-comment">// initiating</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-comment">//两倍扩容创建新数组</span><br>            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="hljs-number">1</span>];<br>            nextTab = nt;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;      <span class="hljs-comment">// try to cope with OOME</span><br>            sizeCtl = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        nextTable = nextTab;<br>        <span class="hljs-comment">//记录线程开始迁移的桶位，从后往前迁移</span><br>        transferIndex = n;<br>    &#125;<br>    <span class="hljs-comment">//记录新数组的末尾</span><br>    <span class="hljs-keyword">int</span> nextn = nextTab.length;<br>    <span class="hljs-comment">//已经迁移的桶位，会用这个节点占位（这个节点的hash值为-1--MOVED）</span><br>    ForwardingNode&lt;K,V&gt; fwd = <span class="hljs-keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);<br>    <span class="hljs-keyword">boolean</span> advance = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">boolean</span> finishing = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// to ensure sweep before committing nextTab</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, bound = <span class="hljs-number">0</span>;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-keyword">int</span> fh;<br>        <span class="hljs-comment">// 每个线程只迁移一段桶，先计算该线程迁移哪段</span><br>        <span class="hljs-keyword">while</span> (advance) &#123;<br>            <span class="hljs-keyword">int</span> nextIndex, nextBound;<br>            <span class="hljs-comment">//i记录当前正在迁移桶位的索引值</span><br>            <span class="hljs-comment">//bound记录下一次任务迁移的开始桶位</span><br>            <br>            <span class="hljs-comment">//--i &gt;= bound 成立表示当前线程分配的迁移任务还没有完成</span><br>            <span class="hljs-keyword">if</span> (--i &gt;= bound || finishing)<br>                advance = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-comment">//没有元素需要迁移 -- 后续会去将扩容线程数减1，并判断扩容是否完成</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="hljs-number">0</span>) &#123;<br>                i = -<span class="hljs-number">1</span>;<br>                advance = <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//计算下一次任务迁移的开始桶位，并将这个值赋值给transferIndex</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt<br>                     (<span class="hljs-keyword">this</span>, TRANSFERINDEX, nextIndex,<br>                      nextBound = (nextIndex &gt; stride ?<br>                                   nextIndex - stride : <span class="hljs-number">0</span>))) &#123;<br>                bound = nextBound;<br>                i = nextIndex - <span class="hljs-number">1</span>;<br>                advance = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果没有更多的需要迁移的桶位，就进入该if</span><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;<br>            <span class="hljs-keyword">int</span> sc;<br>            <span class="hljs-comment">//扩容结束后，保存新数组，并重新计算扩容阈值，赋值给sizeCtl</span><br>            <span class="hljs-comment">//这里才是真正的结束扩容，新表替换旧表，重新计算sizeCtl</span><br>            <span class="hljs-keyword">if</span> (finishing) &#123;<br>                nextTable = <span class="hljs-keyword">null</span>;<br>                table = nextTab;<br>                <span class="hljs-comment">//2n-0.5n = 1.5n = 0.75 * 2n，扩容2倍后的下一次扩容阈值</span><br>                sizeCtl = (n &lt;&lt; <span class="hljs-number">1</span>) - (n &gt;&gt;&gt; <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>   <span class="hljs-comment">//扩容任务线程数减1</span><br>            <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">//判断当前所有扩容任务线程是否都执行完成</span><br>                <span class="hljs-comment">//在addCount()里最下面的transfer之前，cas将sc赋值为</span><br>                <span class="hljs-comment">//(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2，与下面判断相同，则证明扩容完毕</span><br>                <span class="hljs-keyword">if</span> ((sc - <span class="hljs-number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-comment">//所有扩容线程都执行完，标识结束</span><br>                finishing = advance = <span class="hljs-keyword">true</span>;<br>                i = n; <span class="hljs-comment">// recheck before commit</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//当前迁移的桶位没有元素，直接在该位置添加一个fwd节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i)) == <span class="hljs-keyword">null</span>)<br>            advance = casTabAt(tab, i, <span class="hljs-keyword">null</span>, fwd);<br>        <span class="hljs-comment">//当前节点已经被迁移</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            advance = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// already processed</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当前节点需要迁移，加锁迁移，保证多线程安全</span><br>            <span class="hljs-comment">//此处迁移逻辑和jdk7的ConcurrentHashMap相同，不再赘述</span><br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-comment">//double-checked，防止桶升级为树结构而出错</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    Node&lt;K,V&gt; ln, hn;<br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">int</span> runBit = fh &amp; n;<br>                        Node&lt;K,V&gt; lastRun = f;<br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="hljs-keyword">null</span>; p = p.next) &#123;<br>                            <span class="hljs-keyword">int</span> b = p.hash &amp; n;<br>                            <span class="hljs-keyword">if</span> (b != runBit) &#123;<br>                                runBit = b;<br>                                lastRun = p;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (runBit == <span class="hljs-number">0</span>) &#123;<br>                            ln = lastRun;<br>                            hn = <span class="hljs-keyword">null</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            hn = lastRun;<br>                            ln = <span class="hljs-keyword">null</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;<br>                            <span class="hljs-keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;<br>                            <span class="hljs-keyword">if</span> ((ph &amp; n) == <span class="hljs-number">0</span>)<br>                                ln = <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);<br>                            <span class="hljs-keyword">else</span><br>                                hn = <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);<br>                        &#125;<br>                        setTabAt(nextTab, i, ln);<br>                        setTabAt(nextTab, i + n, hn);<br>                        <span class="hljs-comment">//迁移过后，原桶加入fwd</span><br>                        setTabAt(tab, i, fwd);<br>                        advance = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;<br>                        TreeNode&lt;K,V&gt; lo = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                        TreeNode&lt;K,V&gt; hi = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                        <span class="hljs-keyword">int</span> lc = <span class="hljs-number">0</span>, hc = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>                            <span class="hljs-keyword">int</span> h = e.hash;<br>                            TreeNode&lt;K,V&gt; p = <span class="hljs-keyword">new</span> TreeNode&lt;K,V&gt;<br>                                (h, e.key, e.val, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>                            <span class="hljs-keyword">if</span> ((h &amp; n) == <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">if</span> ((p.prev = loTail) == <span class="hljs-keyword">null</span>)<br>                                    lo = p;<br>                                <span class="hljs-keyword">else</span><br>                                    loTail.next = p;<br>                                loTail = p;<br>                                ++lc;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">if</span> ((p.prev = hiTail) == <span class="hljs-keyword">null</span>)<br>                                    hi = p;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = p;<br>                                hiTail = p;<br>                                ++hc;<br>                            &#125;<br>                        &#125;<br>                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :<br>                            (hc != <span class="hljs-number">0</span>) ? <span class="hljs-keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;<br>                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :<br>                            (lc != <span class="hljs-number">0</span>) ? <span class="hljs-keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;<br>                        setTabAt(nextTab, i, ln);<br>                        setTabAt(nextTab, i + n, hn);<br>                        setTabAt(tab, i, fwd);<br>                        advance = <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、图解-1"><a href="#2、图解-1" class="headerlink" title="2、图解"></a>2、图解</h4><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/CHM1.8%E6%89%A9%E5%AE%B9%E5%AE%89%E5%85%A8.png" alt="CHM1.8扩容安全"></p><h3 id="四、jdk1-8多线程扩容效率改进"><a href="#四、jdk1-8多线程扩容效率改进" class="headerlink" title="四、jdk1.8多线程扩容效率改进"></a>四、jdk1.8多线程扩容效率改进</h3><blockquote><p>多线程协助扩容的操作会在两个地方被触发：</p><p>① 当添加元素时，发现添加的元素对用的桶位为fwd节点，就会先去协助扩容，然后再添加元素</p><p>② 当添加完元素后，判断当前元素个数达到了扩容阈值，此时发现sizeCtl的值小于0，并且新数组不为空，这个时候，会去协助扩容</p></blockquote><h4 id="1、源码分析-3"><a href="#1、源码分析-3" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><h5 id="1-1、元素未添加，先协助扩容，扩容完后再添加元素"><a href="#1-1、元素未添加，先协助扩容，扩容完后再添加元素" class="headerlink" title="1.1、元素未添加，先协助扩容，扩容完后再添加元素"></a>1.1、元素未添加，先协助扩容，扩容完后再添加元素</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span> || value == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">int</span> hash = spread(key.hashCode());<br>    <span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-keyword">int</span> n, i, fh;<br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            tab = initTable();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-keyword">null</span>,<br>                         <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="hljs-keyword">null</span>)))<br>                <span class="hljs-keyword">break</span>;                   <span class="hljs-comment">// no lock when adding to empty bin</span><br>        &#125;<br>        <span class="hljs-comment">//发现此处为fwd节点，协助扩容，扩容结束后，再循环回来添加元素</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            tab = helpTransfer(tab, f);<br>        <br>        <span class="hljs-comment">//省略代码</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;<br>    Node&lt;K,V&gt;[] nextTab; <span class="hljs-keyword">int</span> sc;<br>    <span class="hljs-keyword">if</span> (tab != <span class="hljs-keyword">null</span> &amp;&amp; (f <span class="hljs-keyword">instanceof</span> ForwardingNode) &amp;&amp;<br>        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">int</span> rs = resizeStamp(tab.length);<br>        <span class="hljs-keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;<br>               (sc = sizeCtl) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="hljs-number">1</span> ||<br>                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc, sc + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">//扩容，传递一个不是null的nextTab</span><br>                transfer(tab, nextTab);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nextTab;<br>    &#125;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="1-2、先添加元素，再协助扩容"><a href="#1-2、先添加元素，再协助扩容" class="headerlink" title="1.2、先添加元素，再协助扩容"></a>1.2、先添加元素，再协助扩容</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCount</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x, <span class="hljs-keyword">int</span> check)</span> </span>&#123;<br>    <span class="hljs-comment">//省略代码</span><br>    <br>    <span class="hljs-keyword">if</span> (check &gt;= <span class="hljs-number">0</span>) &#123;<br>        Node&lt;K,V&gt;[] tab, nt; <span class="hljs-keyword">int</span> n, sc;<br>      <span class="hljs-comment">//元素个数达到扩容阈值</span><br>        <span class="hljs-keyword">while</span> (s &gt;= (<span class="hljs-keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="hljs-keyword">null</span> &amp;&amp;<br>               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;<br>            <span class="hljs-keyword">int</span> rs = resizeStamp(n);<br>            <span class="hljs-comment">//sizeCtl小于0，说明正在执行扩容，那么协助扩容，这里与helpTransfer()是一样的</span><br>            <span class="hljs-keyword">if</span> (sc &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="hljs-number">1</span> ||<br>                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="hljs-keyword">null</span> ||<br>                    transferIndex &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc, sc + <span class="hljs-number">1</span>))<br>                    transfer(tab, nt); <span class="hljs-comment">// 这里传入 newTable</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc,<br>                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="hljs-number">2</span>))<br>                transfer(tab, <span class="hljs-keyword">null</span>); <span class="hljs-comment">// 这里传入空的 newTable 表示没有创建新数组</span><br>            s = sumCount();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：扩容的代码都在transfer方法中，这里不再赘述</p></blockquote><h4 id="2、图解-2"><a href="#2、图解-2" class="headerlink" title="2、图解"></a>2、图解</h4><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/CHM1.8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A9%E5%AE%B9.png" alt="CHM1.8多线程扩容"></p><h3 id="五、集合长度的累计方式"><a href="#五、集合长度的累计方式" class="headerlink" title="五、集合长度的累计方式"></a>五、集合长度的累计方式</h3><h4 id="1、源码分析-4"><a href="#1、源码分析-4" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><h5 id="1-1、addCount方法"><a href="#1-1、addCount方法" class="headerlink" title="1.1、addCount方法"></a>1.1、addCount方法</h5><blockquote><p><strong>① CounterCell数组不为空，优先利用数组中的CounterCell记录数量</strong></p><p><strong>② 如果数组为空，尝试对baseCount进行累加，失败后，会执行fullAddCount逻辑</strong></p><p><strong>③ 如果是添加元素操作，会继续判断是否需要扩容</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCount</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x, <span class="hljs-keyword">int</span> check)</span> </span>&#123;<br>    CounterCell[] as; <span class="hljs-keyword">long</span> b, s;<br>    <span class="hljs-comment">//当CounterCell数组不为空，则优先利用数组中的CounterCell记录数量</span><br>    <span class="hljs-comment">//或者当baseCount的累加操作失败，会利用数组中的CounterCell记录数量</span><br>    <span class="hljs-keyword">if</span> ((as = counterCells) != <span class="hljs-keyword">null</span> ||<br>        !U.compareAndSwapLong(<span class="hljs-keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;<br>        CounterCell a; <span class="hljs-keyword">long</span> v; <span class="hljs-keyword">int</span> m;<br>        <span class="hljs-comment">//标识是否有多线程竞争</span><br>        <span class="hljs-keyword">boolean</span> uncontended = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">//当as数组为空</span><br>        <span class="hljs-comment">//或者当as长度为0</span><br>        <span class="hljs-comment">//或者当前线程对应的as数组桶位的元素为空</span><br>        <span class="hljs-comment">//或者当前线程对应的as数组桶位不为空，但是累加失败</span><br>        <span class="hljs-keyword">if</span> (as == <span class="hljs-keyword">null</span> || (m = as.length - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span> ||<br>            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="hljs-keyword">null</span> ||<br>            !(uncontended =<br>              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;<br>            <span class="hljs-comment">//以上任何一种情况成立，都会进入该方法，传入的uncontended是false</span><br>            fullAddCount(x, uncontended);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (check &lt;= <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//计算元素个数</span><br>        s = sumCount();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (check &gt;= <span class="hljs-number">0</span>) &#123;<br>        Node&lt;K,V&gt;[] tab, nt; <span class="hljs-keyword">int</span> n, sc;<br>        <span class="hljs-comment">//当元素个数达到扩容阈值</span><br>        <span class="hljs-comment">//并且数组不为空</span><br>        <span class="hljs-comment">//并且数组长度小于限定的最大值</span><br>        <span class="hljs-comment">//满足以上所有条件，执行扩容</span><br>        <span class="hljs-keyword">while</span> (s &gt;= (<span class="hljs-keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="hljs-keyword">null</span> &amp;&amp;<br>               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;<br>            <span class="hljs-comment">//这个是一个很大的正数</span><br>            <span class="hljs-keyword">int</span> rs = resizeStamp(n);<br>            <span class="hljs-comment">//sc小于0，说明有线程正在扩容，那么会协助扩容</span><br>            <span class="hljs-keyword">if</span> (sc &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//扩容结束或者扩容线程数达到最大值或者扩容后的数组为null或者没有更多的桶位需要转移，结束操作</span><br>                <span class="hljs-keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="hljs-number">1</span> ||<br>                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="hljs-keyword">null</span> ||<br>                    transferIndex &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//扩容线程加1，成功后，进行协助扩容操作</span><br>                <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc, sc + <span class="hljs-number">1</span>))<br>                    <span class="hljs-comment">//协助扩容，newTable不为null</span><br>                    transfer(tab, nt);<br>            &#125;<br>            <span class="hljs-comment">//没有其他线程在进行扩容，达到扩容阈值后，给sizeCtl赋了一个很大的负数</span><br>            <span class="hljs-comment">//1+1=2 --》 代表此时有一个线程在扩容</span><br>            <br>            <span class="hljs-comment">//rs &lt;&lt; RESIZE_STAMP_SHIFT)是一个很大的负数</span><br>            <span class="hljs-comment">//rs左移16位，最高位是1，确保 sc 赋值为负数</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-keyword">this</span>, SIZECTL, sc,<br>                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="hljs-number">2</span>))<br>                <span class="hljs-comment">//扩容，newTable为null</span><br>                transfer(tab, <span class="hljs-keyword">null</span>);<br>            s = sumCount();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="1-2、fullAddCount方法"><a href="#1-2、fullAddCount方法" class="headerlink" title="1.2、fullAddCount方法"></a>1.2、fullAddCount方法</h5><blockquote><p><strong>① 当CounterCell数组不为空，优先对CounterCell数组中的CounterCell的value累加</strong></p><p><strong>② 当CounterCell数组为空，会去创建CounterCell数组，默认长度为2，并对数组中的CounterCell的value累加</strong></p><p><strong>③ 当数组为空，并且此时有别的线程正在创建数组，那么尝试对baseCount做累加，成功即返回，否则自旋</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fullAddCount</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x, <span class="hljs-keyword">boolean</span> wasUncontended)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-comment">//获取当前线程的hash值</span><br>    <span class="hljs-keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="hljs-number">0</span>) &#123;<br>        ThreadLocalRandom.localInit();      <span class="hljs-comment">// force initialization</span><br>        h = ThreadLocalRandom.getProbe();<br>        wasUncontended = <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//标识是否有冲突，如果最后一个桶不是null，那么为true</span><br>    <span class="hljs-keyword">boolean</span> collide = <span class="hljs-keyword">false</span>;                <span class="hljs-comment">// True if last slot nonempty</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        CounterCell[] as; CounterCell a; <span class="hljs-keyword">int</span> n; <span class="hljs-keyword">long</span> v;<br>        <span class="hljs-comment">//数组不为空，优先对数组中CouterCell的value累加</span><br>        <span class="hljs-keyword">if</span> ((as = counterCells) != <span class="hljs-keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//线程对应的桶位为null</span><br>            <span class="hljs-keyword">if</span> ((a = as[(n - <span class="hljs-number">1</span>) &amp; h]) == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span>) &#123;            <span class="hljs-comment">// Try to attach new Cell</span><br>                    <span class="hljs-comment">//创建CounterCell对象</span><br>                    CounterCell r = <span class="hljs-keyword">new</span> CounterCell(x); <span class="hljs-comment">// Optimistic create</span><br>                    <span class="hljs-comment">//利用CAS修改cellBusy状态为1，成功则将刚才创建的CounterCell对象放入数组中</span><br>                    <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp;<br>                        U.compareAndSwapInt(<span class="hljs-keyword">this</span>, CELLSBUSY, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                        <span class="hljs-keyword">boolean</span> created = <span class="hljs-keyword">false</span>;<br>                        <span class="hljs-keyword">try</span> &#123;               <span class="hljs-comment">// Recheck under lock</span><br>                            CounterCell[] rs; <span class="hljs-keyword">int</span> m, j;<br>                            <span class="hljs-comment">//桶位为空， 将CounterCell对象放入数组</span><br>                            <span class="hljs-keyword">if</span> ((rs = counterCells) != <span class="hljs-keyword">null</span> &amp;&amp;<br>                                (m = rs.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>                                rs[j = (m - <span class="hljs-number">1</span>) &amp; h] == <span class="hljs-keyword">null</span>) &#123;<br>                                rs[j] = r;<br>                                <span class="hljs-comment">//表示放入成功</span><br>                                created = <span class="hljs-keyword">true</span>;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            cellsBusy = <span class="hljs-number">0</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (created) <span class="hljs-comment">//成功退出循环</span><br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-comment">//桶位已经被别的线程放置了已给CounterCell对象，继续循环</span><br>                        <span class="hljs-keyword">continue</span>;           <span class="hljs-comment">// Slot is now non-empty</span><br>                    &#125;<br>                &#125;<br>                collide = <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//桶位不为空，重新计算线程hash值，然后继续循环</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!wasUncontended)       <span class="hljs-comment">// CAS already known to fail</span><br>                wasUncontended = <span class="hljs-keyword">true</span>;      <span class="hljs-comment">// Continue after rehash</span><br>            <span class="hljs-comment">//重新计算了hash值后，对应的桶位依然不为空，对value累加</span><br>            <span class="hljs-comment">//成功则结束循环</span><br>            <span class="hljs-comment">//失败则继续下面判断</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//数组被别的线程改变了，或者数组长度超过了可用cpu大小，重新计算线程hash值，否则继续下一个判断</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counterCells != as || n &gt;= NCPU)<br>                collide = <span class="hljs-keyword">false</span>;            <span class="hljs-comment">// At max size or stale</span><br>            <span class="hljs-comment">//当没有冲突，修改为有冲突，并重新计算线程hash，继续循环</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!collide)<br>                collide = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-comment">//如果CounterCell的数组长度没有超过cpu核数，对数组进行两倍扩容</span><br>            <span class="hljs-comment">//并继续循环</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp;<br>                     U.compareAndSwapInt(<span class="hljs-keyword">this</span>, CELLSBUSY, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (counterCells == as) &#123;<span class="hljs-comment">// Expand table unless stale</span><br>                        CounterCell[] rs = <span class="hljs-keyword">new</span> CounterCell[n &lt;&lt; <span class="hljs-number">1</span>];<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>                            rs[i] = as[i];<br>                        counterCells = rs;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    cellsBusy = <span class="hljs-number">0</span>;<br>                &#125;<br>                collide = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">continue</span>;                   <span class="hljs-comment">// Retry with expanded table</span><br>            &#125;<br>            h = ThreadLocalRandom.advanceProbe(h);<br>        &#125;<br>        <span class="hljs-comment">//CounterCell数组为空，并且没有线程在创建数组，修改标记，并创建数组</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; counterCells == as &amp;&amp;<br>                 U.compareAndSwapInt(<span class="hljs-keyword">this</span>, CELLSBUSY, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-keyword">boolean</span> init = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;                           <span class="hljs-comment">// Initialize table</span><br>                <span class="hljs-keyword">if</span> (counterCells == as) &#123;<br>                    CounterCell[] rs = <span class="hljs-keyword">new</span> CounterCell[<span class="hljs-number">2</span>];<br>                    rs[h &amp; <span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> CounterCell(x);<br>                    counterCells = rs;<br>                    init = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                cellsBusy = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (init)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//数组为空，并且有别的线程在创建数组，那么尝试对baseCount做累加，成功就退出循环，失败就继续循环</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapLong(<span class="hljs-keyword">this</span>, BASECOUNT, v = baseCount, v + x))<br>            <span class="hljs-keyword">break</span>;                          <span class="hljs-comment">// Fall back on using base</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、图解-3"><a href="#2、图解-3" class="headerlink" title="2、图解"></a>2、图解</h4><blockquote><p>fullAddCount方法中，当as数组不为空的逻辑图解</p></blockquote><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/CHM1.8%E9%9B%86%E5%90%88%E9%95%BF%E5%BA%A6%E8%8E%B7%E5%8F%96.png" alt="CHM1.8集合长度获取"></p><h3 id="六、jdk1-8集合长度获取"><a href="#六、jdk1-8集合长度获取" class="headerlink" title="六、jdk1.8集合长度获取"></a>六、jdk1.8集合长度获取</h3><ul><li><code>size</code> 的获取，如果线程可以将大小直接加入到 <code>baseCount</code> 则结束</li><li>否则就尝试加到 <code>counterCells</code> 里，此数组会有扩容机制。加不进去，则随机加入到 <code>counterCells</code> 的其他位置，这点在 <code>fullAddCount</code> 有体现出来</li></ul><h4 id="1、源码分析-5"><a href="#1、源码分析-5" class="headerlink" title="1、源码分析"></a>1、源码分析</h4><h5 id="1-1、size方法"><a href="#1-1、size方法" class="headerlink" title="1.1、size方法"></a>1.1、size方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> n = sumCount();<br>    <span class="hljs-keyword">return</span> ((n &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0</span> :<br>            (n &gt; (<span class="hljs-keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :<br>            (<span class="hljs-keyword">int</span>)n);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="1-2、sumCount方法"><a href="#1-2、sumCount方法" class="headerlink" title="1.2、sumCount方法"></a>1.2、sumCount方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sumCount</span><span class="hljs-params">()</span> </span>&#123;<br>    CounterCell[] as = counterCells; CounterCell a;<br>    <span class="hljs-comment">//获取baseCount的值</span><br>    <span class="hljs-keyword">long</span> sum = baseCount;<br>    <span class="hljs-keyword">if</span> (as != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//遍历CounterCell数组，累加每一个CounterCell的value值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; as.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> ((a = as[i]) != <span class="hljs-keyword">null</span>)<br>                sum += a.value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：这个方法并不是线程安全的</p></blockquote><h2 id="🔗Reference"><a href="#🔗Reference" class="headerlink" title="🔗Reference"></a>🔗Reference</h2><blockquote><p><a href="https://www.bilibili.com/video/BV17i4y1x71z">https://www.bilibili.com/video/BV17i4y1x71z</a></p><p><a href="https://blog.csdn.net/woaiwym/article/details/80675789">https://blog.csdn.net/woaiwym/article/details/80675789</a></p><p><a href="https://www.cnblogs.com/lonely-wolf/p/14502194.html">https://www.cnblogs.com/lonely-wolf/p/14502194.html</a></p><p><a href="https://segmentfault.com/a/1190000021237438">https://segmentfault.com/a/1190000021237438</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java常用集合源码分析 Ⅱ</title>
    <link href="/2021/08/16/JavaSE/Java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%85%A1/"/>
    <url>/2021/08/16/JavaSE/Java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%85%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用集合源码分析-Ⅱ"><a href="#Java常用集合源码分析-Ⅱ" class="headerlink" title="Java常用集合源码分析 Ⅱ"></a>Java常用集合源码分析 Ⅱ</h1><blockquote><p>@Version: JDK 1.8</p><p>@IDE: IntellJ IDEA 2021.1</p><p>@Date: 2021/8/10</p><p>@Author: Hypocrite30</p></blockquote><h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><h3 id="Ⅰ、Set接口"><a href="#Ⅰ、Set接口" class="headerlink" title="Ⅰ、Set接口"></a>Ⅰ、Set接口</h3><ul><li>无序「添加和取出的顺序不一致」，没有索引</li><li>不允许<strong>重复元素</strong>，所以最多包含一个 <code>null</code></li><li>常用实现类有 <code>HashSet</code> &amp; <code>TreeSet</code></li></ul><h3 id="Ⅱ、Map接口"><a href="#Ⅱ、Map接口" class="headerlink" title="Ⅱ、Map接口"></a>Ⅱ、Map接口</h3><ul><li><code>Map</code> 与 <code>Collection</code> 并列存在。用于保存具有<strong>映射关系</strong>的数据：<strong>Key-Value</strong></li><li><code>Map</code> 中的 <code>key</code> 和 <code>value</code> 可以是任何引用类型的数据，会封装到 <code>HashMap$Node</code> 对象中</li><li><code>Map</code> 中的 <code>key</code> 不允许重复，原因和 <code>HashSet</code> 一样，<code>Map</code> 中的 <code>value</code> 可以重复</li><li><code>Map</code> 的 <code>key </code>可以为 <code>null</code> , <code>value</code> 也可以为 <code>null</code>，注意 <code>key</code>为 <code>null</code>, 只能有<strong>一个</strong>，<code>value</code> 为 <code>null</code> ，可以多个.</li><li>常用 <code>String</code> 类作为 <code>Map</code> 的 <code>key</code></li><li><code>key</code> 和 <code>value</code> 之间存在<strong>单向一对一</strong>关系，即通过指定的 <code>key</code> 总能找到对应的 <code>value</code></li></ul><h2 id="二、HashMap"><a href="#二、HashMap" class="headerlink" title="二、HashMap"></a>二、HashMap</h2><h3 id="Ⅰ、Field"><a href="#Ⅰ、Field" class="headerlink" title="Ⅰ、Field"></a>Ⅰ、Field</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 默认初始化容量，且容量必须是 2 次幂</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><span class="hljs-comment">// 最大容量，在两个带参构造中的任何一个隐式指定更高的值时使用。</span><br><span class="hljs-comment">// 必须是 2 的次幂 &lt;= 1&lt;&lt;30</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-comment">// 默认缺省负载因子大小</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><span class="hljs-comment">// 桶的树化阈值：即 链表转成红黑树的阈值，在存储数据时，当链表长度 &gt; 该值时，则将链表转换成红黑树</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br><span class="hljs-comment">// 桶的链表还原阈值</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br><span class="hljs-comment">// 存储箱可树化的最小表容量</span><br><span class="hljs-comment">// 当Map table 数组数量「桶数量」超过这个值时，表中的桶才能进行树形化,</span><br><span class="hljs-comment">// 否则桶内元素太多时会对数组扩容，而不是树形化 </span><br><span class="hljs-comment">// 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<br><span class="hljs-comment">// 哈希表，即 Node 数组</span><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br><span class="hljs-comment">// Set集合，存 Node 节点，因为 Node implements Entry，多态的形式</span><br><span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;<br><span class="hljs-comment">// 哈希表元素个数</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br><span class="hljs-comment">// 哈希表修改次数，不包括 K-V 的替换</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount;<br><span class="hljs-comment">// 要调整大小的下一个大小值，为「容量 * 负载系数」</span><br><span class="hljs-keyword">int</span> threshold;<br><span class="hljs-comment">// 负载因子，建议用默认的 0.75</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br></code></pre></div></td></tr></table></figure><h3 id="Ⅱ、Constructor"><a href="#Ⅱ、Constructor" class="headerlink" title="Ⅱ、Constructor"></a>Ⅱ、Constructor</h3><h4 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h4><ul><li>使用默认的 负载因子，容量还是有其它的初始化设置都是默认的</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h4><ol><li>自定义 <code>table</code> 容量，负载因子是默认的 <code>0.75</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>自定义 容量 和 负载因子</li></ol><ul><li>检验 <strong>容量</strong> 的合法性，不合法抛异常</li><li><strong>if</strong> 自定义容量超过限制最大值 <code>1 &lt;&lt; 30</code>，容量按最大值来取</li><li>检验 <strong>负载因子</strong> 是否「小于0 || 不是一个数」，不合法抛异常</li><li>阈值 <code>threshold</code> 「要调整大小的下一个大小值」需要 「<a href="#%E8%AE%A1%E7%AE%97%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E6%9C%80%E8%BF%912%E6%AC%A1%E5%B9%82%E6%95%B0">计算大于等于给定数的最近2次幂数</a>」，因为阈值必须是 2 次幂的数。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                           initialCapacity);<br>    <span class="hljs-comment">// MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>        initialCapacity = MAXIMUM_CAPACITY;<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                           loadFactor);<br>    <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>    <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌：按照逻辑 (<strong>当size到达threshold时扩容</strong>) <code>threshold</code> 应该这样写 「<code>this.threshold = tableSizeFor(initialCapacity) * this.loadFactor;</code>」但 jdk8 之后的构造方法，没有对 <code>table</code> 数组进行初始化，而是推移到 <code>HashMap::put</code>，在 [put](#Map.put 实现方法及相关方法 putVal(…)) 中对 <code>threshold</code> 重新计算。</p><ol start="3"><li>传入 <code>Map</code>，使用默认 负载因子，容量足够存下入参的 <code>Map</code></li></ol><ul><li>负载因子使用默认 <strong>0.75</strong></li><li>然后创建table，将入参 map 值存入： [putMapEntries](#Map.putAll 实现方法及Map构造方法 putMapEntries(…))，<code>boolean evict = false</code> 说明是表创建模式</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<br>    putMapEntries(m, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Ⅲ、Method"><a href="#Ⅲ、Method" class="headerlink" title="Ⅲ、Method"></a>Ⅲ、Method</h3><h4 id="插入元素-put-K-key-V-value"><a href="#插入元素-put-K-key-V-value" class="headerlink" title="插入元素 put(K key, V value)"></a>插入元素 put(K key, V value)</h4><ul><li>实际的实现函数是 [putVal(…)](#Map.put 实现方法及相关方法 putVal(…))</li><li><code>putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)</code><ul><li>哈希值需要重新计算，使用 [hash()](#hash 计算) 再次计算哈希值，使得哈希值更分散</li><li><code>onlyIfAbsent = false</code>：遇到相同的 <code>key</code>，则会替换原先的值，并返回旧值，否则返回 <code>null</code></li><li><code>evict = true</code>：不是创建模式</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Map-put-实现方法及相关方法-putVal-…"><a href="#Map-put-实现方法及相关方法-putVal-…" class="headerlink" title="Map.put 实现方法及相关方法 putVal(…)"></a>Map.put 实现方法及相关方法 putVal(…)</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 实现 Map.put 和 相关方法</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> hash key的哈希值</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> value value</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> onlyIfAbsent true: 不替换已存在元素; false: 替换</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> evict false: 表为创建模式</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 以前的值，如果没有，则为 null</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-function"><span class="hljs-params">               <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      * tab: 桶数组</span><br><span class="hljs-comment">      * p: 当前的桶</span><br><span class="hljs-comment">      * n: 桶数组长度</span><br><span class="hljs-comment">      * i: 路由地址「下标位置」</span><br><span class="hljs-comment">      */</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;<br>    <span class="hljs-comment">// 如果 table 没初始化或长度为0，则扩容</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">// 如果 hash 位置桶没有数据，则直接插入数据</span><br>    <span class="hljs-comment">// (length - 1) &amp; hash == hash % length</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>    <span class="hljs-comment">// 如果桶有数据，再放入桶中</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// e: 临时的 Node; k: 临时的 key</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">// 判断put的元素和已经存在的元素是相同(hash一致，并且equals返回true)</span><br>        <span class="hljs-comment">// 则将已存在的节点暂存</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-comment">// put的元素与已存在元素不同</span><br>        <span class="hljs-comment">// 如果桶内类型时树结构，则插入到树中</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>        <span class="hljs-comment">// 不是树结构，则插入到链表中</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 遍历到链表结尾插入</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-comment">// 如果链表长度大于阈值，则转化为树结构</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 如果已经存在key，停止遍历，进行下面的替换操作</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 游标向后移动</span><br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断 K-V 有没有插入进哈希表里</span><br>        <span class="hljs-comment">// 上面操作，只要插入进桶里，e != null，否则还是初始的 null 值</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            V oldValue = e.value;<br>            <span class="hljs-comment">// onlyIfAbsent = true: 不替换旧值</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-comment">// K-V 超过阈值，扩容</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/Map.put.png" alt="HashMap.putVal"></p><h4 id="Map-putAll-实现方法及Map构造方法-putMapEntries-…"><a href="#Map-putAll-实现方法及Map构造方法-putMapEntries-…" class="headerlink" title="Map.putAll 实现方法及Map构造方法 putMapEntries(…)"></a>Map.putAll 实现方法及Map构造方法 putMapEntries(…)</h4><ul><li><p><code>((float)s / loadFactor) + 1.0F</code> 加 1 的目的：计算得到容量有可能为小数，后面需要对长度进行取整，容量就会算小，所以加一取整，就是向上取整。</p></li><li><p><code>if (t &gt; threshold)</code>，此 <code>threshold</code> 存放的是 <code>capacity</code> 的值。在 table 未初始化时，带初始化容量的构造器会传入 <code>capacity</code>，并通过 <code>tableSizeFor</code> 计算扩容阈值，让 <code>threshold</code> 暂存这个值。在 <code>HashMap</code> 中没有<code>capacity</code> 这个变量，只是作为 table 数组的大小而隐式存在。</p></li><li><p><code>else if (s &gt; threshold)</code> 说明入参 map 的 <code>size</code> 已经大于当前 <code>map</code> 的 <code>threshold</code>，即当前 <code>map</code> 肯定装不下两个 map 的并集，所以需要扩容</p></li><li><p><code>putVal</code> 过程中也可能出现扩容</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>    <span class="hljs-comment">// 入参集合长度</span><br>    <span class="hljs-keyword">int</span> s = m.size();<br>    <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// table 没有被初始化</span><br>        <span class="hljs-keyword">if</span> (table == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// pre-size</span><br>            <span class="hljs-comment">// s/loadFactor 计算入参map长度是否达到扩容阈值</span><br>            <span class="hljs-keyword">float</span> ft = ((<span class="hljs-keyword">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;<br>            <span class="hljs-comment">// 入参map长度是否超过最大容量，否则取整</span><br>            <span class="hljs-keyword">int</span> t = ((ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-keyword">int</span>)ft : MAXIMUM_CAPACITY);<br>            <span class="hljs-comment">// 如果计算出来的容量t &gt; 当前暂存容量，会用t计算出新扩容阈值</span><br>            <span class="hljs-keyword">if</span> (t &gt; threshold)<br>                threshold = tableSizeFor(t);<br>        &#125;<br>        <span class="hljs-comment">// table 已经初始化，且 m 元素个数大于阈值，扩容处理</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)<br>            resize();<br>        <span class="hljs-comment">// 将 m 中所有元素添加到 table 中</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;<br>            K key = e.getKey();<br>            V value = e.getValue();<br>            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, evict);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="扩容方法-resize"><a href="#扩容方法-resize" class="headerlink" title="扩容方法 resize()"></a>扩容方法 resize()</h4><ul><li>注释①：<code>public HashMap(int initialCapacity, float loadFactor)</code> 两个参数的构造方法，会使用 <a href="#%E8%AE%A1%E7%AE%97%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E6%9C%80%E8%BF%912%E6%AC%A1%E5%B9%82%E6%95%B0">tableSizeFor()</a> 获得大于等于初始容量的最近2次幂数，并给 <code>threshold</code> 赋值，导致在 <code>else if (oldThr &gt; 0)</code> 判断时成立，有参构造都会直接或间接使用到 <code>tableSizeFor</code>，所以都会走这段程序</li><li>注释②：<code>if (newThr == 0)</code> 的情况，有两种。<ul><li>一、在上面 <code>else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</code> 的判断，如果<strong>不满足</strong> <code>oldCap &gt;= DEFAULT_INITIAL_CAPACITY(16)</code>，即传入的初始化容量小于 16，则没法完成 <code>newThr</code> 的赋值，则 <code>newThr == 0</code>  </li><li>二、<code>else if (oldThr &gt; 0)</code> 中，也没有对 <code>newThr</code> 进行赋值，所以此时也是 <code>newThr == 0</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    <span class="hljs-comment">// 旧哈希表</span><br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-comment">// 旧table数组长度</span><br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-comment">// 扩容之前的扩容阈值，触发本次扩容</span><br>    <span class="hljs-keyword">int</span> oldThr = threshold;<br>    <span class="hljs-comment">// newCap: 扩容之后的容量大小</span><br>    <span class="hljs-comment">// newThr: 扩容之后，下次扩容的触发条件</span><br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 哈希表已经初始化过了，正常扩容</span><br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 旧容量超出最大容量，则不扩容，阈值保持为int最大值，返回旧表</span><br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">// 新容量为旧容量扩大一倍，且小于最大容量</span><br>        <span class="hljs-comment">// 还要满足：旧容量 &lt;= 16，才将新扩容阈值扩大一倍</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-comment">// 下面都是未初始化情况</span><br>    <span class="hljs-comment">// 注释①</span><br>    <span class="hljs-comment">// 未初始化，oldThr旧扩容阈值已经计算的情况是有参构造中计算的</span><br>    <span class="hljs-comment">// 1. public HashMap(int initialCapacity, float loadFactor)</span><br>    <span class="hljs-comment">// 2. public HashMap(int initialCapacity</span><br>    <span class="hljs-comment">// 3. public HashMap(Map&lt;? extends K, ? extends V&gt; m)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 初始容量设置为阈值，容量为2的次幂</span><br>        newCap = oldThr;<br>    <span class="hljs-comment">// 1. oldThr == 0 -&gt; 无参构造创建的table</span><br>    <span class="hljs-comment">// 2. oldCap == 0 -&gt; 因为容量最小为0，不为负数</span><br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// 零初始阈值表示使用默认值</span><br>        newCap = DEFAULT_INITIAL_CAPACITY; <span class="hljs-comment">// 16</span><br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="hljs-comment">// 16 * 0.75 = 12</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 注释②</span><br>    <span class="hljs-comment">// newThr == 0时，通过 newCap * loadFactor 计算 newThr，即新的扩容上限</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    <span class="hljs-comment">// 更新 threshold，下次按照本次计算的结果作为扩容上限</span><br>    threshold = newThr;<br>    <span class="hljs-comment">// 以上做了两件事：计算 newCap &amp; newThr</span><br>    <span class="hljs-comment">// 以下完成扩容操作</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    <span class="hljs-comment">// 创建新数组，并赋值替换原table，在一开始就将原table 用 oldTab 标记出来</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    table = newTab;<br>    <span class="hljs-comment">// 扩容前，table不为null</span><br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            <span class="hljs-comment">// 当前 node 节点</span><br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-comment">// 说明当前节点有数据，但数据结构并不清楚</span><br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// help GC</span><br>                oldTab[j] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-comment">// next无值，没有发生碰撞，直接存入新桶中</span><br>                <span class="hljs-comment">// 寻址算法：(length - 1) &amp; hash == hash % length，其实length为2次幂数</span><br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-comment">// 树结构</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                <span class="hljs-comment">// 链表结构</span><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                    <span class="hljs-comment">// 低位链表:存放在扩容之后的数组的下标位置，与当前数组的下标位置一致</span><br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-comment">// 高位链表:存放在扩容之后的数组的下标位置，为当前数组下标位置+扩容之前数组的长度</span><br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-comment">// 当前节点的下个元素</span><br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-comment">/**</span><br><span class="hljs-comment">                          * hash: .... 1 1111</span><br><span class="hljs-comment">                          * hash: .... 0 1111</span><br><span class="hljs-comment">                          * oldCap: ...1 0000</span><br><span class="hljs-comment">                          * if 走低位，else 走高位</span><br><span class="hljs-comment">                          */</span><br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-comment">// 新table的位置在高位「原索引+旧容量」</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-comment">// 原索引放到新桶里面</span><br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-comment">// 原索引 + oldCap 放到新桶里</span><br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌补充：</p><ol><li>当HashMap中的其中一个链表的对象个数如果达到了 8 个，此时如果数组长度没有达到 64，那么HashMap 会先扩容解决，如果已经达到了 64，那么这个链表会变成红黑树，节点类型由 Node 变成TreeNode 类型。当然，如果映射关系被移除后，下次执行resize方法时判断树的节点个数低于 6，也会再把树转换为链表。</li><li>HashMap在进行扩容时，使用的 rehash 方式非常巧妙，因为每次扩容都是翻倍，与原来计算的 <code>(n - 1) &amp; hash</code> 的结果相比，只是多了<strong>一个</strong> bit 位，所以节点要么就在<strong>原来的位置</strong>，要么就被分配到 “<strong>原位置+旧容量</strong>“ 这个位置。</li></ol><p>例如：16 扩展到32时</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/16%E6%89%A9%E5%B1%95%E5%88%B032.png" alt="16扩展到32"></p><p> 因此元素在重新计算hash之后，因为 n 变为 2 倍，那么 n-1 的标记范围在高位多<strong>1bit</strong>(<font color='red'>红色</font>)，因此新的 index 就会发生这样的变化： </p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/rehash%E5%90%8E%E7%9A%84index%E5%8F%98%E5%8C%96.png" alt="rehash后的index变化"></p><ol start="3"><li>两种情况会进行扩容：①元素个数超过「数组长度 * 负载因子」②桶链表长度大于 8 且 table 数组长度小于 64，则会进行扩容，而不是变成树结构</li></ol><h4 id="获取键值对的值-get-Object-key"><a href="#获取键值对的值-get-Object-key" class="headerlink" title="获取键值对的值 get(Object key)"></a>获取键值对的值 get(Object key)</h4><ul><li>核心方法是 [getNode(…)](#Map.get 实现方法及相关方法 getNode(int hash, Object key))，根据 <code>key</code> 找 <code>value</code> 并返回，找不到则返回 <code>null</code></li><li><code>key</code> 传入时需要 [hash(int)](#hash 计算) 计算一次，因为 [put(K, V)](#插入元素 put(K key, V value)) 时也用到 <code>hash(int)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Map-get-实现方法及相关方法-getNode-int-hash-Object-key"><a href="#Map-get-实现方法及相关方法-getNode-int-hash-Object-key" class="headerlink" title="Map.get 实现方法及相关方法 getNode(int hash, Object key)"></a>Map.get 实现方法及相关方法 getNode(int hash, Object key)</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key)</span> </span>&#123;<br>    <span class="hljs-comment">// tab: 当前 hashmap 的散列表</span><br>    <span class="hljs-comment">// first: 桶中的首节点</span><br>    <span class="hljs-comment">// e: 临时节点</span><br><span class="hljs-comment">// n: table 数组长度</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-keyword">int</span> n; K k;<br>    <span class="hljs-comment">// 给 tab, n, first 初始化赋值，并判空</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// (key != null &amp;&amp; key.equals(k)) 正好头结点就是需要找的节点</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-comment">// 当前桶是链表或红黑树</span><br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 桶升级成红黑树</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br>            <span class="hljs-comment">// 桶结构为链表</span><br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-comment">// 循环查找</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除-remove"><a href="#删除-remove" class="headerlink" title="删除 remove"></a>删除 remove</h4><ul><li>实现方法为 [removeNode(…)](#Map.remove 实现方法及相关方法 removeNode(…)) <ul><li><code>removeNode(int hash, Object key, Object value, boolean matchValue boolean movable)</code></li><li><code>matchValue == false</code> 表示必须是 <code>key &amp; value</code> 都相同才删除</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = removeNode(hash(key), key, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) == <span class="hljs-keyword">null</span> ?<br>        <span class="hljs-keyword">null</span> : e.value;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>key &amp; value</code> 都相同才能删除节点<ul><li><code>matchValue == true</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object key, Object value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> removeNode(hash(key), key, value, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>) != <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Map-remove-实现方法及相关方法-removeNode-…"><a href="#Map-remove-实现方法及相关方法-removeNode-…" class="headerlink" title="Map.remove 实现方法及相关方法 removeNode(…)"></a>Map.remove 实现方法及相关方法 removeNode(…)</h4><ul><li><code>matchValue</code>： <strong>true</strong>: <code>key &amp; value</code> 都相同才能删除；<strong>false</strong>: <code>key</code> 相同就可删除</li><li><code>movable</code>： <strong>false</strong>: 删除过程中不移动其他节点 </li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">removeNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key, Object value,</span></span><br><span class="hljs-function"><span class="hljs-params">                           <span class="hljs-keyword">boolean</span> matchValue, <span class="hljs-keyword">boolean</span> movable)</span> </span>&#123;<br>    <span class="hljs-comment">// tab: 引用 hashmap 中的散列表</span><br>    <span class="hljs-comment">// p: 当前 node 节点</span><br>    <span class="hljs-comment">// n: table散列表的数组长度</span><br>    <span class="hljs-comment">// index: 寻址结果</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, index;<br>    <span class="hljs-comment">// 对变量初始化赋值，判空</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// node: 查找到的结果</span><br>        <span class="hljs-comment">// e: 当前node的下一个节点</span><br>        Node&lt;K,V&gt; node = <span class="hljs-keyword">null</span>, e; K k; V v;<br>        <span class="hljs-comment">// 当前桶中元素就是待删除元素</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            node = p;<br>        <span class="hljs-comment">// 桶中遍历其他元素进行删除</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = p.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 桶为树结构</span><br>            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-comment">// 树中查找</span><br>                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);<br>            <span class="hljs-comment">// 桶为链表结构</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key ||<br>                         (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k)))) &#123;<br>                        node = e;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    p = e;<br>                &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// matchValue为false，就不进行后面的value值判断</span><br>        <span class="hljs-comment">// 为true，则找到value也匹配的情况</span><br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||<br>                             (value != <span class="hljs-keyword">null</span> &amp;&amp; value.equals(v)))) &#123;<br>            <span class="hljs-comment">// 树节点删除</span><br>            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)<br>                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="hljs-keyword">this</span>, tab, movable);<br>            <span class="hljs-comment">// 上面的 if 的情况，桶中的首元素为待删除元素</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == p)<br>                tab[index] = node.next;<br>            <span class="hljs-comment">// 链表结构删除节点</span><br>            <span class="hljs-keyword">else</span><br>                p.next = node.next;<br>            ++modCount;<br>            --size;<br>            <span class="hljs-comment">// 在HashMap中是空方法，为了给其子类LinkedHashMap继承重写</span><br>            afterNodeRemoval(node);<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取-get-Object-key"><a href="#获取-get-Object-key" class="headerlink" title="获取 get(Object key)"></a>获取 get(Object key)</h4><ul><li>实现方法 [getNode(…)](#Map.get 的实现方法及其相关方法)，找不到，则返回 <code>null</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Map-get-的实现方法及其相关方法"><a href="#Map-get-的实现方法及其相关方法" class="headerlink" title="Map.get 的实现方法及其相关方法"></a>Map.get 的实现方法及其相关方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-keyword">int</span> n; K k;<br>    <span class="hljs-comment">// 对成员变量赋值，并判空</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 如果桶顶元素符合key，则直接返回</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-comment">// 桶后面有其他元素碰撞</span><br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 红黑树结构，二分查找，O(logn)</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br>            <span class="hljs-comment">// 链表</span><br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="hash-计算"><a href="#hash-计算" class="headerlink" title="hash 计算"></a>hash 计算</h4><ul><li>再次计算 <code>key.hashCode()</code>，将 <strong>高 16 位</strong> 参与进来，使得哈希值<strong>更加分散</strong></li><li><code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code></li><li>右移 16 位， 与原先的哈希值<strong>异或</strong></li><li>将 高 16 位 与原哈希值异或，即将高 16 位 参与进哈希值的运算中。随着元素的增加，哈希碰撞的几率会更低。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="计算大于等于给定数的最近2次幂数"><a href="#计算大于等于给定数的最近2次幂数" class="headerlink" title="计算大于等于给定数的最近2次幂数"></a>计算大于等于给定数的最近2次幂数</h4><p>输入7，结果为8；输入10，结果为16；</p><p>🌰：以入参为 10 为例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = cap - <span class="hljs-number">1</span>; <span class="hljs-comment">// 9</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 0b1001 | 0b0100 = 0b1101</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 0b1101 | 0b0011 = 0b1111</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>; <span class="hljs-comment">// 下面都是 0b1111</span><br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-comment">// n = 0b1111</span><br>    <span class="hljs-comment">// (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1</span><br>    <span class="hljs-comment">// n + 1 = 15 + 1 = 16</span><br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌注：如果一开始 <code>n</code> 不减一，算出来的结果会大一倍</p><h3 id="Ⅳ、HashMap-初始化建议"><a href="#Ⅳ、HashMap-初始化建议" class="headerlink" title="Ⅳ、HashMap 初始化建议"></a>Ⅳ、HashMap 初始化建议</h3><h4 id="一、初始化问题"><a href="#一、初始化问题" class="headerlink" title="一、初始化问题"></a>一、初始化问题</h4><p>由于 HashMap 自动扩容机制，需要重新计算键值对的哈希值，并进行拷贝，开销较大，为了避免自动扩容，尽量在创建哈希表时，<a href="#%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0">有参构造</a> 指定初始容量。</p><p>HashMap 的扩容机制 在 [resize()](#扩容方法 resize()) 有介绍，两种情况会进行扩容：①元素个数超过「数组长度 * 负载因子」（threshold = loadFactor * capacity）②桶链表长度大于 8 且 table 数组长度小于 64，则会进行<strong>扩容</strong>，而不是变成树结构</p><h4 id="二、建议初始化大小计算"><a href="#二、建议初始化大小计算" class="headerlink" title="二、建议初始化大小计算"></a>二、建议初始化大小计算</h4><ul><li>根据《阿里巴巴Java开发手册》编程规约中，对集合处理有以下建议：</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/HashMap%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%9B%E5%BB%BA%E6%8C%87%E5%AE%9A%E5%A4%A7%E5%B0%8F.png" alt="HashMap创建指定初始化大小"></p><p>🌰举例：</p><p>如果设置的默认值为 7，经过 <a href="#%E8%AE%A1%E7%AE%97%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E6%9C%80%E8%BF%912%E6%AC%A1%E5%B9%82%E6%95%B0">tableSizeFor()</a> 计算后，设置为 8。此时 <code>Threshold = 8 * 0.75 = 6</code>，会进行一次扩容，并不是最佳方案。</p><p>通过 <code>initialCapacity / 0.75F + 1.0F</code> 计算，得到设置值为 <code>7 / 0.75 + 1 = 10</code>，经过 <a href="#%E8%AE%A1%E7%AE%97%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E6%9C%80%E8%BF%912%E6%AC%A1%E5%B9%82%E6%95%B0">tableSizeFor()</a> 计算后设置为 16，在容量达到 <code>16 * 0.75 = 12</code> 时进行扩容，符合预期。</p><h3 id="Ⅴ、线程安全问题"><a href="#Ⅴ、线程安全问题" class="headerlink" title="Ⅴ、线程安全问题"></a>Ⅴ、线程安全问题</h3><h4 id="一、HashMap-线程安全问题"><a href="#一、HashMap-线程安全问题" class="headerlink" title="一、HashMap 线程安全问题"></a>一、HashMap 线程安全问题</h4><p>HashMap的线程不安全体现在会造成<strong>死循环</strong>、<strong>数据丢失</strong>、<strong>数据覆盖</strong>这些问题。其中死循环和数据丢失是在 <code>JDK1.7</code>   中出现的问题，在 <code>JDK1.8</code> 中已经得到解决，然而 1.8 中仍会有<strong>数据覆盖</strong>的问题，即在并发执行 <code>HashMap::put</code> 操作时会发生数据覆盖的情况。</p><h4 id="二、JDK7-HashMap并发死链问题"><a href="#二、JDK7-HashMap并发死链问题" class="headerlink" title="二、JDK7 HashMap并发死链问题"></a>二、JDK7 HashMap并发死链问题</h4><ul><li>首先说明：<code>JDK7</code> 中 <code>HashMap</code> 插入操作是 <strong>头插法</strong>。</li></ul><p>关注到 <code>JDK7</code> 的扩容操作，实现的方法是 <code>transfer(...)</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Entry[] newTable, <span class="hljs-keyword">boolean</span> rehash)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> newCapacity = newTable.length;<br>    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != e) &#123;<br>            Entry&lt;K,V&gt; next = e.next; <span class="hljs-comment">// ①</span><br>            <span class="hljs-keyword">if</span> (rehash) &#123;<br>                e.hash = <span class="hljs-keyword">null</span> == e.key ? <span class="hljs-number">0</span> : hash(e.key);<br>            &#125;<br>            <span class="hljs-keyword">int</span> i = indexFor(e.hash, newCapacity); <br>            e.next = newTable[i]; <span class="hljs-comment">// ②</span><br>            newTable[i] = e; <span class="hljs-comment">// ③</span><br>            e = next; <span class="hljs-comment">// ④</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>①：<code>Entry&lt;K,V&gt; next = e.next;</code> 获取 e 的下一个节点指针</p><p>②：<code>e.next = newTable[i];</code> 待转移节点指向新桶</p><p>③：<code>newTable[i] = e;</code> 待转移节点移动到桶位置</p><p>④：<code>e = next;</code> 成功移动后，将 e 指针回到原来链表位置，对下一个节点转移\</p><p>以下视频有详细讲解：</p><blockquote><p><a href="https://www.bilibili.com/video/BV1n541177Ea">https://www.bilibili.com/video/BV1n541177Ea</a></p><p><a href="https://coolshell.cn/articles/9606.html#">https://coolshell.cn/articles/9606.html#</a></p></blockquote><h2 id="三、HashSet"><a href="#三、HashSet" class="headerlink" title="三、HashSet"></a>三、HashSet</h2><ul><li>基于 <code>HashCode</code> 实现元素不重复</li><li>当存入元素哈希码相同时，调用 <code>equals</code> 确认，若为 <code>true</code>，拒绝后者存入「实现不重复」</li></ul><h3 id="Ⅰ、Field-1"><a href="#Ⅰ、Field-1" class="headerlink" title="Ⅰ、Field"></a>Ⅰ、Field</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// HashSet 底层使用 HashMap 实现</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HashMap&lt;E,Object&gt; map;<br><span class="hljs-comment">// 虚拟对象，充当 map 的 value</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object PRESENT = <span class="hljs-keyword">new</span> Object();<br></code></pre></div></td></tr></table></figure><h3 id="Ⅱ、Constructor-1"><a href="#Ⅱ、Constructor-1" class="headerlink" title="Ⅱ、Constructor"></a>Ⅱ、Constructor</h3><h4 id="无参构造-1"><a href="#无参构造-1" class="headerlink" title="无参构造"></a>无参构造</h4><ul><li>构造一个新的空集合；备份HashMap实例具有默认的初始容量（<strong>16</strong>）和负载因子（<strong>0.75</strong>）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span> </span>&#123;<br>    map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="三、TreeSet"><a href="#三、TreeSet" class="headerlink" title="三、TreeSet"></a>三、TreeSet</h2><ul><li>基于排列顺序实现元素不重复</li><li>实现 <code>SortedSet</code> 接口，对集合元素自动排序</li><li>元素对象的类型<strong>必须</strong>实现 <code>Comparable</code> 接口，指定排序规则</li><li>通过 <code>CompareTo</code> 方法确定是否为<strong>重复元素</strong></li></ul><h2 id="🔗Reference"><a href="#🔗Reference" class="headerlink" title="🔗Reference"></a>🔗Reference</h2><blockquote><p><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">https://tech.meituan.com/2016/06/24/java-hashmap.html</a></p><p><a href="https://developer.aliyun.com/topic/java20">《阿里巴巴Java开发手册 v1.7.0嵩山版》</a></p><p><a href="https://www.bilibili.com/video/BV1n541177Ea">HashMap死链问题</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java常用集合源码分析 Ⅰ</title>
    <link href="/2021/08/10/JavaSE/Java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%85%A0/"/>
    <url>/2021/08/10/JavaSE/Java%E5%B8%B8%E7%94%A8%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E2%85%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用集合源码分析-Ⅰ"><a href="#Java常用集合源码分析-Ⅰ" class="headerlink" title="Java常用集合源码分析 Ⅰ"></a>Java常用集合源码分析 Ⅰ</h1><blockquote><p>@Version: JDK 1.8</p><p>@IDE: IntellJ IDEA 2021.1</p><p>@Date: 2021/8/7 </p><p>@Author: Hypocrite30</p></blockquote><h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><ul><li>集合主要分为两大类：<code>Collection</code> &amp; <code>Map</code> </li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/image-20210807224135029.png"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/image-20210807224413506.png"></p><h3 id="Ⅰ、Collection接口"><a href="#Ⅰ、Collection接口" class="headerlink" title="Ⅰ、Collection接口"></a>Ⅰ、Collection接口</h3><ul><li>有些实现类有序「List」，有些无序「Set」</li><li>有些可放重复元素，有些不可以</li><li>Collection 接口没有直接的实现子类，通过子接口「Set」「List」实现</li></ul><h3 id="Ⅱ、Iterator接口"><a href="#Ⅱ、Iterator接口" class="headerlink" title="Ⅱ、Iterator接口"></a>Ⅱ、Iterator接口</h3><ul><li>因为<code>Collection&lt;E&gt; extends Iterable&lt;E&gt;</code> ，所以所有子类都可以通过获取 <code>Iterator</code> 遍历集合</li></ul><p>常见方法：</p><table><thead><tr><th align="center">boolean</th><th>hashNext()</th><th>Returns: true if the iteration has more elements</th></tr></thead><tbody><tr><td align="center"><b>E</b></td><td><b>next()</b></td><td><b>Returns: the next element in the iteration</b></td></tr><tr><td align="center"><b>void</b></td><td><b>remove()</b></td><td><b>Removes from the underlying collection the last element returned by this iterator</b></td></tr></tbody></table><p>📌：在调用 <code>iterator.next()</code> 之前必须调用 <code>iterator.hasNext()</code> 判断后面是否存在元素。若不调用，到最后一个元素，调用 <code>next()</code> 会抛出 <code>NoSuchElementException</code></p><h3 id="Ⅲ、List接口"><a href="#Ⅲ、List接口" class="headerlink" title="Ⅲ、List接口"></a>Ⅲ、List接口</h3><ul><li>元素有序</li><li>可重复</li><li>支持索引</li><li>每个元素有一个整数型序号，记录元素在容器中的位置，可用于存取</li></ul><h2 id="二、ArrayList"><a href="#二、ArrayList" class="headerlink" title="二、ArrayList"></a>二、ArrayList</h2><ul><li><code>ArrayList</code> 可以存放任何数据，包括 <code>null</code></li><li><code>ArrayList</code> 基本等同于 <code>Vector</code>，区别在于前者是<strong>线程不安全</strong>的「执行效率高」</li><li><code>ArrayList</code> 内部存储数据结构为<strong>数组</strong></li></ul><h3 id="Ⅰ、Field"><a href="#Ⅰ、Field" class="headerlink" title="Ⅰ、Field"></a>Ⅰ、Field</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认初始化容量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_CAPACITY = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 空数组容量为0，有参构造默认使用的存储数据结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 空数组容量为0，无参构造时默认使用的存储数据结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这ArrayList底层用到的存取数据的数组</span><br><span class="hljs-comment"> * 非私有，以简化嵌套类访问</span><br><span class="hljs-comment"> * transient 不允许序列化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">transient</span> Object[] elementData;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实际ArrayList集合大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可分配的最大容量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br></code></pre></div></td></tr></table></figure><p>📌几点说明：</p><ul><li>无参构造，数组默认初始化容量是 <strong>10</strong></li><li>预先创建好两个空数组，在构造过程中，直接赋值给存储数组</li><li>真正存储数据的数组是 <code>Object[] elementData</code>，并且被 <code>transient</code> 修饰，这样序列化不会将其写入流中，但是这样反序列化会丢失数据，需要分析 <code>writeObject(ObjectOutputStream s)</code> 和 <code>readObject(ObjectInputStream s)</code> 得到[序列化如何实现](#ArrayList 序列化与反序列化)</li><li>注意到 <code>MAX_ARRAY_SIZE</code> 数组最大长度是 <code>Integer.MAX_VALUE - 8</code>，[下面说明](#MAX_ARRAY_SIZE 数值说明)</li></ul><h4 id="ArrayList-序列化与反序列化"><a href="#ArrayList-序列化与反序列化" class="headerlink" title="ArrayList 序列化与反序列化"></a>ArrayList 序列化与反序列化</h4><ul><li><code>private void writeObject(java.io.ObjectOutputStream s)</code> 序列化<ul><li>序列化写入到流中有：<code>size</code> &amp; <code>element元素值</code> </li><li><code>elementData[]</code> 只做缓存数组，通常会预留容量，不够才扩容，因此序列化只取数组中需要的元素，<strong>节省空间和时间</strong>。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> java.io.IOException</span>&#123;<br>    <span class="hljs-comment">// 预期的修改次数，用于判断并发修改的问题</span><br>    <span class="hljs-keyword">int</span> expectedModCount = modCount;<br>    s.defaultWriteObject();<br><br>    <span class="hljs-comment">// 写入 ArrayList size</span><br>    s.writeInt(size);<br><br>    <span class="hljs-comment">// 写入每一个元素值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        s.writeObject(elementData[i]);<br>    &#125;<br><span class="hljs-comment">// 判断序列化的并发问题</span><br>    <span class="hljs-keyword">if</span> (modCount != expectedModCount) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>private void readObject(java.io.ObjectInputStream s)</code> 反序列化<ul><li>因为构造此 <code>ArrayList</code> 已经有模板和数据「序列化保存的size&amp;element」所以使用 <code>EMPTY_ELEMENTDATA</code> 作为空数组，而不是 <code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code></li><li>根据 <code>size</code> 读入元素数据</li><li>按序列化正确顺序存入存储数组中</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;<br>    <span class="hljs-comment">// 这里的 EMPTY_ELEMENTDATA 就是字段中的用于给有参构造用的空数组</span><br>    elementData = EMPTY_ELEMENTDATA;<br><br>    <span class="hljs-comment">// 按照 size 读入数据</span><br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// 读取容量</span><br>    s.readInt(); <span class="hljs-comment">// ignored</span><br><br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 与 clone() 类似，根据大小而不是容量分配阵列</span><br>        <span class="hljs-keyword">int</span> capacity = calculateCapacity(elementData, size);<br>        SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);<br>        ensureCapacityInternal(size);<br><br>        Object[] a = elementData;<br>        <span class="hljs-comment">// 按正确顺序读入所有元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            a[i] = s.readObject();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="MAX-ARRAY-SIZE-数值说明"><a href="#MAX-ARRAY-SIZE-数值说明" class="headerlink" title="MAX_ARRAY_SIZE 数值说明"></a>MAX_ARRAY_SIZE 数值说明</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The maximum size of array to allocate.</span><br><span class="hljs-comment"> * Some VMs reserve some header words in an array.</span><br><span class="hljs-comment"> * Attempts to allocate larger arrays may result in</span><br><span class="hljs-comment"> * OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br></code></pre></div></td></tr></table></figure><p>官方注释解释，有些虚拟机会保留一些字段空间，如果用满 <code>Integer.MAX_VALUE</code> <strong>可能</strong>会 OOM。</p><p>StackOverflow 上的部分解释提及到「内存模型里的<strong>对象头</strong>的组成」<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote">&lt;span class=”hint–top hint–rounded” aria-label=”Why the maximum array size of ArrayList is Integer.MAX_VALUE - 8?</p><p>“&gt;[1]</span></a></sup></p><p>于是对于 <strong>Java数组对象</strong> 剖析<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote">&lt;span class=”hint–top hint–rounded” aria-label=”Anatomy of a Java array object</p><p>“&gt;[2]</span></a></sup></p><p>IBM官方说到「与Java对象相比，区别在于数组对象有一个额外的元数据，用于表示 <strong>数组的大小</strong>」</p><p>剖析 <strong>Java对象</strong>  <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote">&lt;span class=”hint–top hint–rounded” aria-label=”Anatomy of a Java object</p><p>“&gt;[3]</span></a></sup></p><p>不同的JVM厂商对元数据数量的设计有差异，但通常包括：</p><ul><li><strong>Class</strong>：指向类信息的指针，即类型指针。指向方法区中的类元信息。</li><li><strong>Flags</strong>：描述对象状态的标志集合，包括 hashcode 和 shape「对象是否为数组」</li><li><strong>Lock</strong>： 对象的同步信息「当前对象是否同步」</li></ul><p>而 <strong>Java数组对象</strong> 还多一个 <strong>Size</strong>，即数组的大小。</p><p>「<a href="https://stackoverflow.com/questions/35756277/why-the-maximum-array-size-of-arraylist-is-integer-max-value-8#:~:text=The%20size%20of%20object%20header%20can%20not%20exceed%208%20byte.">对象头的大小不能超过 8 字节</a>」</p><p><strong>标记字 Mark Word</strong>「哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳」在 32 位架构占 4 byte，64 位架构占 8 byte；<strong>类型指针Klass pointer</strong> 在 32 为架构上具有字长，但如果堆地址可以用 4 byte 编码，则依然可以占 4 byte。</p><p>📌：所以为了保险起见「防止OOM」，最大数组长度设置为 <code>Integer.MAX_VALUE - 8</code> </p><h3 id="Ⅱ、Constructor"><a href="#Ⅱ、Constructor" class="headerlink" title="Ⅱ、Constructor"></a>Ⅱ、Constructor</h3><h4 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造一个初始容量为10的空列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>这里的初始容量为 10，在字段 <code>DEFAULT_CAPACITY = 10</code> 体现出来的</li></ul><h4 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>构造一个具有指定初始容量的空列表</li><li>如果入参为负数，则抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-comment">// 按正确顺序包含此列表中所有元素的数组</span><br>    Object[] a = c.toArray();<br>    <span class="hljs-comment">// 先更新 size 值，再判断。如果是空数组则直接使用默认空数组</span><br>    <span class="hljs-keyword">if</span> ((size = a.length) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 判断 c 集合是不是ArrayList，是则直接赋值</span><br>        <span class="hljs-keyword">if</span> (c.getClass() == ArrayList.class) &#123;<br>            elementData = a;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 否则手动拷贝一份 Object[]</span><br>            elementData = Arrays.copyOf(a, size, Object[].class);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// replace with empty array.</span><br>        elementData = EMPTY_ELEMENTDATA;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>按照集合迭代器返回的顺序，构造包含指定集合元素的列表。即传入一个集合类</li><li>传入 null 则抛出 <code>NullPointerException</code> </li></ul><h3 id="Ⅲ、Method"><a href="#Ⅲ、Method" class="headerlink" title="Ⅲ、Method"></a>Ⅲ、Method</h3><h4 id="增添元素-add-E-e"><a href="#增添元素-add-E-e" class="headerlink" title="增添元素 add(E e)"></a>增添元素 add(E e)</h4><ul><li>添加元素 e</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p><code>ensureCapacityInternal(int minCapacity)</code> <a href="#%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6">检查是否扩容</a>，确保容量<strong>至少</strong>达到 <code>size + 1</code>，在此过程中，modCount 会增加，因为扩容属于修改操作。</p></li><li><p>确保容量够后，将值存入数组「<strong>elementData</strong>」同时 <code>size ++</code></p></li></ul><h4 id="添加元素-add-int-index-E-element"><a href="#添加元素-add-int-index-E-element" class="headerlink" title="添加元素 add(int index, E element)"></a>添加元素 add(int index, E element)</h4><ul><li>在指定 index 位置插入元素，其后的元素都向右移动</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    rangeCheckForAdd(index);<br><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,<br>                     size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rangeCheckForAdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>先检查 index 的合法性</li><li><a href="#%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6">检查是否扩容</a>，确保容量<strong>至少</strong>达到 <code>size + 1</code>，期间 modCount 增加</li><li>[index, size] 的元素向后移动一个单位</li><li>插入元素，更新 size 值</li></ul><h4 id="删除-remove-int-index"><a href="#删除-remove-int-index" class="headerlink" title="删除 remove(int index)"></a>删除 remove(int index)</h4><ul><li>删除下标为 index 的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    rangeCheck(index);<br><br>    modCount++;<br>    E oldValue = elementData(index);<br><br>    <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index + <span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 方便 GC</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 上述使用到的方法实现</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rangeCheck</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= size)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<br>&#125;<br><span class="hljs-function">E <span class="hljs-title">elementData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (E) elementData[index];<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>检查 index 合法性，修改计数器 modCount ++</li><li>获取旧元素，作为方法返回值</li><li>计算需要还原的后面的元素个数为 <code>size - index - 1</code></li><li>后面的元素全部向前移动一个单位，旧元素被<strong>覆盖</strong></li><li>删除操作前数组的最后一位置空，方便 GC</li></ul><h4 id="删除-remove-Object-o"><a href="#删除-remove-Object-o" class="headerlink" title="删除 remove(Object o)"></a>删除 remove(Object o)</h4><ul><li>删除指定元素 o</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-keyword">null</span>) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 没有返回值的 remove(int index)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fastRemove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    modCount++;<br>    <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 方便 GC</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>简单的 for - loop 找值，同时也能找到存储进去的 null 值「非扩容部分的 null」条件是 <code>index &lt; size</code> </li></ul><h4 id="删除-clear"><a href="#删除-clear" class="headerlink" title="删除 clear()"></a>删除 clear()</h4><ul><li>清空所有元素值</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>    modCount++;<br>    <span class="hljs-comment">// 方便 GC</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>        elementData[i] = <span class="hljs-keyword">null</span>;<br>    size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>修改计数器自增；元素置空，便于GC；最后修改 size</li></ul><h4 id="修改-set-int-index-E-element"><a href="#修改-set-int-index-E-element" class="headerlink" title="修改 set(int index, E element)"></a>修改 set(int index, E element)</h4><ul><li>将 index 位置的元素值修改为 element</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    rangeCheck(index);<br><br>    E oldValue = elementData(index);<br>    elementData[index] = element;<br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>先检查 index 的合法性</li><li>获取旧值；修改</li><li>返回旧值</li></ul><h4 id="查找-get-int-index"><a href="#查找-get-int-index" class="headerlink" title="查找 get(int index)"></a>查找 get(int index)</h4><ul><li>查找并返回 index 位置的值</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    rangeCheck(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><ul><li>确保存储数组的容量<strong>至少</strong>达到 <code>minCapacity</code> 的大小</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>计算<strong>预期</strong>数组容量<ul><li><code>elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code> 判断当前数组是不是<strong>无参构造</strong>创造出来的<strong>容量为0</strong>的数组</li><li>如果是，则计算出来的数组容量即为 <code>size + 1</code>，即 <code>0 + 1</code>，因为默认空数组size == 0</li><li>否则直接返回 minCapacity，即传进来的 [size + 1](#增添元素 add(E e))</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌Q：if 语句返回的一直都是 <code>minCapacity</code>「因为正数minCapacity &gt; DEFAULT_CAPACITY (0)」，而 if 语句外也是返回 <code>minCapacity</code>。设计意义在哪？</p><p>A：假设传入的 <code>minCapacity</code> 是负数，即 add() 中的 <code>size + 1</code> 仍为负数，则会返回 <code>DEFAULT_CAPACITY</code> AKA <strong>10</strong>，即无参构造默认创建容量为 <strong>10</strong> 的数组，所以这么设计可以解决非法入参。</p><p>Q：为什么要判断「elementData」是否是 默认空数组<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code></p><p>A：其实此 if 语句只有第一次扩容会使用到，真正的扩容 <code>grow()</code> 在每一次扩容都会创建出新的数组覆盖掉 <code>elementData</code>，扩容之后肯定就能确保入参 <code>minCapacity</code> 是正数（[size + 1](#增添元素 add(E e))），不需要再判断。</p><ul><li>确保明确的容量，做扩容前的最后一次确认<ul><li>修改计数器自增</li><li>判断刚才计算的<strong>预期</strong>数组容量 是否大于 当前数组容量</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    modCount++;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌官方在条件判断这里注解了 溢出警告「overflow-conscious」，这里涉及到 <code>a &lt; b</code> 与 <code>a - b &lt; 0</code> 区别的问题，[下文说明](#关于 a &lt; b 与 a - b &lt; 0 应用说明)。</p><ul><li>扩容操作<ul><li>获取旧容量，根据旧容量的 <strong>1.5</strong> 倍大小作为新容量，使用<strong>位运算</strong>提高效率。</li><li>两个特殊判断后，进行扩容，使用的是 <code>Arrays.copyOf</code> 扩容，这会创建出<strong>新数组</strong>覆盖原数组</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// AKA 1.5倍扩容</span><br>    <span class="hljs-comment">// 只有第一次才会 true 修改新容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-comment">// 如果新容量太大，则按照大容量处理方式</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>📌Q：第一个条件 <code>newCapacity &lt; minCapacity</code> 判断奇怪，新容量为什么会比预测容量小。预测容量是 <code>size + 1</code>，即所有数据长度 + 1，而新容量是在原容量基础上扩大 1.5 倍，肯定比 <code>minCapacity</code> 要大。</p><p>A：在无参构造创建空数组时，<code>oldCapacity</code> 原容量为 0，<strong>扩大 1.5 倍仍然为 0</strong>。此时新容量自然比预测容量要小，将值为0的 <code>newCapacity</code> 更新为 预测容量。而在此之后，这一更新操作都不会进行，因为扩容容量肯定比预测容量大「(x1.5) &gt; (+ 1)」。</p><ul><li>大容量处理方式<ul><li>int 型一直累加到负数，说明已经超出 int 存储的最大值了，抛异常</li><li>预测容量 &gt;  允许的最大容量，则让新容量为 int 最大值，否则为 <code>MAX_ARRAY_SIZE</code>，即 <code>Integer.MAX_VALUE - 8</code>，相当于给一个稳妥的值，[不至于OOM](#MAX_ARRAY_SIZE 数值说明)。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hugeCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> OutOfMemoryError();<br>    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?<br>        Integer.MAX_VALUE :<br>        MAX_ARRAY_SIZE;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>Arrays 工具类扩容<ul><li>最终都会调用本地方法 <code>arraycopy()</code> 进行扩容</li><li>可以看到，返回的 <code>copy</code> 数组都是 new 出来的，所以扩容会让存储数组变成不同对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="hljs-keyword">int</span> newLength) &#123;<br>    <span class="hljs-keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="hljs-keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;<br>    T[] copy = ((Object)newType == (Object)Object[].class)<br>        ? (T[]) <span class="hljs-keyword">new</span> Object[newLength]<br>        : (T[]) Array.newInstance(newType.getComponentType(), newLength);<br>    System.arraycopy(original, <span class="hljs-number">0</span>, copy, <span class="hljs-number">0</span>,<br>                     Math.min(original.length, newLength));<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">arraycopy</span><span class="hljs-params">(Object src,  <span class="hljs-keyword">int</span>  srcPos,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        Object dest, <span class="hljs-keyword">int</span> destPos,</span></span><br><span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-keyword">int</span> length)</span></span>;<br></code></pre></div></td></tr></table></figure><h3 id="关于-a-lt-b-与-a-b-lt-0-应用说明"><a href="#关于-a-lt-b-与-a-b-lt-0-应用说明" class="headerlink" title="关于 a &lt; b 与 a - b &lt; 0 应用说明"></a>关于 a &lt; b 与 a - b &lt; 0 应用说明</h3><p>Q：看到上述扩容的很多条件判断使用的都是 <code>a - b &lt; 0</code> 的形式，而不是直接比较，这种设计的好处在哪？</p><p>在数学中，这两个不等式是完全等价的。但在计算机中，需要考虑到存储的问题，有可能会出现变量 <code>a | b</code> 出现</p><p><strong>溢出</strong>的情况。</p><p>🌰Demo <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Difference between if (a - b &lt; 0) and if (a &lt; b)]">[4]</span></a></sup>：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = Integer.MAX_VALUE;<br><span class="hljs-keyword">int</span> b = Integer.MIN_VALUE;<br><span class="hljs-keyword">if</span> (a &lt; b) System.out.println(<span class="hljs-string">&quot;a &lt; b&quot;</span>);<br><span class="hljs-keyword">if</span> (a - b &lt; <span class="hljs-number">0</span>) System.out.println(<span class="hljs-string">&quot;a - b &lt; 0&quot;</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>结果：a - b &lt; 0</p></blockquote><ul><li>正常情况下，a 肯定小于 b</li><li>但是结果是 <code>a - b &lt; 0</code> 为 true，即 a &lt; b</li></ul><p>分析：<code>a - b</code> 超出 int 存储最大范围，于是<strong>溢出</strong>，变成负数</p><p>ArrayList 前的判断：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// overflow-conscious code</span><br><span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>    grow(minCapacity);<br></code></pre></div></td></tr></table></figure><p>官方也提出 溢出警告</p><ul><li><p>使用 <code>a &lt; b</code> 形式</p><ul><li>如果 <code>minCapacity</code> 过大，溢出变成负数，此时不会扩容，然而此情况是有扩容需求的</li></ul></li><li><p>使用 <code>a - b &lt; 0</code> 形式</p><ul><li>如果 <code>minCapacity</code> 过大，溢出为负数，而减去一个正数又会回到正数，此时就会顺利进入扩容中</li></ul></li></ul><p><code>grow()</code> :</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// overflow-conscious code</span><br><span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br><span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>    newCapacity = minCapacity;<br><span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>    newCapacity = hugeCapacity(minCapacity);<br></code></pre></div></td></tr></table></figure><p>同样也有溢出警告</p><ul><li>使用 <code>a &lt; b</code> 形式<ul><li><code>newCapacity</code> 如果扩容 1.5 倍后太大溢出为负数，则会小于 <code>minCapacity</code>，会更新 <code>newCapacity = minCapacity;</code> </li><li>下一个条件判断，<code>newCapacity</code> 为负数 会小于 <code>MAX_ARRAY_SIZE</code>，所以不会进行 超大容量处理，则会出现问题</li></ul></li><li>使用 <code>a - b &lt; 0</code> 形式<ul><li>第一个条件判断，溢出为负数的 <code>newCapacity</code>，减去正数 <code>minCapacity</code> 结果大于 0，不更新 <code>newCapacity</code>，即只有第一次扩容「空数组」会更新</li><li>第二个条件判断，同理，会执行超大容量处理，合乎逻辑。</li></ul></li></ul><h2 id="三、Vector"><a href="#三、Vector" class="headerlink" title="三、Vector"></a>三、Vector</h2><ul><li>因为方法上加了 <code>synchronized</code>，是方法级的锁，所以是线程安全的。</li><li>大部分逻辑和设计与 <code>ArrayList</code> 相同</li></ul><h3 id="Ⅰ、Field-1"><a href="#Ⅰ、Field-1" class="headerlink" title="Ⅰ、Field"></a>Ⅰ、Field</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 存储数组</span><br><span class="hljs-keyword">protected</span> Object[] elementData;<br><span class="hljs-comment">// 真实元素的数量</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> elementCount;<br><span class="hljs-comment">// 扩容因子，详细作用见扩容函数</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> capacityIncrement;<br></code></pre></div></td></tr></table></figure><h3 id="Ⅱ、Constructor-1"><a href="#Ⅱ、Constructor-1" class="headerlink" title="Ⅱ、Constructor"></a>Ⅱ、Constructor</h3><h4 id="无参构造-1"><a href="#无参构造-1" class="headerlink" title="无参构造"></a>无参构造</h4><ul><li>无参构造默认的数组长度是 <strong>10</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="有参构造-1"><a href="#有参构造-1" class="headerlink" title="有参构造"></a>有参构造</h4><ul><li>自定义数组长度，默认的扩容因子是 <strong>0</strong>，即扩容是 <strong>2</strong> 倍扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>自定义数组长度 &amp; 扩容因子</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">int</span> capacityIncrement)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>();<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    <span class="hljs-keyword">this</span>.capacityIncrement = capacityIncrement;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>按照传入的集合初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vector</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    Object[] a = c.toArray();<br>    elementCount = a.length;<br>    <span class="hljs-keyword">if</span> (c.getClass() == ArrayList.class) &#123;<br>        elementData = a;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        elementData = Arrays.copyOf(a, elementCount, Object[].class);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Ⅲ、Method-1"><a href="#Ⅲ、Method-1" class="headerlink" title="Ⅲ、Method"></a>Ⅲ、Method</h3><ul><li>大部分方法都与 <code>ArrayList</code> 相同</li></ul><h4 id="扩容机制-1"><a href="#扩容机制-1" class="headerlink" title="扩容机制"></a>扩容机制</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    modCount++;<br>    ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>    elementData[elementCount++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>扩容前的检查</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>📌扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                     capacityIncrement : oldCapacity); <span class="hljs-comment">// 扩容机制</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>newCapacity</code> 是旧容量 加上一个值，三目运算符判断扩容因子是多少，如果是默认的 0 或者小于 0，则扩容两倍。</p><p>否则扩容 <code>1 + capacityIncrement</code> 倍</p><h2 id="四、LinkedList"><a href="#四、LinkedList" class="headerlink" title="四、LinkedList"></a>四、LinkedList</h2><ul><li>使用的数据结构是 <strong>双向链表</strong></li><li>继承了 <code>List</code> 和 <code>Deque</code>，所以可以当成列表集合 和 双端队列</li><li> 非线程安全；使之线程安全的办法是调用 <code>Collections</code> 工具类的 <code>synchronizedList(List&lt;T&gt; list)</code> 方法转化成线程安全的集合</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List list = Collections.synchronizedList(<span class="hljs-keyword">new</span> LinkedList(...));<br></code></pre></div></td></tr></table></figure><h3 id="Ⅰ、Field-2"><a href="#Ⅰ、Field-2" class="headerlink" title="Ⅰ、Field"></a>Ⅰ、Field</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 节点（元素）个数</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 指向第一个节点的指针。</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; first;<br><span class="hljs-comment">// 指向末尾节点</span><br><span class="hljs-keyword">transient</span> Node&lt;E&gt; last;<br></code></pre></div></td></tr></table></figure><p>根据双向链表储存特点</p><p>在运行中的不变量：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">(first == <span class="hljs-keyword">null</span> &amp;&amp; last == <span class="hljs-keyword">null</span>) || (first.prev == <span class="hljs-keyword">null</span> &amp;&amp; first.item != <span class="hljs-keyword">null</span>)<br>(first == <span class="hljs-keyword">null</span> &amp;&amp; last == <span class="hljs-keyword">null</span>) || (last.next == <span class="hljs-keyword">null</span> &amp;&amp; last.item != <span class="hljs-keyword">null</span>)<br></code></pre></div></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/1628515716530-screenshot.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-keyword">this</span>.item = element;<br>        <span class="hljs-keyword">this</span>.next = next;<br>        <span class="hljs-keyword">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>由此可看出底层数据结构是 <strong>双向链表</strong></li></ul><h3 id="Ⅱ、Constructor-2"><a href="#Ⅱ、Constructor-2" class="headerlink" title="Ⅱ、Constructor"></a>Ⅱ、Constructor</h3><h4 id="无参构造-2"><a href="#无参构造-2" class="headerlink" title="无参构造"></a>无参构造</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Constructs an empty list.</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="有参构造-2"><a href="#有参构造-2" class="headerlink" title="有参构造"></a>有参构造</h4><ul><li>将入参集合元素添加进新的 <code>LinkedList</code> 集合</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>();<br>    addAll(c);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Ⅲ、Method-2"><a href="#Ⅲ、Method-2" class="headerlink" title="Ⅲ、Method"></a>Ⅲ、Method</h3><h4 id="添加-add-E-e"><a href="#添加-add-E-e" class="headerlink" title="添加 add(E e)"></a>添加 add(E e)</h4><ul><li>添加元素，使用[尾插法](#尾插法添加元素 linkLast(E e))</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="添加-add-int-index-E-element"><a href="#添加-add-int-index-E-element" class="headerlink" title="添加 add(int index, E element)"></a>添加 add(int index, E element)</h4><ul><li>添加元素到指定下标位置<ul><li>检查下标合法性</li><li>判断插入位置是在末尾「[尾插](#尾插法添加元素 linkLast(E e))」还是在「[插入非空节点之前](#插入元素到非空节点之前 linkBefore(E e, Node<E> succ))」</li><li>「插入非空节点之前」用到 [node(int index)](#检索节点在链表的下标位置 node(int index)) 计算返回下标位置节点</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    checkPositionIndex(index);<br><br>    <span class="hljs-keyword">if</span> (index == size)<br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><br>        linkBefore(element, node(index));<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkPositionIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!isPositionIndex(index))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<br>&#125;<br><span class="hljs-comment">// 检查下标合法性 index ∈ [0, size]</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPositionIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= size;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="添加-addFirst-E-e"><a href="#添加-addFirst-E-e" class="headerlink" title="添加 addFirst(E e)"></a>添加 addFirst(E e)</h4><ul><li>[插入元素到链表头](#插入元素到链表头 linkFirst(E e))</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFirst</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkFirst(e);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="添加-addLast-E-e"><a href="#添加-addLast-E-e" class="headerlink" title="添加 addLast(E e)"></a>添加 addLast(E e)</h4><ul><li>[插入元素到链表尾](#尾插法添加元素 linkLast(E e))</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkLast(e);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除-remove-Object-o-1"><a href="#删除-remove-Object-o-1" class="headerlink" title="删除 remove(Object o)"></a>删除 remove(Object o)</h4><ul><li><p>删除指定元素的<strong>第一个</strong>匹配项</p><ul><li><strong>if</strong> 待删除元素为 <code>null</code><ul><li>从头查找第一个 <code>null</code>，从链表[断开节点](#删除节点 unlink(Node<E> x))</li></ul></li><li><strong>else</strong> 待删除元素不空<ul><li>从头查找第一个值符合的元素，从链表[断开节点](#删除节点 unlink(Node<E> x))</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-keyword">null</span>) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item)) &#123;<br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="尾插法添加元素-linkLast-E-e"><a href="#尾插法添加元素-linkLast-E-e" class="headerlink" title="尾插法添加元素 linkLast(E e)"></a>尾插法添加元素 linkLast(E e)</h4><ul><li><code>l</code> 指针指向链表尾部，用于标记<strong>原链表尾</strong></li><li>根据 <code>Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</code> 创建值为 <code>e</code>，前驱为 <code>l</code> 即 <code>last</code>，后继为 <code>null</code> 的节点，这么构造符合<strong>尾节点</strong>特点</li><li>链表尾指针移动到新链表尾</li><li><strong>if</strong> 原链表尾是 <code>null</code> <ul><li>说明「链表为空」，此时插入的为第一个节点，因此头指针也指向新节点</li></ul></li><li><strong>else</strong> 原链表不为 <code>null</code><ul><li>说明「链表不空」，尾插到链表上</li></ul></li><li><code>size</code> &amp; <code>modCount</code> 自增</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="插入元素到非空节点之前-linkBefore-E-e-Node-succ"><a href="#插入元素到非空节点之前-linkBefore-E-e-Node-succ" class="headerlink" title="插入元素到非空节点之前 linkBefore(E e, Node succ)"></a>插入元素到非空节点之前 linkBefore(E e, Node<E> succ)</h4><ul><li>断言 <code>index</code>节点非空</li><li>获得 <code>index</code> 节点前驱 <code>pred</code> </li><li>创建节点，值为 <code>e</code>，前驱为 <code>pred</code>，后继为 <code>succ</code></li><li>后继连接上新节点</li><li><strong>if</strong> 前驱为空<ul><li>说明「插入位置在链表头」，头指针指向新节点</li></ul></li><li><strong>else</strong> 后继为空<ul><li>说明「插入位置在中间」，前驱指向新节点</li></ul></li><li><code>size</code> &amp; <code>modCount</code> 自增</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkBefore</span><span class="hljs-params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;<br>    <span class="hljs-comment">// assert succ != null;</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; pred = succ.prev;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(pred, e, succ);<br>    succ.prev = newNode;<br>    <span class="hljs-keyword">if</span> (pred == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        pred.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="插入元素到链表头-linkFirst-E-e"><a href="#插入元素到链表头-linkFirst-E-e" class="headerlink" title="插入元素到链表头 linkFirst(E e)"></a>插入元素到链表头 linkFirst(E e)</h4><ul><li>获得头节点</li><li>创建节点，值为 <code>e</code>，前驱为 <code>null</code>，后继为 <code>f</code>，即旧头结点</li><li>头指针移到新节点</li><li><strong>if</strong> 旧头节点为空<ul><li>说明「链表为空」，尾指针指向新节点</li></ul></li><li><strong>else</strong> 旧头节点不空<ul><li>说明「链表不空」，连接 新节点&amp;旧头结点</li></ul></li><li><code>size</code> &amp; <code>modCount</code> 自增</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">linkFirst</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(<span class="hljs-keyword">null</span>, e, f);<br>    first = newNode;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-keyword">null</span>)<br>        last = newNode;<br>    <span class="hljs-keyword">else</span><br>        f.prev = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除节点-unlink-Node-x"><a href="#删除节点-unlink-Node-x" class="headerlink" title="删除节点 unlink(Node x)"></a>删除节点 unlink(Node<E> x)</h4><ul><li>断言 节点不空</li><li>获取 该节点 <code>element</code>、前驱 <code>prev</code> 和后继 <code>next</code></li><li><strong>if</strong> 前驱为空<ul><li>说明「该节点为头节点」，头指针直接指向后继</li></ul></li><li><strong>else</strong> 前驱不空<ul><li>说明「该节点非头节点」，前驱指向后继，再断「x 指向前驱」</li></ul></li><li>双向链表，后面的方向道理同上</li><li><code>size</code> 自减， <code>modCount</code> 自增，元素置空，返回删除的节点</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> </span>&#123;<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> E element = x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<br><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>) &#123;<br>        first = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        prev.next = next;<br>        x.prev = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>) &#123;<br>        last = prev;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next.prev = prev;<br>        x.next = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    x.item = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="检索节点在链表的下标位置-node-int-index"><a href="#检索节点在链表的下标位置-node-int-index" class="headerlink" title="检索节点在链表的下标位置 node(int index)"></a>检索节点在链表的下标位置 node(int index)</h4><ul><li>断言 <code>index∈[0, size)</code></li><li><strong>if</strong> 下标在左半边<ul><li>从头向中间检索</li></ul></li><li><strong>else</strong> 下标在右半边<ul><li>从后向中间检索</li></ul></li></ul><p>📌二分思想，利用好双向链表，同时头尾节点都是固定的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Node&lt;E&gt; <span class="hljs-title">node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-comment">// assert isElementIndex(index);</span><br>    <span class="hljs-keyword">if</span> (index &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>        Node&lt;E&gt; x = first;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)<br>            x = x.next;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;E&gt; x = last;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size - <span class="hljs-number">1</span>; i &gt; index; i--)<br>            x = x.prev;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取元素四种方法的区别"><a href="#获取元素四种方法的区别" class="headerlink" title="获取元素四种方法的区别"></a>获取元素四种方法的区别</h4><p><code>getFirst()</code> &amp; <code>getLast()</code> &amp; <code>peekFirst()</code> &amp; <code>peekLast()</code> </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peekFirst</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-keyword">null</span>) ? <span class="hljs-keyword">null</span> : f.item;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    <span class="hljs-keyword">return</span> f.item;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>很明显，<code>peek</code> 类型的方法在空链表时会返回 <code>null</code>，<code>get</code> 类型则<strong>抛出异常</strong> <code>NoSuchElementException</code> </li></ul><h4 id="LinkedList-作双端队列和栈的细节"><a href="#LinkedList-作双端队列和栈的细节" class="headerlink" title="LinkedList 作双端队列和栈的细节"></a>LinkedList 作双端队列和栈的细节</h4><p>因为 <code>LinkedList </code> 同时也实现了 <code>Deque</code> 接口，所以可以作为<strong>双端队列</strong>，自然也可以当做<strong>栈</strong>「一开一闭」。</p><ul><li>栈</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> ArrayDeque&lt;Integer&gt;();<br>        stack.push(<span class="hljs-number">1</span>);<br>        stack.push(<span class="hljs-number">2</span>);<br>        stack.push(<span class="hljs-number">3</span>);<br>        System.out.println(stack);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>[3, 2, 1]</p></blockquote><ul><li>队列</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> ArrayDeque&lt;Integer&gt;();<br>        queue.offer(<span class="hljs-number">1</span>);<br>        queue.offer(<span class="hljs-number">2</span>);<br>        queue.offer(<span class="hljs-number">3</span>);<br>        System.out.println(queue);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>[1, 2, 3]</p></blockquote><p>既然可以同时作队列和栈，引发思考，同为 <code>peek()</code> 获得「栈顶」| 「队头」元素，那么猜测<strong>队列首部</strong>和<strong>栈顶开口</strong>是<strong>同个方向</strong>的。</p><ul><li>查看 <code>Deque</code> 的 <code>peek()</code> 官方注释</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Retrieves, but does not remove, the head of the queue represented by</span><br><span class="hljs-comment"> * this deque (in other words, the first element of this deque), or</span><br><span class="hljs-comment"> * returns &#123;<span class="hljs-doctag">@code</span> null&#125; if this deque is empty.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="hljs-doctag">@link</span> #peekFirst()&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the head of the queue represented by this deque, or</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> null&#125; if this deque is empty</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">E <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure><p><code>peek()</code> 返回 deque 队列头， 如果双端队列为空，则返回 <code>null</code></p><ul><li>查看 <code>LinkedList</code> 实现的 <code>peek()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">return</span> (f == <span class="hljs-keyword">null</span>) ? <span class="hljs-keyword">null</span> : f.item;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>获取左侧链表首部</p><ul><li>查看 <code>ArrayDeque</code> 实现的 <code>peek()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> peekFirst();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>获取队列首部</p><p>📌结论：官方定义的左边（First）是<code>栈首</code>，<code>队列头</code>。由此才能实现一个方法达到相同的<strong>peek</strong> 效果。</p><h2 id="🔗Reference："><a href="#🔗Reference：" class="headerlink" title="🔗Reference："></a>🔗<strong>Reference：</strong></h2><blockquote></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stackoverflow.com/questions/35756277/why-the-maximum-array-size-of-arraylist-is-integer-max-value-8">Why the maximum array size of ArrayList is Integer.MAX_VALUE - 8?</a><blockquote></blockquote><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://developer.ibm.com/articles/j-codetoheap/#:~:text=those%20128%20bits.-,Anatomy%20of%20a%20Java%20array%20object,-The%20shape%20and">Anatomy of a Java array object</a><blockquote></blockquote><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://developer.ibm.com/articles/j-codetoheap/#:~:text=the%20native%20heap.-,Anatomy%20of%20a%20Java%20object,-When%20your%20Java">Anatomy of a Java object</a><blockquote></blockquote><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://stackoverflow.com/questions/33147339/difference-between-if-a-b-0-and-if-a-b">[Difference between if (a - b &lt; 0) and if (a &lt; b)]</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM「HotSpot VM」</title>
    <link href="/2021/06/02/JVM/JVM%E3%80%8CHotSpot%20VM%E3%80%8D/"/>
    <url>/2021/06/02/JVM/JVM%E3%80%8CHotSpot%20VM%E3%80%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="📌-JVM「HotSpot-VM」"><a href="#📌-JVM「HotSpot-VM」" class="headerlink" title="📌 JVM「HotSpot VM」"></a>📌 JVM「HotSpot VM」</h3><ul><li><p>📂 Code Repository: <a href="https://github.com/hypocrite30/JVM-demonstrate">https://github.com/hypocrite30/JVM-demonstrate</a></p><ul><li>In directory 「<code>src</code>」</li></ul></li><li><p>📚 Reference :  </p><ul><li>「<a href="https://book.douban.com/subject/34907497/">深入理解Java虚拟机（第3版）</a>」<ul><li>In directory 「<code>doc</code>」</li></ul></li><li>「<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">尚硅谷JVM教程</a>」</li></ul></li><li><p>🍬Thanks：</p><ul><li><a href="https://gitee.com/vectorx/NOTE_JVM">https://gitee.com/vectorx/NOTE_JVM</a><ul><li>In directory 「<code>doc</code>」</li></ul></li><li><a href="https://github.com/TangBean/understanding-the-jvm">https://github.com/TangBean/understanding-the-jvm</a><ul><li>In directory 「<code>doc</code>」</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java常见细节</title>
    <link href="/2021/05/15/JavaSE/Java%E5%B8%B8%E8%A7%81%E7%BB%86%E8%8A%82/"/>
    <url>/2021/05/15/JavaSE/Java%E5%B8%B8%E8%A7%81%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常见细节"><a href="#Java常见细节" class="headerlink" title="Java常见细节"></a>Java常见细节</h1><h2 id="1-「replace会替换所有字符？」"><a href="#1-「replace会替换所有字符？」" class="headerlink" title="1. 「replace会替换所有字符？」"></a>1. 「replace会替换所有字符？」</h2><p>如果将字符串中 <code>A</code> 替换为 <code>B</code> ，则使用 <code>replaceAll</code> 方法。</p><p><code>replace</code> 会替换所有匹配字符吗？</p><blockquote><p>Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing “aa” with “b” in the string “aaa” will result in “ba” rather than “ab”.</p></blockquote><ul><li>替换从字符串的开头一直进行到结尾，匹配成功就替换，然后接下去。</li><li>例如：原字符串：<code>aaa</code> ，将 <code>aa</code> 替换为 <code>b</code> ，则结果是 <code>ba</code> 而不是 <code>ab</code> ，因为是从前往后。</li></ul><ol><li><code>replace</code>  两个重载方法</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">char</span> oldChar, <span class="hljs-keyword">char</span> newChar)</span> <span class="hljs-comment">/* 替换一个字符 */</span></span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span><span class="hljs-params">(CharSequence target, CharSequence replacement)</span> <span class="hljs-comment">/* 替换一个串 */</span></span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>replaceAll</code> </li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceAll</span><span class="hljs-params">(String regex, String replacement)</span> <span class="hljs-comment">/* 前面正则表达式，匹配成功替换为后面字符串 */</span></span><br></code></pre></div></td></tr></table></figure><p>举例🌰：原串 s 里的 <code>*</code> 替换为 <code>A</code> 两种写法：</p><ul><li><code>s.replaceAll(&quot;\\*&quot;, &quot;A&quot;)</code> 只能接正则表达式匹配出来替换。</li><li><code>s.replace(&quot;*&quot;, &quot;A&quot;)</code> </li></ul><ol start="3"><li><code>replaceFirst</code> 只替换第一个匹配字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceFirst</span><span class="hljs-params">(String regex, String replacement)</span></span><br></code></pre></div></td></tr></table></figure><h2 id="2-「Integer不能用-判断？」"><a href="#2-「Integer不能用-判断？」" class="headerlink" title="2. 「Integer不能用 == 判断？」"></a>2. 「Integer不能用 == 判断？」</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer orderStatus1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>Integer orderStatus2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>System.out.println(orderStatus1 == orderStatus2);<br></code></pre></div></td></tr></table></figure><ul><li>结果会返回 <code>false</code> </li><li>不是说 Integer 有缓存吗，范围是 -128 ~ 127</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Integer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.value = value;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>有参构造并<strong>没有</strong>用到缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>要用到缓存，就应该使用 <code>valueOf</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String orderStatus1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;1&quot;</span>);<br>String orderStatus2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;1&quot;</span>);<br>System.out.println(Integer.valueOf(orderStatus1) == Integer.valueOf(orderStatus2));<br></code></pre></div></td></tr></table></figure><ul><li>这样就会返回 true</li><li>只有这种特殊情况才会使判断结果相同，养成好喜欢，统一使用 <code>equals</code> 来判断相等。</li></ul><h2 id="3-「使用BigDecimal不丢失精度？」"><a href="#3-「使用BigDecimal不丢失精度？」" class="headerlink" title="3. 「使用BigDecimal不丢失精度？」"></a>3. 「使用BigDecimal不丢失精度？」</h2><p>涉及金融业务，不可避免接触到小数。</p><p>使用Double时出现的场景：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> amount1 = <span class="hljs-number">0.02</span>;<br><span class="hljs-keyword">double</span> amount2 = <span class="hljs-number">0.03</span>;<br>System.out.println(amount2 - amount1); <span class="hljs-comment">// 0.009999999999999998</span><br></code></pre></div></td></tr></table></figure><p>结果小于预计结果。</p><ul><li>Double类型两个参数相减会转换为二进制，而Double有效位是16位，出现存储小数位不够。</li><li>使用 <code>BigDecimal</code> 就可以避免丢失精度吗？还是要看你怎么用。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BigDecimal amount1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">0.02</span>);<br>BigDecimal amount2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">0.03</span>);<br>System.out.println(amount2.subtract(amount1));<br></code></pre></div></td></tr></table></figure><blockquote><p>0.0099999999999999984734433411404097569175064563751220703125</p></blockquote><p>可以看到仍然丢失精度。</p><p>看 <code>BigDecimal</code> 带 double 参数的构造方法上的注释</p><blockquote><p>Notes:</p><ol><li><p>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</p></li><li><p>The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(“0.1”) creates a BigDecimal which is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the String constructor be used in preference to this one.</p></li><li><p>When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor. To get that result, use the static valueOf(double) method.</p></li></ol></blockquote><ul><li><p><code>public BigDecimal(double val)</code> 这种构造方法生成的结果不可预测(unpredictable)</p></li><li><p>注释举例的 0.1 无法准确替换为double，即无法替换为任何有限长度的二进制分数</p></li><li><p>官方推荐入参选用 <code>String</code> 字符串，这样传入多少，生成多少。</p></li><li><p>如果非得用 <code>double</code> 入参，则先 <code>Double.toString(double)</code> 转成String再构造。</p></li><li><p>或者使用 <code>public static BigDecimal valueOf(double val)</code> 静态方法生成，也是阿里巴巴开发手册推荐的构造形式。</p></li></ul><h2 id="4-「字符串拼接不能用String？」"><a href="#4-「字符串拼接不能用String？」" class="headerlink" title="4.  「字符串拼接不能用String？」"></a>4.  「字符串拼接不能用String？」</h2><p><code>String</code>类型的字符串被称为不可变序列，在大量字符串拼接的场景中，如果对象定义为 String ，会产生很多无用的中间对象，浪费内存空间，效率低。</p><p>推荐使用更高效的可变字符序列：<code>StringBuilder</code> 和 <code>StringBuffer</code> </p><p><code>StringBuilder</code> 虽然线程不安全，但是多线程拼接字符串情况很少，所以就使用这个对象。<code>append</code> 方法追加字符串即可。</p><p><strong>「字符串拼接时使用String类型的对象，效率一定比StringBuilder类型的对象低？」</strong></p><p>否。</p><p>通过 <code>javap -c</code> 反编译可知，总JDK5开始，java对String拼接字符串进行优化，编译成字节码都会变成StringBuilder的append操作。</p><h2 id="5-「Map初始化注意事项」"><a href="#5-「Map初始化注意事项」" class="headerlink" title="5. 「Map初始化注意事项」"></a>5. 「Map初始化注意事项」</h2><ul><li>Map初始化同时导入数据有以下三种常见方法</li></ul><ol><li>static块初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; myMap;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        myMap = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>        myMap.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        myMap.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Guava类库</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个HashMap</span><br>Map&lt;String, Object&gt; hashMap  = Maps.newHashMap();<br><span class="hljs-comment">// 创建不可变Map</span><br>Map&lt;String, Integer&gt; left = ImmutableMap.of(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 或者</span><br>Map&lt;String, String&gt; test = ImmutableMap.&lt;String, String&gt;builder()<br>.put(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>)<br>.put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>)<br>.build();<br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用匿名内部类</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>        put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>📌外层的括号是创建 <strong>匿名内部类</strong> 「Anonymous Inner Class」 ，<strong>这里会造成隐患</strong>。</li><li>内层是括号是创建 <strong>实例初始化块</strong> </li></ul><h3 id="①验证匿名内部类"><a href="#①验证匿名内部类" class="headerlink" title="①验证匿名内部类"></a>①验证匿名内部类</h3><ul><li>首先 <code>javac</code> 编译 .java 文件</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>        put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/image-20210515165844089.png" style="zoom:150%;" /><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/image-20210515170722679.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>$1 <span class="hljs-keyword">extends</span> <span class="hljs-title">HashMap</span> </span>&#123;<br>    Solution$<span class="hljs-number">1</span>(Solution var1) &#123;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">this</span>$<span class="hljs-number">0</span> = var1;<br>        <span class="hljs-keyword">this</span>.put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-keyword">this</span>.put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        <span class="hljs-keyword">this</span>.put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>说明的确是创建了一个<strong>匿名内部类</strong></li></ul><h3 id="②非静态内部类持有外部类引用"><a href="#②非静态内部类持有外部类引用" class="headerlink" title="②非静态内部类持有外部类引用"></a>②非静态内部类持有外部类引用</h3><ul><li>Java 中<strong>非静态内部类</strong>会<strong>持有外部类的引用</strong>，从而导致 GC 无法回收这部分代码的引用，以至于造成<strong>内存溢出</strong>。</li></ul><ol><li>🍬为什么要<strong>持有外部类</strong>？</li></ol><p>非静态匿名内部类的主要作用有两个。</p><ul><li><p>当匿名内部类只在外部类（主类）中使用时，匿名内部类可以让外部不知道它的存在，从而减少了代码的维护工作。</p></li><li><p>当匿名内部类持有外部类时，它就可以直接<strong>使用外部类中的变量</strong>了，这样可以很方便的完成调用：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String userName = <span class="hljs-string">&quot;hypocrite30&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>            put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>            put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>            put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>            put(userName, userName);<br>        &#125;&#125;;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>内部类 <code>HashMap</code>  可以直接调用外部类 <code>Solution</code> 中的成员变量 <code>userName</code>.</li></ul><ol start="2"><li>🍬它是怎么持有外部类的？</li></ol><ul><li><code>javap -c &#39;.\Solution$1.class&#39;</code> 反编译内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>$1 <span class="hljs-keyword">extends</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">HashMap</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> Solution <span class="hljs-keyword">this</span>$<span class="hljs-number">0</span>;<br><br>  Solution$<span class="hljs-number">1</span>(Solution);<br>    Code:<br>       <span class="hljs-number">0</span>: aload_0<br>       <span class="hljs-number">1</span>: aload_1<br>       2: putfield      #1                  // Field this$0:LSolution;<br>       <span class="hljs-number">5</span>: aload_0<br>       6: invokespecial #2                  // Method java/util/HashMap.&quot;&lt;init&gt;&quot;:()V<br>       <span class="hljs-number">9</span>: aload_0<br>      10: ldc           #3                  // String map1<br>      12: ldc           #4                  // String value1<br>      14: invokevirtual #5                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">17</span>: pop<br>      <span class="hljs-number">18</span>: aload_0<br>      19: ldc           #6                  // String map2<br>      21: ldc           #7                  // String value2<br>      23: invokevirtual #5                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">26</span>: pop<br>      <span class="hljs-number">27</span>: aload_0<br>      28: ldc           #8                  // String map3<br>      30: ldc           #9                  // String value3<br>      32: invokevirtual #5                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">35</span>: pop<br>      <span class="hljs-number">36</span>: <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>Code2:<code>putfield</code> ：一对 <code>Solution</code> 的引用被存入 <code>this$0</code> 中，此时该匿名内部类持有外部类的引用</p></li><li><p>另一种直观测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> Solution().createMap();<br>        Field field = map.getClass().getDeclaredField(<span class="hljs-string">&quot;this$0&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        System.out.println(field.get(map).getClass());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">createMap</span><span class="hljs-params">()</span> </span>&#123;<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;() &#123;&#123;<br>            put(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>            put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        &#125;&#125;;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/JavaCommons/image-20210515200626985.png"></p><blockquote><p> 执行结果：Solution</p></blockquote><p>结论：匿名内部类持有外部类的引用，所以使用 <code>$0</code> 可以正常获取外部类，输入相关信息。</p><h3 id="③匿名内部类隐患"><a href="#③匿名内部类隐患" class="headerlink" title="③匿名内部类隐患"></a>③匿名内部类隐患</h3><ul><li>正常代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createMap</span><span class="hljs-params">()</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>        put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;&#125;;<br>    <span class="hljs-comment">// 业务逻辑</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>转换成这样就<strong>有可能</strong>造成<strong>内存泄漏</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">createMap</span><span class="hljs-params">()</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>        put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;&#125;;<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为当此 <code>map</code> 被<strong>赋值为其他类属性</strong>时，可能会导致 GC 收集时不清理此对象，这时候才会导致<strong>内存泄漏</strong>。</p><p>非静态匿名内部类持有外部类引用，因此串行化这个集合时外部类也会被串行化，当外部类没有实现<code>serialize</code>接口时，就会报错。</p><ul><li>把 <code>map</code> 对象声明为 <code>static</code> 静态类型就不会泄漏内存</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title">createMap</span><span class="hljs-params">()</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>        put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        put(<span class="hljs-string">&quot;map3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;&#125;;<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>反编译查看</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>$1 <span class="hljs-keyword">extends</span> <span class="hljs-title">java</span>.<span class="hljs-title">util</span>.<span class="hljs-title">HashMap</span> </span>&#123;<br>  Solution$<span class="hljs-number">1</span>();<br>    Code:<br>       <span class="hljs-number">0</span>: aload_0<br>       1: invokespecial #1                  // Method java/util/HashMap.&quot;&lt;init&gt;&quot;:()V<br>       <span class="hljs-number">4</span>: aload_0<br>       5: ldc           #2                  // String map1<br>       7: ldc           #3                  // String value1<br>       9: invokevirtual #4                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">12</span>: pop<br>      <span class="hljs-number">13</span>: aload_0<br>      14: ldc           #5                  // String map2<br>      16: ldc           #6                  // String value2<br>      18: invokevirtual #4                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">21</span>: pop<br>      <span class="hljs-number">22</span>: aload_0<br>      23: ldc           #7                  // String map3<br>      25: ldc           #8                  // String value3<br>      27: invokevirtual #4                  // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br>      <span class="hljs-number">30</span>: pop<br>      <span class="hljs-number">31</span>: <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>没有 <code>putfield</code> 关键字，<strong>静态匿名类不会持有外部对象引用</strong> </li><li>因为匿名内部类是静态的之后，它所引用的对象或属性也必须是静态的了，因此就可以直接从 JVM 的 Method Area（方法区）获取到引用而无需持久外部对象了</li><li>尽管如此还是不建议使用双括号方式初始map</li></ul><h3 id="④替代方案"><a href="#④替代方案" class="headerlink" title="④替代方案"></a>④替代方案</h3><ol><li>Stream</li></ol><ul><li>Java8 的 Stream API</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List list = <span class="hljs-keyword">new</span> ArrayList() &#123;&#123;<br>    add(<span class="hljs-string">&quot;Java&quot;</span>);<br>    add(<span class="hljs-string">&quot;Redis&quot;</span>);<br>&#125;&#125;;<br><span class="hljs-comment">// 替换为↓</span><br>List list = Stream.of(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;Redis&quot;</span>).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Java9集合工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map map = <span class="hljs-keyword">new</span> HashMap() &#123;&#123;<br>    put(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    put(<span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>&#125;&#125;;<br><span class="hljs-comment">// 替换为↓</span><br>Map map = Map.of(<span class="hljs-string">&quot;map1&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;map2&quot;</span>, <span class="hljs-string">&quot;Redis&quot;</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>鸣谢：<a href="https://www.cnblogs.com/vipstone/p/12937582.html">https://www.cnblogs.com/vipstone/p/12937582.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/04/22/Redis/Redis/"/>
    <url>/2021/04/22/Redis/Redis/</url>
    
    <content type="html"><![CDATA[<h3 id="📌-Redis"><a href="#📌-Redis" class="headerlink" title="📌 Redis"></a>📌 Redis</h3><ul><li><p>📕 Note Book: <a href="https://www.yuque.com/hypocrite30/oz1eni">https://www.yuque.com/hypocrite30/oz1eni</a></p></li><li><p>📂 Code Repository: <a href="https://github.com/hypocrite30/Redis">https://github.com/hypocrite30/Redis</a></p><ul><li>In directory 「<code>src</code>」</li></ul></li><li><p>📚 Reference books:  「<strong>Redis开发与运维</strong>」「<strong>Redis设计与实现</strong>」「<strong>Redis深度历险</strong>」</p><ul><li>In directory 「<code>doc</code>」</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DesignPatterns</title>
    <link href="/2021/04/15/DesignPatterns/DesignPatterns/"/>
    <url>/2021/04/15/DesignPatterns/DesignPatterns/</url>
    
    <content type="html"><![CDATA[<h3 id="📌-Design-Pattern-By-Java"><a href="#📌-Design-Pattern-By-Java" class="headerlink" title="📌 Design Pattern By Java"></a>📌 Design Pattern By Java</h3><ul><li><p>📕 Note Book: <a href="https://www.yuque.com/hypocrite30/vf5tcx">https://www.yuque.com/hypocrite30/vf5tcx</a></p></li><li><p>📂 Code Repository: <a href="https://github.com/hypocrite30/DesignPatterns">https://github.com/hypocrite30/DesignPatterns</a></p><ul><li>In directory 「<code>src</code>」</li></ul></li><li><p>📚 Reference books:  「<code>设计模式之禅</code> 第二版 」「重学Java设计模式 」</p><ul><li>In directory 「<code>doc</code>」</li></ul></li></ul><p>🧰「创建者模式」5种</p><ul><li><input checked="" disabled="" type="checkbox"> 1 『工厂方法模式』</li><li><input checked="" disabled="" type="checkbox"> 2 『抽象工厂模式』</li><li><input checked="" disabled="" type="checkbox"> 3 『建造者模式』</li><li><input checked="" disabled="" type="checkbox"> 4『原型模式』</li><li><input checked="" disabled="" type="checkbox"> 5 『单例模式』</li></ul><p>🏹「结构型模式」7种</p><ul><li><input checked="" disabled="" type="checkbox"> 6 『适配器模式』</li><li><input checked="" disabled="" type="checkbox"> 7 『桥梁模式』</li><li><input disabled="" type="checkbox"> 8 『组合模式』</li><li><input disabled="" type="checkbox"> 9 『装饰模式』</li><li><input disabled="" type="checkbox"> 10 『外观模式』</li><li><input disabled="" type="checkbox"> 11 『享元模式』</li><li><input disabled="" type="checkbox"> 12 『代理模式』</li></ul><p>🧲「行为模式」10种</p><ul><li><p><input disabled="" type="checkbox">  13 『责任链模式』</p></li><li><p><input disabled="" type="checkbox">  14 『命令模式』</p></li><li><p><input disabled="" type="checkbox">  15 『迭代器模式』</p></li><li><p><input disabled="" type="checkbox">  16 『中介者模式』</p></li><li><p><input disabled="" type="checkbox">  17 『备忘录模式』</p></li><li><p><input disabled="" type="checkbox">  18 『观察者模式』</p></li><li><p><input disabled="" type="checkbox">  19 『状态模式』</p></li><li><p><input disabled="" type="checkbox">  20 『策略模式』</p></li><li><p><input disabled="" type="checkbox">  21 『模板方法模式』</p></li><li><p><input disabled="" type="checkbox">  22 『访问者模式』</p></li><li><p><input disabled="" type="checkbox">  23 『解释器模式』</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>DesignPatterns</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security 5.1.4</title>
    <link href="/2021/04/14/Security/Spring%20Security/"/>
    <url>/2021/04/14/Security/Spring%20Security/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><hr><blockquote><p>基于 Spring Security 5.1.4.RELEASE</p></blockquote><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-认证"><a href="#1-1-认证" class="headerlink" title="1.1 认证"></a>1.1 认证</h3><ul><li>判断一个用户的身份<strong>是否合法</strong>的过程，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维码登录，手机短信登录，指纹认证等方式。</li></ul><h3 id="1-2-会话"><a href="#1-2-会话" class="headerlink" title="1.2 会话"></a>1.2 会话</h3><p>认证通过后，为了避免用户的每次操作都进行认证可将用户的信息保证在会话中。会话就是系统为了<strong>保持当前</strong><br><strong>用户的登录状态</strong>所提供的机制。</p><ul><li><code>session</code>方式</li></ul><p>认证成功后，服务器生成用户相关数据保存在session(当前会话)中，发给客户端 <code>session_id</code>，客户机存在 <code>cookie</code> 中，下次客户端请求会带上 session_id ，服务器可以验证 session 数据，检验合法性，当用户退出系统或 session 过期，session_id 就无效。</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210408205018967.png"></p><ul><li><code>token</code>方式</li></ul><p>用户认证成功后，服务端生成一个<code>token</code>发给客户端，客户端可以放到 cookie 或 localStorage<br>等存储中，每次请求时带上 token，服务端收到token通过验证后即可确认用户身份。</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210408205204737.png"></p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ul><li><p>基于session的认证方式由Servlet规范定制，服务端要存储session信息需要<strong>占用内存资源</strong>，客户端<strong>需要支持</strong><br><strong>cookie</strong>；</p></li><li><p>基于token的方式则一般不需要服务端存储token，并且不限制客户端的存储方式。如今移动互联网时代<br>更多类型的客户端需要接入系统，系统多是采用<strong>前后端分离</strong>的架构进行实现，所以基于token的方式更适合。</p></li></ul><h3 id="1-3-授权"><a href="#1-3-授权" class="headerlink" title="1.3 授权"></a>1.3 授权</h3><p>用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</p><h4 id="区别于认证"><a href="#区别于认证" class="headerlink" title="区别于认证"></a>区别于认证</h4><ul><li><p>认证是为了保证<strong>用户身份的合法性</strong></p></li><li><p>授权则是为了更细粒度的对<strong>隐私数据</strong>进行划分，授权是在<strong>认证通过后</strong>发生的，控制不同的用户能够访问不同的资源。</p></li></ul><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>授权可简单理解为：<strong>主体</strong> 对 <strong>资源</strong> 进行 怎样的<strong>操作</strong>「权限/许可」，权限是需要与资源进行关联的，否则权限没有意义。</p><p>三者的关系图：</p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409161516911.png" style="zoom:125%;" /><ul><li>不同的权限可以管理不同的资源，用户需要有对应权限才能访问资源。</li><li>引入一个 「角色」概念，用户归类于<strong>角色</strong>，角色拥有相应<strong>权限</strong>，最后根据权限访问<strong>资源</strong></li></ul><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409161944605.png" style="zoom:125%;" /><ul><li>用户【用户id，账号，密码，…】</li><li>角色【角色id，角色名称，…】</li><li>权限【权限id，权限标识，权限名称，资源id，…】</li><li>资源【资源id，资源名称，访问地址，…】<ul><li>用户 - 角色 【用户id，角色id，…】</li><li>角色 - 权限 【角色id，权限id，….】</li></ul></li></ul><hr><p>企业开发将 资源和权限合为一张权限表：</p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409162541875.png" style="zoom:130%;" /><ul><li>资源【资源id、资源名称、访问地址、…】</li><li>权限【权限id、权限标识、权限名称、资源id、…】<ul><li><strong>合并</strong>为：权限【权限id、权限标识、权限名称、资源名称、资源访问地址、…】</li></ul></li></ul><h3 id="1-4-RBAC"><a href="#1-4-RBAC" class="headerlink" title="1.4 RBAC"></a>1.4 RBAC</h3><h4 id="1-4-1-基于角色的访问控制"><a href="#1-4-1-基于角色的访问控制" class="headerlink" title="1.4.1 基于角色的访问控制"></a>1.4.1 基于角色的访问控制</h4><p><code>Role-Based Access Control</code> 按照角色进行授权。</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409163724890.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(主体.hasRole(<span class="hljs-string">&quot;总经理角色id&quot;</span>)) &#123;<br>    查询工资<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>如果上图所需角色添加为老板和总经理，此时就要改代码</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(主体.hasRole(<span class="hljs-string">&quot;总经理角色id&quot;</span>) ||  主体.hasRole(<span class="hljs-string">&quot;老板角色id&quot;</span>)) &#123;<br>    查询工资<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-4-2-基于资源的访问控制"><a href="#1-4-2-基于资源的访问控制" class="headerlink" title="1.4.2 基于资源的访问控制"></a>1.4.2 基于资源的访问控制</h4><p><code>Resource-Based Access Control</code> 按照资源（权限）进行授权。</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409164139236.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(主体.hasPermission(<span class="hljs-string">&quot;查询工资权限标识&quot;</span>)) &#123;<br>    查询工资<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>代码统一，增加<strong>可拓展性</strong>。</li></ul><h2 id="2-基于Session的认证方式「手动实现security」"><a href="#2-基于Session的认证方式「手动实现security」" class="headerlink" title="2. 基于Session的认证方式「手动实现security」"></a>2. 基于Session的认证方式「手动实现security」</h2><h3 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h3><blockquote><p>基于 SpringMVC 5.1.5.RELEASE, Servlet3.0实现</p></blockquote><h4 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xxx.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>security-springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 不添加该依赖tomcat7:run无法运行项目 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>security-springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">uriEncoding</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">uriEncoding</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>Web项目，packaging打包方式为 war</li><li>使用<code>tomcat7-maven-plugin</code>插件来运行工程</li></ul><h4 id="2-1-2-Spring容器配置"><a href="#2-1-2-Spring容器配置" class="headerlink" title="2.1.2 Spring容器配置"></a>2.1.2 Spring容器配置</h4><ul><li>config包下定义<code>ApplicationConfig</code>，它对应web.xml中<code>ContextLoaderListener</code>的配置「Servlet3.0不用xml配置」</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//相当于applicationContext.xml</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.xxx.security.springmvc&quot;</span><br><span class="hljs-meta">            ,excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,value = Controller.class)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationConfig</span> </span>&#123;<br>    <span class="hljs-comment">//在此配置除了Controller的其它bean，比如：数据库链接池、事务管理器、业务bean等。</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-1-3-servletContext配置"><a href="#2-1-3-servletContext配置" class="headerlink" title="2.1.3 servletContext配置"></a>2.1.3 servletContext配置</h4><ul><li>config包下定义 <code>WebConfig</code> ，对应<code>DispatcherServlet</code>配置。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//就相当于springmvc.xml文件</span><br><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">// 接管 MVC</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.xxx.security.springmvc&quot;</span><br><span class="hljs-meta">        ,includeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,value = Controller.class)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-comment">//视图解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> InternalResourceViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">()</span> </span>&#123;<br>        InternalResourceViewResolver viewResolver = <span class="hljs-keyword">new</span> InternalResourceViewResolver();<br>        viewResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>);<br>        viewResolver.setSuffix(<span class="hljs-string">&quot;.jsp&quot;</span>); <span class="hljs-comment">// 用jsp来演示代码</span><br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-1-4-加载-Spring容器"><a href="#2-1-4-加载-Spring容器" class="headerlink" title="2.1.4 加载 Spring容器"></a>2.1.4 加载 Spring容器</h4><ul><li>在init包下定义Spring容器初始化类<code>SpringApplicationInitializer</code>，此类实现WebApplicationInitializer接口，Spring容器启动时加载WebApplicationInitializer接口的所有实现类。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringApplicationInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;<br>    <span class="hljs-comment">//spring容器，相当于加载 applicationContext.xml</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class[]&#123;ApplicationConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//servletContext，相当于加载springmvc.xml</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//url-mapping</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409165409689.png"></p><p>SpringApplicationInitializer相当于web.xml，ApplicationConfig.java对应以下配置的application-context.xml，WebConfig.java对应以下配置的<strong>spring-mvc.xml</strong>，<strong>web.xml</strong>的内容参考：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;web‐app&gt;<br>    &lt;listener&gt;<br>        &lt;listener‐<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">context</span>.<span class="hljs-title">ContextLoaderListener</span>&lt;/<span class="hljs-title">listener</span>‐<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">listener</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">context</span>‐<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">param</span>‐<span class="hljs-title">name</span>&gt;<span class="hljs-title">contextConfigLocation</span>&lt;/<span class="hljs-title">param</span>‐<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">param</span>‐<span class="hljs-title">value</span>&gt;/<span class="hljs-title">WEB</span>‐<span class="hljs-title">INF</span>/<span class="hljs-title">application</span>‐<span class="hljs-title">context</span>.<span class="hljs-title">xml</span>&lt;/<span class="hljs-title">param</span>‐<span class="hljs-title">value</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">context</span>‐<span class="hljs-title">param</span>&gt; </span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>‐<span class="hljs-title">name</span>&gt;<span class="hljs-title">springmvc</span>&lt;/<span class="hljs-title">servlet</span>‐<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>‐<span class="hljs-title">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>&lt;/<span class="hljs-title">servlet</span>‐<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">init</span>‐<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">param</span>‐<span class="hljs-title">name</span>&gt;<span class="hljs-title">contextConfigLocation</span>&lt;/<span class="hljs-title">param</span>‐<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">param</span>‐<span class="hljs-title">value</span>&gt;/<span class="hljs-title">WEB</span>‐<span class="hljs-title">INF</span>/<span class="hljs-title">spring</span>‐<span class="hljs-title">mvc</span>.<span class="hljs-title">xml</span>&lt;/<span class="hljs-title">param</span>‐<span class="hljs-title">value</span>&gt;</span><br><span class="hljs-class">        &lt;/<span class="hljs-title">init</span>‐<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">load</span>‐<span class="hljs-title">on</span>‐<span class="hljs-title">startup</span>&gt;1&lt;/<span class="hljs-title">load</span>‐<span class="hljs-title">on</span>‐<span class="hljs-title">startup</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>‐<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>‐<span class="hljs-title">name</span>&gt;<span class="hljs-title">springmvc</span>&lt;/<span class="hljs-title">servlet</span>‐<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">url</span>‐<span class="hljs-title">pattern</span>&gt;/&lt;/<span class="hljs-title">url</span>‐<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>‐<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">web</span>‐<span class="hljs-title">app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-实现认证功能"><a href="#2-2-实现认证功能" class="headerlink" title="2.2 实现认证功能"></a>2.2 实现认证功能</h3><h4 id="2-2-1-认证页面"><a href="#2-2-1-认证页面" class="headerlink" title="2.2.1  认证页面"></a>2.2.1  认证页面</h4><ul><li>在<code>webapp/WEB-INF/views</code>下定义认证页面<code>login.jsp</code>，作为测试认证流程，页面为form表单，包括用户名，密码，触发登录将提交表单信息至<code>/login</code> 「controller」。</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF‐8&quot;</span> pageEncoding=<span class="hljs-string">&quot;utf‐8&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;用户登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>    密&amp;nbsp;&amp;nbsp;&amp;nbsp;码:<br>    &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在WebConfig中新增如下配置，将/直接导向login.jsp页面</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>    registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>使用tomcat7插件运行测试，配置如下</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409170358793.png"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409170436346.png"></p><hr><h4 id="2-2-2-认证接口"><a href="#2-2-2-认证接口" class="headerlink" title="2.2.2 认证接口"></a>2.2.2 认证接口</h4><ol><li>定义认证接口，此接口对传来的用户名密码校验，若成功则返回该用户的详细信息，否则抛出错误异常</li></ol><ul><li>在service包下创建<code>AuthenticationService</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthenticationService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户认证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authenticationRequest 用户认证请求，账号和密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 认证成功的用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">UserDto <span class="hljs-title">authentication</span><span class="hljs-params">(AuthenticationRequest authenticationRequest)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>model包下，认证请求结构</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">// import lombok.Data;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationRequest</span> </span>&#123;<br>    <span class="hljs-comment">//认证请求参数，账号、密码</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>model包下，创建UerDto，作为登录成功后获得的登录用户的信息</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDto</span> </span>&#123;<br>    <span class="hljs-comment">//用户身份信息</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String fullname;<br>    <span class="hljs-keyword">private</span> String mobile;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; authorities; <span class="hljs-comment">// 用户权限用Set集合存储</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>认证实现类，根据用户名查找用户信息，并校验密码。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationService</span> </span>&#123;<br>    <span class="hljs-comment">//匿名代码块，初始化数据，模拟数据库</span><br>    &#123;<br>        Set&lt;String&gt; authorities1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        authorities1.add(<span class="hljs-string">&quot;p1&quot;</span>);<span class="hljs-comment">// p1和/r/r1对应,后面controller会用到</span><br>        Set&lt;String&gt; authorities2 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        authorities2.add(<span class="hljs-string">&quot;p2&quot;</span>);<span class="hljs-comment">// p2和/r/r2对应,后面controller会用到</span><br>        userMap.put(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-keyword">new</span> UserDto(<span class="hljs-string">&quot;1010&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;133443&quot;</span>, authorities1));<br>        userMap.put(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-keyword">new</span> UserDto(<span class="hljs-string">&quot;1011&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;456&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;144553&quot;</span>, authorities2));<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户认证，校验用户身份信息是否合法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authenticationRequest 用户认证请求，账号和密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 认证成功的用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDto <span class="hljs-title">authentication</span><span class="hljs-params">(AuthenticationRequest authenticationRequest)</span> </span>&#123;<br>        <span class="hljs-comment">//校验参数是否为空</span><br>        <span class="hljs-keyword">if</span> (authenticationRequest == <span class="hljs-keyword">null</span><br>                || StringUtils.isEmpty(authenticationRequest.getUsername())<br>                || StringUtils.isEmpty(authenticationRequest.getPassword())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;账号和密码为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//根据账号去查询数据库,这里测试程序采用模拟方法</span><br>        UserDto user = getUserDto(authenticationRequest.getUsername());<br>        <span class="hljs-comment">//判断用户是否为空</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;查询不到该用户&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//校验密码</span><br>        <span class="hljs-keyword">if</span> (!authenticationRequest.getPassword().equals(user.getPassword())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;账号或密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//认证通过，返回用户身份信息</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">//根据账号查询用户信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> UserDto <span class="hljs-title">getUserDto</span><span class="hljs-params">(String userName)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userMap.get(userName);<br>    &#125;<br><br>    <span class="hljs-comment">//用户信息</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, UserDto&gt; userMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>登录Controller，对/login请求处理，它调用AuthenticationService完成认证并返回登录结果提示信息：</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    AuthenticationService authenticationService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/login&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(AuthenticationRequest authenticationRequest, HttpSession session)</span> </span>&#123;<br>        UserDto userDto = authenticationService.authentication(authenticationRequest);<br>        <span class="hljs-keyword">return</span> userDto.getUsername() + <span class="hljs-string">&quot;登录成功&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>Test，访问路径为 /</li></ol><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409173720669.png"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409173731950.png"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210409173748505.png"></p><ul><li>至此，完成最简单的身份凭证校验，后面对于资源的请求还要单独授权。</li></ul><h4 id="2-2-3-实现会话功能"><a href="#2-2-3-实现会话功能" class="headerlink" title="2.2.3 实现会话功能"></a>2.2.3 实现会话功能</h4><ol><li>增加会话控制</li></ol><ul><li>在UserDto中定义一个SESSION_USER_KEY，作为Session中存放登录用户信息的key</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SESSION_USER_KEY = <span class="hljs-string">&quot;_user&quot;</span>;<br></code></pre></div></td></tr></table></figure><ul><li>修改LoginController，认证成功后，将用户信息放入当前会话。并增加用户登出方法，登出时将session置为<br>失效。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(AuthenticationRequest authenticationRequest, HttpSession session)</span> </span>&#123;<br>    UserDto userDto = authenticationService.authentication(authenticationRequest);<br>    <span class="hljs-comment">//存入session</span><br>    session.setAttribute(UserDto.SESSION_USER_KEY, userDto);<br>    <span class="hljs-keyword">return</span> userDto.getUsername() + <span class="hljs-string">&quot;登录成功&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/logout&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> </span>&#123;<br>    session.invalidate(); <span class="hljs-comment">// 将session非法化就达到退出效果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;退出成功&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>增加测试资源</li></ol><ul><li>修改LoginController，增加测试r1，它从当前会话session中获取当前登录用户，并返回提示信息给前台。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/r/r1&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">r1</span><span class="hljs-params">(HttpSession session)</span> </span>&#123;<br>    String fullname = <span class="hljs-keyword">null</span>;<br>    Object object = session.getAttribute(UserDto.SESSION_USER_KEY);<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;<br>        fullname = <span class="hljs-string">&quot;匿名&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        UserDto userDto = (UserDto) object;<br>        fullname = userDto.getFullname();<br>    &#125;<br>    <span class="hljs-keyword">return</span> fullname + <span class="hljs-string">&quot;访问资源r1&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>Test</li></ol><ul><li>未登录情况下直接访问测试资源/r/r1</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410114837028.png"></p><ul><li>成功登录的情况下访问测试资源/r/r1</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410114851102.png"></p><p>在用户登录成功时，该用户信息已被成功放入session，并且后续请求可以正常从session中获取当<br>前登录用户信息，符合预期结果。</p><hr><h4 id="2-2-4-实现授权功能"><a href="#2-2-4-实现授权功能" class="headerlink" title="2.2.4 实现授权功能"></a>2.2.4 实现授权功能</h4><ul><li>匿名用户（未登录用户）访问拦截：禁止匿名用户访问某些资源。</li><li>登录用户访问拦截：根据用户的<strong>权限</strong>决定是否能访问某些资源。</li></ul><ol><li>增加权限数据</li></ol><ul><li>UserDto添加用户权限，用Set集合存储</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Set&lt;String&gt; authorities;<br></code></pre></div></td></tr></table></figure><ul><li>在AuthenticationServiceImpl中为模拟用户初始化权限，其中张三给了p1权限，李四给了p2权限。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">//用户信息</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,UserDto&gt; userMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    &#123;<br>        Set&lt;String&gt; authorities1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        authorities1.add(<span class="hljs-string">&quot;p1&quot;</span>);<br>        Set&lt;String&gt; authorities2 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        authorities2.add(<span class="hljs-string">&quot;p2&quot;</span>);<br>        userMap.put(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-keyword">new</span> UserDto(<span class="hljs-string">&quot;1010&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;张</span><br><span class="hljs-string">三&quot;</span>,<span class="hljs-string">&quot;133443&quot;</span>,authorities1));<br>        userMap.put(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-keyword">new</span> UserDto(<span class="hljs-string">&quot;1011&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;456&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;144553&quot;</span>,authorities2));<br>    &#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>增加测试资源，同/r/r1，这是资源r2</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/r/r2&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">r2</span><span class="hljs-params">(HttpSession session)</span> </span>&#123;<br>    String fullname = <span class="hljs-keyword">null</span>;<br>    Object userObj = session.getAttribute(UserDto.SESSION_USER_KEY);<br>    <span class="hljs-keyword">if</span> (userObj != <span class="hljs-keyword">null</span>) &#123;<br>        fullname = ((UserDto) userObj).getFullname();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fullname = <span class="hljs-string">&quot;匿名&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fullname + <span class="hljs-string">&quot; 访问资源r2&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>实现授权拦截器</li></ol><ul><li>在<code>interceptor</code>包下定义<code>SimpleAuthenticationInterceptor</code>拦截器</li><li>实现 1、校验用户是否登录 2、校验用户是否拥有操作权限</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleAuthenticationInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//在这个方法中校验用户请求的url是否在用户的权限范围内</span><br>        <span class="hljs-comment">//取出用户身份信息</span><br>        Object object = request.getSession().getAttribute(UserDto.SESSION_USER_KEY);<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//没有认证，提示登录</span><br>            writeContent(response, <span class="hljs-string">&quot;请登录&quot;</span>);<br>        &#125;<br>        UserDto userDto = (UserDto) object;<br>        <span class="hljs-comment">//请求的url</span><br>        String requestURI = request.getRequestURI();<br>        <span class="hljs-keyword">if</span> (userDto.getAuthorities().contains(<span class="hljs-string">&quot;p1&quot;</span>) &amp;&amp; requestURI.contains(<span class="hljs-string">&quot;/r/r1&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (userDto.getAuthorities().contains(<span class="hljs-string">&quot;p2&quot;</span>) &amp;&amp; requestURI.contains(<span class="hljs-string">&quot;/r/r2&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        writeContent(response, <span class="hljs-string">&quot;没有权限，拒绝访问&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//响应信息给客户端</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeContent</span><span class="hljs-params">(HttpServletResponse response, String msg)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        PrintWriter writer = response.getWriter();<br>        writer.print(msg);<br>        writer.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在 WebConfig中配置拦截器，匹配<code>/r/**</code>的资源为受保护的系统资源，访问该资源的请求进入<br>SimpleAuthenticationInterceptor拦截器。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> SimpleAuthenticationInterceptor simpleAuthenticationInterceptor;<br>   <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>    registry.addInterceptor(simpleAuthenticationInterceptor).addPathPatterns(<span class="hljs-string">&quot;/r/**&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>Test</li></ol><ul><li>未登录</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410120022280.png"></p><ul><li>张三登录</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410120052995.png"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410120104477.png"></p><ul><li>李四同理，只能访问r2。r1没有权限访问。</li></ul><h2 id="3-Spring-Security-快速上手「基于MVC」"><a href="#3-Spring-Security-快速上手「基于MVC」" class="headerlink" title="3. Spring Security 快速上手「基于MVC」"></a>3. Spring Security 快速上手「基于MVC」</h2><ul><li>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。由于它是Spring生态系统中的一员，因此它伴随着整个Spring生态系统不断修正、升级，在spring boot项目中加入Spring Security更是十分简单，使用Spring Security减少了为企业系统安全控制编写大量重复代码的工作。</li></ul><h3 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h3><h4 id="3-1-1-创建Maven工程"><a href="#3-1-1-创建Maven工程" class="headerlink" title="3.1.1 创建Maven工程"></a>3.1.1 创建Maven工程</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>security-spring-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- spring-security依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不添加该依赖tomcat7:run无法运行项目 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>security-springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-Spring容器配置"><a href="#3-1-2-Spring容器配置" class="headerlink" title="3.1.2 Spring容器配置"></a>3.1.2 Spring容器配置</h4><ul><li>同security-springmvc</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.xxx.security.springmvc&quot;</span><br><span class="hljs-meta">                ,excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,value = Controller.class)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationConfig</span> </span>&#123;<br>    <span class="hljs-comment">//在此配置除了Controller的其它bean，比如：数据库链接池、事务管理器、业务bean等。</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-1-3-Servlet-Context配置"><a href="#3-1-3-Servlet-Context配置" class="headerlink" title="3.1.3 Servlet Context配置"></a>3.1.3 Servlet Context配置</h4><ul><li>同security-springmvc</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.xxx.security.springmvc&quot;</span><br><span class="hljs-meta">            ,includeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,value =</span><br><span class="hljs-meta">Controller.class)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-comment">//视频解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> InternalResourceViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">()</span></span>&#123;<br>        InternalResourceViewResolver viewResolver = <span class="hljs-keyword">new</span> InternalResourceViewResolver();<br>        viewResolver.setPrefix(<span class="hljs-string">&quot;/WEB‐INF/views/&quot;</span>);<br>        viewResolver.setSuffix(<span class="hljs-string">&quot;.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-1-4-加载-Spring容器"><a href="#3-1-4-加载-Spring容器" class="headerlink" title="3.1.4  加载 Spring容器"></a>3.1.4  加载 Spring容器</h4><ul><li>在<code>init</code>包下定义Spring容器初始化类<code>SpringApplicationInitializer</code>，此类实现WebApplicationInitializer接口，Spring容器启动时加载WebApplicationInitializer接口的所有实现类。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringApplicationInitializer</span> <span class="hljs-keyword">extends</span></span><br><span class="hljs-class"><span class="hljs-title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class&lt;?&gt;[] &#123; ApplicationConfig.class &#125;;<span class="hljs-comment">//指定rootContext的配置类</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;; <span class="hljs-comment">//指定servletContext的配置类</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String [] &#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="3-2-认证"><a href="#3-2-认证" class="headerlink" title="3.2 认证"></a>3.2 认证</h3><h4 id="3-2-1-认证页面"><a href="#3-2-1-认证页面" class="headerlink" title="3.2.1 认证页面"></a>3.2.1 认证页面</h4><ul><li>Spring Security默认提供认证页面，不需要额外开发。</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410162825759.png"></p><h4 id="3-2-2-安全配置"><a href="#3-2-2-安全配置" class="headerlink" title="3.2.2 安全配置"></a>3.2.2 安全配置</h4><ul><li>Spring Security提供了<strong>用户名密码登录</strong>、<strong>退出</strong>、<strong>会话管理</strong>等认证功能，只需要配置即可使用。</li></ul><ol><li>在config包下定义<code>WebSecurityConfig</code>，作为Security框架的配置类，安全配置的内容包括：用户信息、密码编码器、安全拦截机制。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-comment">//定义用户信息服务（查询用户信息）</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;<br>        InMemoryUserDetailsManager manager = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();<br>        manager.createUser(User.withUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>).password(<span class="hljs-string">&quot;123&quot;</span>).authorities(<span class="hljs-string">&quot;p1&quot;</span>).build());<br>        manager.createUser(User.withUsername(<span class="hljs-string">&quot;lisi&quot;</span>).password(<span class="hljs-string">&quot;456&quot;</span>).authorities(<span class="hljs-string">&quot;p2&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br><br>    <span class="hljs-comment">//密码编码器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();<br>    &#125;<br><br>    <span class="hljs-comment">//安全拦截机制（最重要）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/r/r1&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p1&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/r/r2&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p2&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/r/**&quot;</span>).authenticated() <span class="hljs-comment">// 所有/r/**的请求必须认证通过</span><br>                .anyRequest().permitAll()   <span class="hljs-comment">// 除了/r/**，其它的请求可以访问</span><br>                .and()<br>                .formLogin() <span class="hljs-comment">// 允许表单登录</span><br>                .successForwardUrl(<span class="hljs-string">&quot;/login-success&quot;</span>); <span class="hljs-comment">// 自定义登录成功的页面地址</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要说明的是：</p><ul><li><code>@EnableWebSecurity</code>注解已经包含了 <code>@Configuration</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123; WebSecurityConfiguration.class,</span><br><span class="hljs-meta">      SpringWebMvcImportSelector.class,</span><br><span class="hljs-meta">      OAuth2ImportSelector.class &#125;)</span><br><span class="hljs-meta">@EnableGlobalAuthentication</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebSecurity &#123;...&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在 <code>userDetailsService() </code>方法中，返回一个UserDetailsService 给 Spring容S器，Spring Security会使用它来<br>获取用户信息。暂时使用InMemoryUserDetailsManager实现类，并在其中分别创建了zhangsan、lisi两个用<br>户，并设置密码和权限。<code>InMemoryUserDetailsManager</code>是 <code>UserDetailsService </code>接口实现类。</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410163409717.png"></p><ul><li>在configure()中，通过HttpSecurity设置了安全拦截规则<ul><li>1️⃣url匹配<code>/r/**</code>的资源，经过认证后才能访问</li><li>2️⃣其他url完全开放</li><li>3️⃣支持form表单认证，认证成功后转向<code>/login-success</code></li></ul></li></ul><ol start="2"><li>加载 WebSecurityConfig</li></ol><ul><li>修改<code>SpringApplicationInitializer</code>的<code>getRootConfigClasses()</code>方法，添加 <code>WebSecurityConfig.class</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class&lt;?&gt;[] &#123; ApplicationConfig.class, WebSecurityConfig.class&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-3-Spring-Security初始化"><a href="#3-2-3-Spring-Security初始化" class="headerlink" title="3.2.3 Spring Security初始化"></a>3.2.3 Spring Security初始化</h4><ul><li><p>Spring Security 初始化，有两种情况</p><ul><li>若当前环境没有使用 Spring 或 Spring MVC，则需要将 WebSecurityConfig(Spring Security配置类) 传入超<br>类，以确保获取配置，并创建spring context。</li><li>相反，若当前环境<strong>已经使用 Spring</strong>，我们应该在现有的SpringContext中注册Spring Security「上一步已经做将WebSecurityConfig加载至rootcontext」，此方法可以什么都不做。</li></ul></li><li><p>在<code>init</code>包下定义<code>SpringSecurityApplicationInitializer</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringSecurityApplicationInitializer</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSecurityWebApplicationInitializer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SpringSecurityApplicationInitializer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//super(WebSecurityConfig.class);</span><br>        <span class="hljs-comment">//没有使用Spring或Spring MVC，则需要将WebSecurityConfig(Spring Security配置类) 传入超</span><br>        <span class="hljs-comment">//类，以确保获取配置，并创建spring context。</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-4-默认根路径请求"><a href="#3-2-4-默认根路径请求" class="headerlink" title="3.2.4 默认根路径请求"></a>3.2.4 默认根路径请求</h4><ul><li>在WebConfig.java中添加默认请求根路径跳转到<code>/login</code>，此url为<strong>Spring Security</strong>提供：</li><li>这里要用重定向到默认的 /login 界面</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 默认Url根路径跳转到/login，此url为spring security提供</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>    registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;redirect:/login&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-5-认证成功页面"><a href="#3-2-5-认证成功页面" class="headerlink" title="3.2.5 认证成功页面"></a>3.2.5 认证成功页面</h4><ul><li>在安全配置中，认证成功将跳转到<code>/login-success</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//安全拦截机制（最重要）</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    http.authorizeRequests()<br>        .antMatchers(<span class="hljs-string">&quot;/r/r1&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p1&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/r/r2&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p2&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/r/**&quot;</span>).authenticated() <span class="hljs-comment">// 所有/r/**的请求必须认证通过</span><br>        .anyRequest().permitAll()   <span class="hljs-comment">// 除了/r/**，其它的请求可以访问</span><br>        .and()<br>        .formLogin() <span class="hljs-comment">// 允许表单登录</span><br>        .successForwardUrl(<span class="hljs-string">&quot;/login-success&quot;</span>); <span class="hljs-comment">// 自定义登录成功的页面地址</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>Spring Security支持form表单认证，认证成功后转向<code>/login-success</code>。</li><li>在<code>LoginController</code>中定义<code>/login-success</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login‐success&quot;,produces = &#123;&quot;text/plain;charset=UTF‐8&quot;&#125;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">loginSuccess</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 登录成功&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-6-Test"><a href="#3-2-6-Test" class="headerlink" title="3.2.6 Test"></a>3.2.6 Test</h4><ol><li>启动项目，访问<a href="http://localhost:8080/security-spring-security/%E8%B7%AF%E5%BE%84%E5%9C%B0%E5%9D%80">http://localhost:8080/security-spring-security/路径地址</a></li></ol><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410165535635.png"></p><ul><li>页面会根据WebConfig中addViewControllers配置规则，重定向跳转至/login，/login是pring Security提供的登录页面。</li></ul><ol start="2"><li>登录</li></ol><ul><li>账户名、密码错误</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410165724178.png"></p><ul><li>账户名：zhangsan；密码：123</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410165809551.png"></p><ol start="3"><li>输入<a href="http://localhost:8080/security-spring-security/logout%E9%80%80%E5%87%BA%EF%BC%8CLog">http://localhost:8080/security-spring-security/logout退出，Log</a> Out自动跳转回登录界面</li></ol><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410165846215.png"></p><hr><h3 id="3-3-授权"><a href="#3-3-授权" class="headerlink" title="3.3 授权"></a>3.3 授权</h3><ul><li><p>实现授权需要对用户的访问进行拦截校验，校验用户的权限是否可以操作指定的资源，Spring Security默认提供授权实现方法。</p></li><li><p>在<code>LoginController</code>添加<code>/r/r1</code>或<code>/r/r2</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 测试资源1</span><br><span class="hljs-meta">@GetMapping(value = &quot;/r/r1&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">r1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 访问资源1&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 测试资源2</span><br><span class="hljs-meta">@GetMapping(value = &quot;/r/r2&quot;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">r2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 访问资源2&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>之前给两个测试用户绑定了相应的权限，表示访问”/xxx”资源的url需要有”px”的权限</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">manager.createUser(User.withUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>).password(<span class="hljs-string">&quot;123&quot;</span>).authorities(<span class="hljs-string">&quot;p1&quot;</span>).build());<br>manager.createUser(User.withUsername(<span class="hljs-string">&quot;lisi&quot;</span>).password(<span class="hljs-string">&quot;456&quot;</span>).authorities(<span class="hljs-string">&quot;p2&quot;</span>).build()); <br><span class="hljs-comment">// protected void configure(HttpSecurity http) ↓↓↓↓</span><br>.antMatchers(<span class="hljs-string">&quot;/r/r1&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p1&quot;</span>)                                       <br>.antMatchers(<span class="hljs-string">&quot;/r/r2&quot;</span>).hasAuthority(<span class="hljs-string">&quot;p2&quot;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>Test</li></ul><ol><li><p>张三登录，访问r1资源</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410170553915.png"></p></li><li><p>张三访问r2资源，403无权限</p></li></ol><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210410170804126.png"></p><h2 id="4-Spring-Security-基本原理"><a href="#4-Spring-Security-基本原理" class="headerlink" title="4 Spring Security  基本原理"></a>4 Spring Security  基本原理</h2><h3 id="4-1-Spring-Security本质"><a href="#4-1-Spring-Security本质" class="headerlink" title="4.1 Spring Security本质"></a>4.1 Spring Security本质</h3><ul><li>SpringSecurity 本质是一个<strong>过滤器链</strong>，从启动可以获取到过滤器链：<ul><li>org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFil<br>ter</li><li>org.springframework.security.web.context.SecurityContextPersistenceFilter</li><li>org.springframework.security.web.header.HeaderWriterFilter</li><li>org.springframework.security.web.csrf.CsrfFilter</li><li>org.springframework.security.web.authentication.logout.LogoutFilter</li><li>org.springframework.security.web.authentication.<code>UsernamePasswordAuthenticationFilter</code></li><li>org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</li><li>org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</li><li>org.springframework.security.web.savedrequest.RequestCacheAwareFilter</li><li>org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</li><li>org.springframework.security.web.authentication.AnonymousAuthenticationFilter</li><li>org.springframework.security.web.session.SessionManagementFilter</li><li>org.springframework.security.web.access.<code>ExceptionTranslationFilter</code></li><li>org.springframework.security.web.access.intercept.<code>FilterSecurityInterceptor</code></li></ul></li></ul><p>重点看三个过滤器：</p><ol><li><code>FilterSecurityInterceptor</code></li></ol><p>一个<strong>方法级</strong>的权限过滤器, 基本位于过滤链的最底部。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterSecurityInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSecurityInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(FilterInvocation fi)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-keyword">if</span> (fi.getRequest() != <span class="hljs-keyword">null</span> &amp;&amp; fi.getRequest().getAttribute(<span class="hljs-string">&quot;__spring_security_filterSecurityInterceptor_filterApplied&quot;</span>) != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.observeOncePerRequest) &#123;<br>            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (fi.getRequest() != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.observeOncePerRequest) &#123;<br>                fi.getRequest().setAttribute(<span class="hljs-string">&quot;__spring_security_filterSecurityInterceptor_filterApplied&quot;</span>, Boolean.TRUE);<br>            &#125;<br>            InterceptorStatusToken token = <span class="hljs-keyword">super</span>.beforeInvocation(fi);<br>            <span class="hljs-keyword">try</span> &#123;<br>                fi.getChain().doFilter(fi.getRequest(), fi.getResponse());<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">super</span>.finallyInvocation(token);<br>            &#125;<br>            <span class="hljs-keyword">super</span>.afterInvocation(token, (Object)<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;   <br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>super.beforeInvocation(fi)</code> 查看之前的 filter 是否通过</li><li><code>fi.getChain().doFilter(fi.getRequest(), fi.getResponse())</code> 真正的调用后台的服务</li></ul><ol start="2"><li><code>ExceptionTranslationFilter</code></li></ol><ul><li>异常过滤器，用来处理在认证授权过程中抛出的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionTranslationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericFilterBean</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest)req;<br>        HttpServletResponse response = (HttpServletResponse)res;<br>        <span class="hljs-keyword">try</span> &#123;<br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Chain processed normally&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var9) &#123;<br>            <span class="hljs-keyword">throw</span> var9;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;<br>            Throwable[] causeChain = <span class="hljs-keyword">this</span>.throwableAnalyzer.determineCauseChain(var10);<br>            RuntimeException ase = (AuthenticationException)<span class="hljs-keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AuthenticationException.class, causeChain);<br>            <span class="hljs-keyword">if</span> (ase == <span class="hljs-keyword">null</span>) &#123;<br>                ase = (AccessDeniedException)<span class="hljs-keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AccessDeniedException.class, causeChain);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ase == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (var10 <span class="hljs-keyword">instanceof</span> ServletException) &#123;<br>                    <span class="hljs-keyword">throw</span> (ServletException)var10;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (var10 <span class="hljs-keyword">instanceof</span> RuntimeException) &#123;<br>                    <span class="hljs-keyword">throw</span> (RuntimeException)var10;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(var10);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(<span class="hljs-string">&quot;Unable to handle the Spring Security Exception because the response is already committed.&quot;</span>, var10);<br>            &#125;<br>            <span class="hljs-keyword">this</span>.handleSpringSecurityException(request, response, chain, (RuntimeException)ase);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><code>UsernamePasswordAuthenticationFilter</code></li></ol><ul><li>对/login 的 POST 请求做拦截，校验表单中用户名，密码</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAuthenticationProcessingFilter</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String username = <span class="hljs-keyword">this</span>.obtainUsername(request);<br>            String password = <span class="hljs-keyword">this</span>.obtainPassword(request);<br>            <span class="hljs-keyword">if</span> (username == <span class="hljs-keyword">null</span>) &#123;<br>                username = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (password == <span class="hljs-keyword">null</span>) &#123;<br>                password = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            username = username.trim();<br>            UsernamePasswordAuthenticationToken authRequest = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username, password);<br>            <span class="hljs-keyword">this</span>.setDetails(request, authRequest);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getAuthenticationManager().authenticate(authRequest);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="4-2-过滤器加载"><a href="#4-2-过滤器加载" class="headerlink" title="4.2 过滤器加载"></a>4.2 过滤器加载</h3><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210412213111265.png"></p><ul><li>过滤器加载通过 <code>DelegatingFilterProxy</code> 来配置加载</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingFilterProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericFilterBean</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        Filter delegateToUse = <span class="hljs-keyword">this</span>.delegate;<br>        <span class="hljs-keyword">if</span> (delegateToUse == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>.delegateMonitor) &#123;<br>                delegateToUse = <span class="hljs-keyword">this</span>.delegate;<br>                <span class="hljs-keyword">if</span> (delegateToUse == <span class="hljs-keyword">null</span>) &#123;<br>                    WebApplicationContext wac = <span class="hljs-keyword">this</span>.findWebApplicationContext();<br>                    <span class="hljs-keyword">if</span> (wac == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No WebApplicationContext found: no ContextLoaderListener or DispatcherServlet registered?&quot;</span>);<br>                    &#125;<br>                    delegateToUse = <span class="hljs-keyword">this</span>.initDelegate(wac);<br>                &#125;<br>                <span class="hljs-keyword">this</span>.delegate = delegateToUse;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.invokeDelegate(delegateToUse, request, response, filterChain);<br>    &#125;   <br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>this.delegate = this.initDelegate(wac)</code>  初始化代理</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Filter <span class="hljs-title">initDelegate</span><span class="hljs-params">(WebApplicationContext wac)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    String targetBeanName = <span class="hljs-keyword">this</span>.getTargetBeanName();<br>    Assert.state(targetBeanName != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;No target bean name set&quot;</span>);<br>    Filter delegate = (Filter)wac.getBean(targetBeanName, Filter.class);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isTargetFilterLifecycle()) &#123;<br>        delegate.init(<span class="hljs-keyword">this</span>.getFilterConfig());<br>    &#125;<br>    <span class="hljs-keyword">return</span> delegate;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>会内置 <code>FilterChainProxy</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChainProxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericFilterBean</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;<br>        List&lt;Filter&gt; filters = <span class="hljs-keyword">this</span>.getFilters((HttpServletRequest)fwRequest);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>private List&lt;Filter&gt; getFilters(HttpServletRequest request)</code> 获取所有过滤器链</li></ul><hr><h3 id="4-3-两个重要接口"><a href="#4-3-两个重要接口" class="headerlink" title="4.3 两个重要接口"></a>4.3 两个重要接口</h3><ol><li><code>UserDetailsService</code></li></ol><ul><li>当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。如果需要自定义逻辑时，只需要实现 UserDetailsService 接口。</li><li><strong>查询数据库用户名和密码过程写在这个接口中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-function">UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>会返回 <code>UserDetails</code> 类，默认为 用户 “主体”</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDetails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); <span class="hljs-comment">// 获取登录用户所有权限</span><br>    <span class="hljs-function">String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 获取密码</span><br>    <span class="hljs-function">String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 获取用户名</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 判断账户是否过期</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 判断账户是否被锁定</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 凭证&#123;密码&#125;是否过期</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 当前用户是否可用</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210412215511215.png"></p><ul><li>实现类为 <code>User</code>，后面只用实现User这个实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span>, <span class="hljs-title">CredentialsContainer</span> </span>&#123;<br>    <span class="hljs-comment">//@Param username: 此值是客户端表单传递过来的数据。默认情况下必须叫 username，否则无</span><br>    <span class="hljs-comment">//法接收</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(username, password, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>, authorities);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>需要做的是：</p><ul><li><p>创建类继承 <code>UsernamePasswordAuthenticationFilter</code> ，重写三个方法</p><ul><li><code>attemptAuthentication</code> 尝试认证</li><li>父类中的 <code>successfulAuthentication</code> <code>unsuccessfulAuthentication</code> 成功和失败认证</li></ul></li><li><p>创建类实现 <code>UserDetailsService</code> ，编写查询数据过程，返回 User 对象，该User是安全框架提供的。</p></li></ul></li></ul><hr><ol start="2"><li><code>PasswordEncoder</code></li></ol><ul><li><strong>数据加密接口，用于返回User对象里面密码加密</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PasswordEncoder</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 表示把参数按照特定的解析规则进行解析</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence var1)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证从存储中获取的编码密码与编码后提交的原始密码是否匹配</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> var1 需要被解析的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> var2 存储的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 密码匹配 true, 不匹配 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence var1, String var2)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 升级密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encodedPassword 编译后的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解析的密码能够再次进行解析且达到更安全的结果 true, 否则返回</span><br><span class="hljs-comment">     *         false。默认返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">upgradeEncoding</span><span class="hljs-params">(String encodedPassword)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210412220820356.png"></p><ul><li><code>BCryptPasswordEncoder</code> 是 Spring Security 官方推荐的密码解析器，平时多使用这个解析器，对 bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建密码解析器</span><br>    BCryptPasswordEncoder bCryptPasswordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    <span class="hljs-comment">// 对密码进行加密</span><br>    String testStr = bCryptPasswordEncoder.encode(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">// 打印加密之后的数据</span><br>    System.out.println(<span class="hljs-string">&quot; 加密之后数据：\t&quot;</span> + testStr);<br>    <span class="hljs-comment">// 判断原字符加密后和加密之前是否匹配</span><br>    <span class="hljs-keyword">boolean</span> result = bCryptPasswordEncoder.matches(<span class="hljs-string">&quot;test&quot;</span>, testStr);<br>    <span class="hljs-comment">// 打印比较结果</span><br>    System.out.println(<span class="hljs-string">&quot; 比较结果：\t&quot;</span> + result);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-SpringSecurity-Web-权限方案"><a href="#5-SpringSecurity-Web-权限方案" class="headerlink" title="5 SpringSecurity Web 权限方案"></a>5 SpringSecurity Web 权限方案</h2><blockquote><p>spring-boot-starter-parent 2.2.1.RELEASE;  spring-security-web  5.2.1.RELEASE</p></blockquote><h3 id="5-1-设置登录系统的账号、密码"><a href="#5-1-设置登录系统的账号、密码" class="headerlink" title="5.1 设置登录系统的账号、密码"></a>5.1 设置登录系统的账号、密码</h3><h4 id="方式一：application-properties"><a href="#方式一：application-properties" class="headerlink" title="方式一：application.properties"></a>方式一：application.properties</h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">spring.security.user.name</span>=<span class="hljs-string">hypocrite30</span><br><span class="hljs-meta">spring.security.user.password</span>=<span class="hljs-string">hypocrite30</span><br></code></pre></div></td></tr></table></figure><h4 id="方式二：编写类实现接口"><a href="#方式二：编写类实现接口" class="headerlink" title="方式二：编写类实现接口"></a>方式二：编写类实现接口</h4><ul><li><code>config</code> 包下创建 Security 的<strong>配置类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        BCryptPasswordEncoder passwordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        String password = passwordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>); <span class="hljs-comment">// 对密码进行编译</span><br>        auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;hypocrite30&quot;</span>).password(password).roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 注入密码编码器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">PasswordEncoder <span class="hljs-title">password</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="方式三：自定义实现类"><a href="#方式三：自定义实现类" class="headerlink" title="方式三：自定义实现类"></a>方式三：自定义实现类</h4><ul><li>创建配置类，设置使用哪个<code>userDetailsService</code>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfigTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        auth.userDetailsService(userDetailsService).passwordEncoder(password());<br>    &#125;<br>    <span class="hljs-comment">// 注入密码编码器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">PasswordEncoder <span class="hljs-title">password</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>userDetailsService</code> 选择使用哪个 Service进行认证</li><li>编写实现类，返回User对象，User对象有用户名密码和权限</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span> <span class="hljs-comment">// 与注入的名称一一对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        List&lt;GrantedAuthority&gt; auths =<br>                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;hypocrite30&quot;</span>,<br>                <span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;password&quot;</span>), auths);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>一般都是用<strong>第三种</strong>方法，自定义实现类。但是涉及到管理员模式，可以使用第一和第二种方式设置admin。</p></blockquote><h3 id="5-2-整合数据库完成用户认证"><a href="#5-2-整合数据库完成用户认证" class="headerlink" title="5.2 整合数据库完成用户认证"></a>5.2 整合数据库完成用户认证</h3><ul><li>整合Mybatis-plus</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>创表 users</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for users</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `users`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of users</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;lucy&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;mary&#x27;</span>, <span class="hljs-string">&#x27;456&#x27;</span>);<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><ul><li>创建实体类，<code>entity</code>包下</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>整合Mybatis-plus，创建mapper，放在mapper包下</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UsersMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Users</span>&gt; </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>有Mapper，就需要在启动类上添加@MapperScan扫描</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.xxx.security.mapper&quot;)</span> <span class="hljs-comment">// mapper对应的包路径</span><br></code></pre></div></td></tr></table></figure><ul><li>配置文件加上数据库连接信息</li></ul><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springsecurity?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></div></td></tr></table></figure><ul><li>在自定义实现类中调用mapper查询数据库用户名认证</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UsersMapper usersMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        <span class="hljs-comment">//调用usersMapper方法，根据用户名查询数据库</span><br>        QueryWrapper&lt;Users&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper();<br>        <span class="hljs-comment">// where username=?</span><br>        wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        Users users = usersMapper.selectOne(wrapper);<br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span> (users == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//数据库没有用户名，认证失败</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);<br>        &#125;<br>        List&lt;GrantedAuthority&gt; auths =<br>                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br>        <span class="hljs-comment">//从查询数据库返回users对象，得到用户名和密码，返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(users.getUsername(),<br>                <span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(users.getPassword()), auths);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-自定义登录界面-amp-控制是否认证"><a href="#5-3-自定义登录界面-amp-控制是否认证" class="headerlink" title="5.3 自定义登录界面 &amp; 控制是否认证"></a>5.3 自定义登录界面 &amp; 控制是否认证</h3><ul><li>在Security配置类进行配置，注意重写的是 形参<code>HttpSecurity http</code> 的 configure()</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 配置认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    http.formLogin() <span class="hljs-comment">// 自定义自己编写的登录页面</span><br>            .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>) <span class="hljs-comment">//  配置哪个 url 为登录页面</span><br>            .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 登录访问路径 url</span><br>            .successForwardUrl(<span class="hljs-string">&quot;/success&quot;</span>) <span class="hljs-comment">//  登录成功之后，跳转路径 url</span><br>            .failureForwardUrl(<span class="hljs-string">&quot;/fail&quot;</span>);<span class="hljs-comment">//  登录失败之后跳转到哪个 url</span><br>    http.authorizeRequests()<br>            .antMatchers(<span class="hljs-string">&quot;/test/hello&quot;</span>, <span class="hljs-string">&quot;/login&quot;</span>) <span class="hljs-comment">// 表示配置请求路径</span><br>            .permitAll() <span class="hljs-comment">// 指定 URL 无需认证。</span><br>            .anyRequest() <span class="hljs-comment">// 其他请求</span><br>            .authenticated(); <span class="hljs-comment">// 需要认证</span><br>    http.csrf().disable(); <span class="hljs-comment">// 关闭 csrf</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/success&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">success</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PostMapping(&quot;/fail&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fail</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>前端表单</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> // username，password名称不能错<br>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot; 提交&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-4-基于角色或权限进行访问控制"><a href="#5-4-基于角色或权限进行访问控制" class="headerlink" title="5.4 基于角色或权限进行访问控制"></a>5.4 基于角色或权限进行访问控制</h3><h4 id="「hasAuthority」"><a href="#「hasAuthority」" class="headerlink" title="「hasAuthority」"></a>「hasAuthority」</h4><ul><li><p>如果当前的主体具有指定权限，返回true，否则返回false。</p></li><li><p>配置类加上路径和能访问的权限</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAuthority(<span class="hljs-string">&quot;admins&quot;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>自定义Service上为返回的User对象加权限</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">List&lt;GrantedAuthority&gt; auths =<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AuthorityUtils</span>.</span></span>comma<span class="hljs-constructor">SeparatedStringToAuthorityList(<span class="hljs-string">&quot;admins&quot;</span>)</span>;<br></code></pre></div></td></tr></table></figure><h4 id="「hasAnyAuthority」"><a href="#「hasAnyAuthority」" class="headerlink" title="「hasAnyAuthority」"></a>「hasAnyAuthority」</h4><ul><li>区别于上面的单个角色，此方法添加多个权限</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admins, manager&quot;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="「hasRole」"><a href="#「hasRole」" class="headerlink" title="「hasRole」"></a>「hasRole」</h4><ul><li>如果用户具备给定角色就允许访问，否则403</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasRole(<span class="hljs-string">&quot;sale&quot;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>注：hasRole() 参数<strong>不能</strong>加 “<code>ROLE_</code>“，会抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">hasRole</span><span class="hljs-params">(String role)</span> </span>&#123;<br>    Assert.notNull(role, <span class="hljs-string">&quot;role cannot be null&quot;</span>);<br>    <span class="hljs-keyword">if</span> (role.startsWith(<span class="hljs-string">&quot;ROLE_&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;role should not start with &#x27;ROLE_&#x27; since it is automatically inserted. Got &#x27;&quot;</span> + role + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hasRole(&#x27;ROLE_&quot;</span> + role + <span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).access(<span class="hljs-string">&quot;hasRole(&#x27;sale&#x27;)&quot;</span>) <span class="hljs-comment">// 这种写法同上，可加ROLE_，可不加</span><br></code></pre></div></td></tr></table></figure><ul><li>给用户添加角色，需要加上前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;GrantedAuthority&gt; auths =<br>        AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admin,ROLE_sale&quot;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="「hasAnyRole」"><a href="#「hasAnyRole」" class="headerlink" title="「hasAnyRole」"></a>「hasAnyRole」</h4><ul><li>同上，可添加多个，同样注意加前缀。</li></ul><h3 id="5-5-自定义403界面"><a href="#5-5-自定义403界面" class="headerlink" title="5.5 自定义403界面"></a>5.5 自定义403界面</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//配置没有权限访问跳转自定义页面</span><br>http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/unauth.html&quot;</span>); <span class="hljs-comment">// 跳转到自定义403界面</span><br></code></pre></div></td></tr></table></figure><ul><li>跳转的路径也可以是controller进行跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/unauth&quot;</span>);<br><br><span class="hljs-meta">@GetMapping(&quot;/unauth&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">accessDenyPage</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unauth&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-6-注解"><a href="#5-6-注解" class="headerlink" title="5.6 注解"></a>5.6 注解</h3><h4 id="「-Secured」"><a href="#「-Secured」" class="headerlink" title="「@Secured」"></a>「@Secured」</h4><ul><li><p>判断是否具有<strong>角色</strong>，另外需要注意的是这里匹配的字符串需要添加前缀 <code>ROLE_</code>。</p></li><li><p>开启注解功能(下面的注解都要打开注解功能)</p></li></ul><p><code>@EnableGlobalMethodSecurity(securedEnabled=true)</code> 可以加在<strong>启动类</strong>或<strong>配置类</strong>上</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemosecurityApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DemosecurityApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在控制器方法上添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;update&quot;)</span><br><span class="hljs-meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello update&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="「-PreAuthorize」"><a href="#「-PreAuthorize」" class="headerlink" title="「@PreAuthorize」"></a>「@PreAuthorize」</h4><ul><li>注解适合<strong>进入方法前</strong>的权限验证，判断的是有无<strong>权限</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/preAuthorize&quot;)</span><br><span class="hljs-comment">//@PreAuthorize(&quot;hasRole(&#x27;admins&#x27;)&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span> <span class="hljs-comment">//上面的四种方法都可以</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">preAuthorize</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;preAuthorize&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="「-PostAuthorize」"><a href="#「-PostAuthorize」" class="headerlink" title="「@PostAuthorize」"></a>「@PostAuthorize」</h4><ul><li>注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testPostAuthorize&quot;)</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">preAuthorize</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;test--PostAuthorize&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PostAuthorize&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>无权限登录完后虽然会虽然会进入403，但是方法里的sout依然会执行</li></ul><h4 id="「-PreFilter」"><a href="#「-PreFilter」" class="headerlink" title="「@PreFilter」"></a>「@PreFilter」</h4><ul><li>不常用，进入控制器之前对数据进行过滤，一般就是对特定的数据拦截</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;admins&#x27;)&quot;)</span><br><span class="hljs-meta">@PreFilter(&quot;filterObject.id%2 == 0&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title">getTestPreFilter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Users&gt; list)</span> </span>&#123;<br>    list.forEach(t -&gt; &#123;<br>        System.out.println(t.getId() + <span class="hljs-string">&quot;\t&quot;</span> + t.getUsername());<br>    &#125;);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="「-PostFilter」"><a href="#「-PostFilter」" class="headerlink" title="「@PostFilter」"></a>「@PostFilter」</h4><ul><li>不常用，权限验证<strong>之后</strong>对数据进行过滤，留下用户名是 admin1 的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getAll&quot;)</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    ArrayList&lt;Users&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Users(<span class="hljs-number">11</span>, <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;6666&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Users(<span class="hljs-number">21</span>, <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;888&quot;</span>));<br>    System.out.println(list);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-7-注销"><a href="#5-7-注销" class="headerlink" title="5.7 注销"></a>5.7 注销</h3><ul><li>配置类的<code>configure</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//退出</span><br>http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).<br>        logoutSuccessUrl(<span class="hljs-string">&quot;/test/hello&quot;</span>).permitAll();<br></code></pre></div></td></tr></table></figure><ul><li>测试可以先成功登录，再访问资源，退出后再访问相同资源需要登录。</li></ul><h3 id="5-8-RememberMe功能"><a href="#5-8-RememberMe功能" class="headerlink" title="5.8 RememberMe功能"></a>5.8 RememberMe功能</h3><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210414195940770.png"></p><ul><li>数据库创表</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `persistent_logins`  (<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `series` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `token` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `last_used` <span class="hljs-type">timestamp</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`series`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br></code></pre></div></td></tr></table></figure><ul><li>配置类注入数据源，配置操作数据库对象</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//注入数据源</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DataSource dataSource;<br><span class="hljs-comment">//配置对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title">persistentTokenRepository</span><span class="hljs-params">()</span> </span>&#123;<br>    JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="hljs-keyword">new</span> JdbcTokenRepositoryImpl();<br>    jdbcTokenRepository.setDataSource(dataSource);<br>    <span class="hljs-comment">//jdbcTokenRepository.setCreateTableOnStartup(true); 自动把表创建</span><br>    <span class="hljs-keyword">return</span> jdbcTokenRepository;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>配置类配置自动登录</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.and()<br>.rememberMe().tokenRepository(persistentTokenRepository()) <span class="hljs-comment">// 设置使用的repository</span><br>.tokenValiditySeconds(<span class="hljs-number">60</span>)   <span class="hljs-comment">//设置有效时长，单位秒</span><br>.userDetailsService(userDetailsService);<br></code></pre></div></td></tr></table></figure><ul><li>前端的自动登录的checkbox的name必须是 <code>remember-me</code></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span>/&gt;</span> 自动登录<br></code></pre></div></td></tr></table></figure><h4 id="「RememberMe原理」"><a href="#「RememberMe原理」" class="headerlink" title="「RememberMe原理」"></a>「RememberMe原理」</h4><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210413220252425.png"></p><ul><li><p>第一次认证的流程走上面的路线（1-4），第二次（11-14）</p></li><li><p>看到 <code>UsernamePasswordAuthenticationFilter</code> 的父类 <code>AbstractAuthenticationProcessingFilter</code>的 <code>doFilter</code> 方法在成功认证后，调用 <code>successfulAuthentication</code> 方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;<br>        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span> + authResult);<br>    &#125;<br><br>    SecurityContextHolder.getContext().setAuthentication(authResult);<br>    <span class="hljs-keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.eventPublisher != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="hljs-keyword">this</span>.getClass()));<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>this.rememberMeServices.loginSuccess(request, response, authResult);</code>继续跟进</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RememberMeServices</span> </span>&#123;<br>    <span class="hljs-function">Authentication <span class="hljs-title">autoLogin</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loginFail</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loginSuccess</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, Authentication var3)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在其实现类 <code>AbstractRememberMeServices</code>中</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.rememberMeRequested(request, <span class="hljs-keyword">this</span>.parameter)) &#123;<br>        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me login not requested.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.onLoginSuccess(request, response, successfulAuthentication);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, Authentication var3)</span></span>;<br></code></pre></div></td></tr></table></figure><ul><li><code>onLoginSuccess</code> 由实现类 <code>PersistentTokenBasedRememberMeServices</code> 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLoginSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;<br>    String username = successfulAuthentication.getName();<br>    <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Creating new persistent login for user &quot;</span> + username);<br>    PersistentRememberMeToken persistentToken = <span class="hljs-keyword">new</span> PersistentRememberMeToken(username, <span class="hljs-keyword">this</span>.generateSeriesData(), <span class="hljs-keyword">this</span>.generateTokenData(), <span class="hljs-keyword">new</span> Date());<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">this</span>.tokenRepository.createNewToken(persistentToken);<br>        <span class="hljs-keyword">this</span>.addCookie(persistentToken, request, response);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>        <span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">&quot;Failed to save persistent token &quot;</span>, var7);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>this.tokenRepository.createNewToken(persistentToken)</code> 通过<code>tokenRepository</code>，创建新Token，然后通过cookie传回给浏览器，另一边写入数据库做备份。</li><li>在 <code>public class JdbcTokenRepositoryImpl</code> 中会对数据库进行操作，让Token存入数据库中。</li></ul><hr><ul><li>「记住我」之后，下次的请求过程是</li><li>先被 <code>RememberMeAuthenticationFilter</code> 过滤器过滤，其中的 <code>doFilter </code> 方法会完成自动登录</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>    HttpServletRequest request = (HttpServletRequest)req;<br>    HttpServletResponse response = (HttpServletResponse)res;<br>    <span class="hljs-keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="hljs-keyword">null</span>) &#123;<br>        Authentication rememberMeAuth = <span class="hljs-keyword">this</span>.rememberMeServices.autoLogin(request, response);<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RememberMeServices</span> </span>&#123;<br>    <span class="hljs-function">Authentication <span class="hljs-title">autoLogin</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span></span>;<br></code></pre></div></td></tr></table></figure><ul><li>实现类 <code>AbstractRememberMeServices</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Authentication <span class="hljs-title">autoLogin</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>    String rememberMeCookie = <span class="hljs-keyword">this</span>.extractRememberMeCookie(request);<br>    <span class="hljs-keyword">if</span> (rememberMeCookie == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie detected&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rememberMeCookie.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Cookie was empty&quot;</span>);<br>            <span class="hljs-keyword">this</span>.cancelCookie(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            UserDetails user = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                String[] cookieTokens = <span class="hljs-keyword">this</span>.decodeCookie(rememberMeCookie);<br>                user = <span class="hljs-keyword">this</span>.processAutoLoginCookie(cookieTokens, request, response);<br>                <span class="hljs-keyword">this</span>.userDetailsChecker.check(user);<br>                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Remember-me cookie accepted&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.createSuccessfulAuthentication(request, user);<br></code></pre></div></td></tr></table></figure><ul><li>前面判空。然后 try 里头对cookie解码，再调用 <code>processAutoLoginCookie</code> </li><li>在实现类中 <code>PersistentTokenBasedRememberMeServices</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> UserDetails <span class="hljs-title">processAutoLoginCookie</span><span class="hljs-params">(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>    ....<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getUserDetailsService().loadUserByUsername(token.getUsername());<br></code></pre></div></td></tr></table></figure><ul><li>调用 <code>loadUserByUsername</code> ，即接口 <code>UserDetailsService</code> 里的实现类调用此方法进行数据库的查询，返回之前在数据库中存的cookie，然后进行 <code>check</code> 比对，成功则直接return，<code>createSuccessfulAuthentication</code>成功认证。</li></ul><h3 id="5-9-CSRF"><a href="#5-9-CSRF" class="headerlink" title="5.9 CSRF"></a>5.9 CSRF</h3><ul><li><p>跨站请求伪造（Cross-site request forgery），可以理解为网站读取已经存在的cookie用来做恶意认证。</p></li><li><p>从 Spring Security 4.0 开始，默认情况下会启用 CSRF 保护，以防止 CSRF 攻击应用程序，Spring Security CSRF 会针对 <code>PATCH</code>，<code>POST</code>，<code>PUT</code> 和 DELETE 方法进行防护。主要是针对数据库操作的请求防护。</p></li></ul><ul><li>导入thymeleaf-security</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--对Thymeleaf添加Spring Security标签支持--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;<br>    &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在登录页面添加一个<strong>隐藏域</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;input<br>type=&quot;hidden&quot; th:if=&quot;$&#123;_csrf&#125;!=null&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; name=&quot;_csrf&quot;/&gt;<br></code></pre></div></td></tr></table></figure><ul><li>关闭安全配置的类中的 csrf</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// http.csrf().disable();</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="「原理」"><a href="#「原理」" class="headerlink" title="「原理」"></a>「原理」</h4><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210414211832498.png"></p><ol><li>生成 csrfToken 保存到 HttpSession 或者 Cookie 中</li></ol><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210414220149644.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CsrfToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">getHeaderName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">getParameterName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">getToken</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>SaveOnAccessCsrfToken</code> 类有个接口 <code>CsrfTokenRepository</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SaveOnAccessCsrfToken</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CsrfToken</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> CsrfTokenRepository tokenRepository;<br></code></pre></div></td></tr></table></figure><ul><li>其实现类 <code>HttpSessionCsrfTokenRepository</code>  <code>CookieCsrfTokenRepository</code></li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringSecurity/image-20210414220605226.png"></p><ul><li><code>CookieCsrfTokenRepository</code> 截取部分</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public final <span class="hljs-keyword">class</span> CookieCsrfTokenRepository implements CsrfTokenRepository &#123;<br>    <span class="hljs-keyword">private</span> String parameterName = <span class="hljs-string">&quot;_csrf&quot;</span>;<br>    <br>    public CsrfToken generate<span class="hljs-constructor">Token(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultCsrfToken(<span class="hljs-params">this</span>.<span class="hljs-params">headerName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">parameterName</span>, <span class="hljs-params">this</span>.<span class="hljs-params">createNewToken</span>()</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> String create<span class="hljs-constructor">NewToken()</span> &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UUID</span>.</span></span>random<span class="hljs-constructor">UUID()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>请求到来时，从请求中提取 csrfToken，和保存的 csrfToken 做比较，进而判断当前请求是否合法。主要通过 <code>CsrfFilter</code> 过滤器来完成。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CsrfFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OncePerRequestFilter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CsrfTokenRepository tokenRepository;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        request.setAttribute(HttpServletResponse.class.getName(), response);<br>        CsrfToken csrfToken = <span class="hljs-keyword">this</span>.tokenRepository.loadToken(request);<br>        <span class="hljs-keyword">boolean</span> missingToken = csrfToken == <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (missingToken) &#123;<br>            csrfToken = <span class="hljs-keyword">this</span>.tokenRepository.generateToken(request);<br>            <span class="hljs-keyword">this</span>.tokenRepository.saveToken(csrfToken, request, response);<br>        &#125;<br><br>        request.setAttribute(CsrfToken.class.getName(), csrfToken);<br>        <span class="hljs-comment">// key: _csrf  value: token</span><br>        request.setAttribute(csrfToken.getParameterName(), csrfToken);<br>        <span class="hljs-comment">// 验证是否匹配正确</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.requireCsrfProtectionMatcher.matches(request)) &#123; <br>            filterChain.doFilter(request, response);<br>        &#125;<br>        ...<br></code></pre></div></td></tr></table></figure><h3 id="基于微服务和jwt待续。。。"><a href="#基于微服务和jwt待续。。。" class="headerlink" title="基于微服务和jwt待续。。。"></a>基于微服务和jwt待续。。。</h3><blockquote><p>鸣谢：</p><p><a href="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello">https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello</a></p><p><a href="https://www.bilibili.com/video/BV1VE411h7aL">https://www.bilibili.com/video/BV1VE411h7aL</a></p><p><a href="https://www.bilibili.com/video/BV15a411A7kP?from=search&amp;seid=12610921816944973603">https://www.bilibili.com/video/BV15a411A7kP?from=search&amp;seid=12610921816944973603</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 2.3.4</title>
    <link href="/2021/04/05/SpringBoot/SpringBoot/"/>
    <url>/2021/04/05/SpringBoot/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Notes"><a href="#SpringBoot-Notes" class="headerlink" title="SpringBoot Notes"></a>SpringBoot Notes</h1><blockquote><p>本文基于SpringBoot 2.3.4.RELEASE</p></blockquote><h2 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h2><p><strong>官网介绍</strong>：</p><blockquote><ul><li>Create stand-alone Spring applications</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li><li>Automatically configure Spring and 3rd party libraries whenever possible</li><li>Provide production-ready features such as metrics, health checks, and externalized configuration</li><li>Absolutely no code generation and no requirement for XML configuration</li></ul></blockquote><ul><li>创建独立的<code>spring</code>应用。</li><li>嵌入<code>Tomcat</code>, <code>Jetty</code> <code>Undertow</code> 而且不需要部署他们。</li><li>提供的“starters” poms来简化<code>Maven</code>配置</li><li>尽可能自动配置<code>spring</code>应用。</li><li>提供生产指标,健壮检查和外部化配置</li><li>绝对没有代码生成和<code>XML</code>配置要求。</li></ul><p>一般把Spring Boot称为搭建程序的 脚手架 或者说是<strong>便捷搭建 基于Spring的工程 脚手架</strong>。其最主要作用就是帮助开<br>发人员快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让开发人员关注业务而非配置。</p><h3 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h3><p>SpringBoot基于<strong>微服务</strong>以及<strong>分布式</strong></p><h2 id="二、SpringBoot基础"><a href="#二、SpringBoot基础" class="headerlink" title="二、SpringBoot基础"></a>二、SpringBoot基础</h2><h3 id="2-1-SpringBoot-特点"><a href="#2-1-SpringBoot-特点" class="headerlink" title="2.1 SpringBoot 特点"></a>2.1 SpringBoot 特点</h3><h4 id="2-1-1-依赖管理"><a href="#2-1-1-依赖管理" class="headerlink" title="2.1.1 依赖管理"></a>2.1.1 依赖管理</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>其父项目, 自动版本仲裁机制</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>自定义版本号</li><li>1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>2、在当前项目里面重写配置，如下自定义mysql 的版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="基础依赖"><a href="#基础依赖" class="headerlink" title="基础依赖"></a>基础依赖</h5><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><ul><li>spring-boot-starter：spring boot场景启动器</li><li>Spring把每个场景都抽取出来，做成了一个个starts</li><li>如我们需要那个场景只需要把对应的启动器来导入进来就可以，不用担心版本。</li><li>用什么功能(Web、缓存、kafka等等)导入相关启动器即可</li></ul><h5 id="注解区别"><a href="#注解区别" class="headerlink" title="注解区别"></a>注解区别</h5><ul><li><code>@Controller</code>和<code>@RestController</code>的区别</li></ul><p><code>@RestController</code>注解相当于<code>@ResponseBody</code> ＋ <code>@Controller</code>合在一起的作用。</p><ol><li>如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页<br>面，或者html，配置的视图解析器 <code>InternalResourceViewResolver</code>不起作用，返回<br>的内容就是 Return 里的内容。</li><li>如果需要返回到指定页面，则需要用 @Controller 配合<strong>视图解析器</strong><br>InternalResourceViewResolver才行。 如果需要返回JSON，XML或自定义<br>mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</li></ol><p>即：</p><ol><li>使用@Controller 注解</li></ol><ul><li>在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面</li><li>若返回json等内容到页面，则需要加@ResponseBody注解</li></ul><ol start="2"><li>@RestController注解</li></ol><ul><li><p>相当于@Controller+@ResponseBody两个注解的结合。</p></li><li><p>返回json数据不需要在方法前面加@ResponseBody注解了</p></li><li><p>使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析</p><p>jsp,html页面</p></li></ul><h5 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将应用打包成一个可执行Jar包，直接使用java -jar xxxx的命令来执行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-1-2-自动配置"><a href="#2-1-2-自动配置" class="headerlink" title="2.1.2 自动配置"></a>2.1.2 自动配置</h4><ul><li>以 <code>spring-boot-starter-web</code> 为例，进入父工程可发现</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>Tomcat<ul><li>配置了Tomcat</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>SpringMVC</strong><ul><li>自动配置MVC常用组件</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>Web</strong><ul><li>自动配置好Web常见场景，比如<strong>字符编码问题</strong>。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p><strong>默认包结构</strong></p><ul><li>主程序所在包下所有自包的组件都会默认扫描，不需要以前的包扫描配置</li><li>想要改变扫描路劲：<code>@SpringBootApplication(scanBasePackages=&quot;com.xxx&quot;)</code>或 <code>@ComponentScan 指定扫描路径</code></li></ul></li><li><p>各种配置拥有默认值</p></li><li><ul><li>默认配置最终都是映射到某个类上，如：MultipartProperties</li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p></li><li><ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 <code>spring-boot-autoconfigure</code> 包里面</li></ul></li></ul><h3 id="2-2-容器功能"><a href="#2-2-容器功能" class="headerlink" title="2.2 容器功能"></a>2.2 容器功能</h3><h5 id="2-2-1-组件添加"><a href="#2-2-1-组件添加" class="headerlink" title="2.2.1  组件添加"></a>2.2.1  组件添加</h5><ul><li><code>@Configuration</code></li></ul><ol><li><p>配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</p></li><li><p>配置类本身也是组件</p></li><li><p><strong>proxyBeanMethods</strong>：代理bean的方法。</p><ul><li><code>Full</code>(proxyBeanMethods = <strong>true</strong>) 「保证每个<code>@Bean</code>方法被调用多少次返回的组件都是<strong>单实例</strong>的」</li><li><code>Lite</code>(proxyBeanMethods = <strong>false</strong>)「每个@Bean方法被调用多少次返回的组件都是新创建的」‘</li></ul><p>组件依赖必须使用Full模式默认。其他默认是否Lite模式。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#####################Configuration使用示例#####################<br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user01</span><span class="hljs-params">()</span></span>&#123;<br>        User zhangsan = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//user组件依赖了Pet组件</span><br>        zhangsan.setPet(tomcatPet());<br>        <span class="hljs-keyword">return</span> zhangsan;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;tom&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pet <span class="hljs-title">tomcatPet</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pet(<span class="hljs-string">&quot;tomcat&quot;</span>);<br>    &#125;<br>&#125;<br>#####################Configuration测试代码如下#####################<br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1、返回我们IOC容器</span><br>        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-comment">//2、查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>        <span class="hljs-comment">//3、从容器中获取组件</span><br>        Pet tom01 = run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br><br>        Pet tom02 = run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br><br>        System.out.println(<span class="hljs-string">&quot;组件：&quot;</span>+(tom01 == tom02));<br><br>        <span class="hljs-comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span><br>        MyConfig bean = run.getBean(MyConfig.class);<br>        System.out.println(bean);<br><br>        <span class="hljs-comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span><br>        <span class="hljs-comment">//保持组件单实例</span><br>        User user = bean.user01();<br>        User user1 = bean.user01();<br>        System.out.println(user == user1);<br><br>        User user01 = run.getBean(<span class="hljs-string">&quot;user01&quot;</span>, User.class);<br>        Pet tom = run.getBean(<span class="hljs-string">&quot;tom&quot;</span>, Pet.class);<br><br>        System.out.println(<span class="hljs-string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><ul><li><code>@Bean</code>、<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></li></ul><p>照常使用即可。</p><hr><ul><li><code>@ComponentScan</code>、 <code>@Import</code><ul><li>前面自定义扫描包用到了@ComponentScan，用来扫描所有的组件</li><li>@Import 给容器中自动创建出这对应类型的组件、默认组件的名字就是全类名</li></ul></li></ul><hr><ul><li><code>@Conditional</code><ul><li>条件装配，满足Conditional指定的条件进行注入。</li><li>Ctrl + H (Intellij IDEA) 打开@Conditional的实现类</li></ul></li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/@Conditional.png" alt="@Conditional"></p><ul><li>ConditionalOnMissingClass - 不存在某个类时注入</li><li>ConditionalOnBean - 存在某个Bean时注入</li><li>其余的根据名字可以判断含义</li></ul><hr><h5 id="2-2-2-原生配置文件引入"><a href="#2-2-2-原生配置文件引入" class="headerlink" title="2.2.2 原生配置文件引入"></a>2.2.2 原生配置文件引入</h5><ul><li><code>@ImportResource</code><ul><li>@ImportResource(“classpath:beans.xml”)导入Spring的配置文件</li><li>用于已经有大量Bean在xml文件中注入了，就使用此方式导入。可用于老项目更新迭代。</li></ul></li></ul><hr><h5 id="2-2-3-配置绑定"><a href="#2-2-3-配置绑定" class="headerlink" title="2.2.3 配置绑定"></a>2.2.3 配置绑定</h5><ul><li><p>1.<code>@ConfigurationProperties</code> <strong>+</strong> <code>@Component</code></p><ul><li><p>在实体类上加上注解 @Component 和 @ConfigurationProperties</p></li><li><p>@Component让实体类成为容器组件，才能让底层自动配置</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><ul><li>2.<code>@EnableConfigurationProperties</code> <strong>+</strong> <code>@ConfigurationProperties</code><ul><li>在配置类上加上@EnableConfigurationProperties，开启Car类的绑定功能</li><li>@ConfigurationProperties加载实体类上，prefix = “前缀”</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(Car.class)</span><br><span class="hljs-comment">//1、开启Car配置绑定功能</span><br><span class="hljs-comment">//2、把这个Car这个组件自动注册到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-自动配置原理"><a href="#2-3-自动配置原理" class="headerlink" title="2.3 自动配置原理"></a>2.3 自动配置原理</h3><h4 id="2-3-1-引导加载自动配置类"><a href="#2-3-1-引导加载自动配置类" class="headerlink" title="2.3.1 引导加载自动配置类"></a>2.3.1 引导加载自动配置类</h4><ul><li>在启动类MainApplication头部加上注解 <code>@SpringBootApplication</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;...&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>@SpringBootConfiguration</code><ul><li>最重要的就是 <code>@Configuration</code>，表明启动类MainApplication就是一个<strong>配置类</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;...&#125;<br></code></pre></div></td></tr></table></figure><ul><li><code>@ComponentScan</code></li></ul><blockquote><p>Configures component scanning directives for use with @Configuration classes. Provides support parallel with Spring XML’s <a href="context:component-scan">context:component-scan</a> element.<br>Either basePackageClasses or basePackages (or its alias value) may be specified to define specific packages to scan. If specific packages are not defined, scanning will occur from the package of the class that declares this annotation.</p></blockquote><ol><li>该注解相当于XML文件的<code>&lt;context:component-scan&gt;</code>配置</li><li>如果没有自定义扫描的包，默认扫描<strong>声明该注解的类所在包及其子包</strong>。所以启动类才应该与控制器包同级。</li></ol><ul><li><code>@EnableAutoConfiguration</code><ul><li>开启自动配置</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;...&#125;<br></code></pre></div></td></tr></table></figure><p>先看第一个注解：进入<code>@AutoConfigurationPackage</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="hljs-comment">//给容器中导入一个组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;...&#125;<br><span class="hljs-comment">//利用Registrar给容器中导入一系列组件</span><br><span class="hljs-comment">//将指定的一个包下的所有组件导入进来 -&gt; MainApplication 所在包下。</span><br></code></pre></div></td></tr></table></figure><blockquote><p>Registers packages with AutoConfigurationPackages. When no base packages or base package classes are specified, the package of the annotated class is registered.</p></blockquote><ol><li>向AutoConfigurationPackages注册包</li><li>如果未指定基包或基包类，则会注册带注释类的包。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoConfigurationPackages</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>Class for storing auto-configuration packages for reference later (e.g. by JPA entity scanner).</p></blockquote><ol><li>用于存储自动配置包以供以后参考的类（例如，通过JPA实体扫描仪）</li></ol><p>再看到<code>AutoConfigurationPackages.Registrar.class</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Registrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span>, <span class="hljs-title">DeterminableImports</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>      register(registry, <span class="hljs-keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]));<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">determineImports</span><span class="hljs-params">(AnnotationMetadata metadata)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> Collections.singleton(<span class="hljs-keyword">new</span> PackageImports(metadata));<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>给 <code>register</code>方法打断点，并启动程序。</p><p>计算 <code>new PackageImports(metadata).getPackageNames()</code>的值，(Alt + F8 Intellij IDEA)</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/register%E6%96%AD%E7%82%B9%E4%BF%A1%E6%81%AF.png" alt="register断点信息"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/%E8%AE%A1%E7%AE%97%E5%8C%85%E5%90%8D.png" alt="计算包名"></p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/%E5%8C%85%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="包目录结构"></p><ol><li>metedata元数据，introspectedClass是启动类。因为该注解是加在启动类上的。</li><li>然后获得启动类所在的根目录报名，最后<code>toArray(new String[0])</code>，封装成一个数组注册。</li></ol><hr><p>然后是第二个注解：<code>@Import(AutoConfigurationImportSelector.class)</code></p><p>进入 <code>AutoConfigurationImportSelector</code>，重写了如下方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;<br>   <span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br>      <span class="hljs-keyword">return</span> NO_IMPORTS;<br>   &#125;<br>   AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);<br>   <span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</code> 给容器中批量导入一些组件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br>      <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>   &#125;<br>   AnnotationAttributes attributes = getAttributes(annotationMetadata);<br>   List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);<br>   configurations = removeDuplicates(configurations);<br>   Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>   checkExcludedClasses(configurations, exclusions);<br>   configurations.removeAll(exclusions);<br>   configurations = getConfigurationClassFilter().filter(configurations);<br>   fireAutoConfigurationImportEvents(configurations, exclusions);<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AutoConfigurationEntry(configurations, exclusions);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>获取所有需要导入到容器中的配置类。打断点观察：</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/%E8%8E%B7%E5%8F%96%E9%9C%80%E8%A6%81%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB.png" alt="获取需要的配置类"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;<br>   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),<br>         getBeanClassLoader());<br>   Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br>         + <span class="hljs-string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);<br>   <span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>通过 <code>SpringFactoriesLoader</code> 工厂类来加载这些配置类。</p></li><li><p><code>META-INF/spring.factories</code> 这个目录下有相应的配置内容。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;<br>    String factoryTypeName = factoryType.getName();<br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader) &#123;<br></code></pre></div></td></tr></table></figure><ul><li>利用工厂加载 Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件</li><li>默认扫描我们当前系统里面所有<code>META-INF/spring.factories</code>位置的文件</li><li>spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</li></ul><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/springFactories.png" alt="springFactories"></p><h4 id="2-3-2-按需开启自动配置项"><a href="#2-3-2-按需开启自动配置项" class="headerlink" title="2.3.2 按需开启自动配置项"></a>2.3.2 按需开启自动配置项</h4><p>虽然默认加载了很多自动配置类，但是这些自动配置类都会加上一些条件的注解。<code>@ConditionalOnClass</code>等 来限定它们的开启。</p><h4 id="2-3-3-修改默认配置"><a href="#2-3-3-修改默认配置" class="headerlink" title="2.3.3 修改默认配置"></a>2.3.3 修改默认配置</h4><ul><li><p>SpringBoot 先加载所有的自动配置类  <code>xxxxxAutoConfiguration</code></p></li><li><p>每个自动配置类<strong>按照条件</strong>进行生效，默认都会<strong>绑定配置文件指定的值</strong>。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><h4 id="2-3-4-实践"><a href="#2-3-4-实践" class="headerlink" title="2.3.4 实践"></a>2.3.4 实践</h4><ul><li><p>引入场景依赖</p></li><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li><p>查看自动配置了哪些（选做）</p></li><li><ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）</li></ul></li><li><p>是否需要修改</p></li><li><ul><li>参照文档修改配置项</li></ul></li><li><ul><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>自己分析。xxxxProperties绑定了配置文件的哪些。</li></ul></li></ul></li><li><ul><li>自定义加入或者替换组件</li></ul></li><li><ul><li><ul><li>@Bean、@Component。。。</li></ul></li></ul></li><li><ul><li>自定义器  <strong>XXXXXCustomizer</strong>；</li></ul></li></ul><h3 id="2-4-Web开发"><a href="#2-4-Web开发" class="headerlink" title="2.4 Web开发"></a>2.4 Web开发</h3><h4 id="2-4-1-SpringMVC自动配置概览"><a href="#2-4-1-SpringMVC自动配置概览" class="headerlink" title="2.4.1 SpringMVC自动配置概览"></a>2.4.1 SpringMVC自动配置概览</h4><p>在官网上有 SpringBOOT 整合 <strong>SpringMVC</strong> 相关的介绍。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration</a></p><blockquote><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p></li><li><ul><li>内容协商视图解析器和BeanName视图解析器</li></ul></li><li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p></li><li><ul><li>静态资源（包括webjars）</li></ul></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p></li><li><ul><li>自动注册 <code>Converter，GenericConverter，Formatter </code></li></ul></li><li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p></li><li><ul><li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p></li><li><ul><li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li></ul></li><li><p>Static <code>index.html</code> support.</p></li><li><ul><li>静态index.html 页支持</li></ul></li><li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p></li><li><ul><li>自定义 <code>Favicon</code>  </li></ul></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p></li><li><ul><li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li></ul></li></ul></blockquote><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p><strong>不用<code>@EnableWebMvc</code>注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p></blockquote><ul><li>@EnableWebMvc注解原理</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">...<br><span class="hljs-meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;...&#125;<br></code></pre></div></td></tr></table></figure><p><code>@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</code>，所以在@EnableWebMvc配置后，会自动加载<code>DelegatingWebMvcConfiguration.class</code>。而在<code>public class WebMvcAutoConfiguration</code>里面</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">....<br><span class="hljs-meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><p><code>@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</code> 这里表示如果<code>WebMvcConfigurationSupport</code>注入时，则<code>WebMvcAutoConfiguration</code>不会被开启。</p><p><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code>注入<code>DelegatingWebMvcConfiguration </code>同时也会注入父类<code>WebMvcConfigurationSupport</code>，所以最终的结论是：</p><ul><li>注入<code>@EnableWebMvc</code>会让WebMVC自定义配置失效</li></ul><blockquote><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong>，<strong>并且仍然保留Spring Boot MVC自定义设置。</strong></p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>使用</strong> <strong><code>@EnableWebMvc + @Configuration + DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p></blockquote><h4 id="2-4-2-功能分析"><a href="#2-4-2-功能分析" class="headerlink" title="2.4.2 功能分析"></a>2.4.2 功能分析</h4><h5 id="2-4-2-1-静态资源访问"><a href="#2-4-2-1-静态资源访问" class="headerlink" title="2.4.2.1 静态资源访问"></a>2.4.2.1 静态资源访问</h5><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content</a></p><blockquote><p>By default, Spring Boot serves static content from a directory called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>) in the classpath or from the root of the <code>ServletContext</code>. It uses the <code>ResourceHttpRequestHandler</code> from Spring MVC so that you can modify that behavior by adding your own <code>WebMvcConfigurer</code> and overriding the <code>addResourceHandlers</code> method.</p></blockquote><ul><li>静态资源默认访问路径<ul><li><code>/META-INF/resources/</code></li><li><code>/resources/</code></li><li><code>/static/</code></li><li><code>/public/</code></li><li>优先级顺序为：<strong>META-INF/resources &gt; resources &gt; static &gt; public</strong>, 一般来说 <code>public</code> 下放一些公共的资源比如 用户都会访问的 js 文件， <code>static</code> 放一些静态资源，如图片。<code>resources</code> 放一些上传upload文件。</li></ul></li><li>它使用Spring MVC中的<code>ResourceHttpRequestHandler</code>，这样您就可以通过添加自己的<code>WebMvcConfigurer</code>并重写<code>addResourceHandlers</code>方法来修改该行为。</li></ul><blockquote><p>By default, resources are mapped on <code>/**</code>, but you can tune that with the <code>spring.mvc.static-path-pattern</code> property. For instance, relocating all resources to <code>/resources/**</code> can be achieved as follows:</p></blockquote><hr><ul><li>可以修改资源访问的路径（项目resources下面的文件）</li></ul><blockquote><p>You can also customize the static resource locations by using the <code>spring.web.resources.static-locations</code> property (replacing the default values with a list of directory locations). The root Servlet context path, <code>&quot;/&quot;</code>, is automatically added as a location as well.</p></blockquote><ul><li>用了 <code>spring.web.resources.static-locations</code> 修改资源文件访问路径，则上面的四个默认的路径就会失效。</li></ul><hr><ul><li>默认情况下，资源映射到/** ，但可以使用<code>spring.mvc.static-path-pattern</code>来重新定位到 /resources/**。就是访问资源路径前面加一个前缀。（url）</li></ul><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/resources/**</span><br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">&quot;/resources/**&quot;</span><br></code></pre></div></td></tr></table></figure><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。</p><hr><ul><li>静态资源如果是在WebJars这个网站导入的，则下载的目录文件都有同一的路径格式，则从jar文件提供路径为<code>/webjars/**</code>的任何资源。</li></ul><p>In addition to the “standard” static resource locations mentioned earlier, a special case is made for <a href="https://www.webjars.org/">Webjars content</a>. Any resources with a path in <code>/webjars/**</code> are served from jar files if they are packaged in the Webjars format.</p><p>如导入jquery</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>  后面地址要按照依赖里面的包路径</p><h5 id="2-4-2-2-欢迎页"><a href="#2-4-2-2-欢迎页" class="headerlink" title="2.4.2.2 欢迎页"></a>2.4.2.2 欢迎页</h5><p>如下两种情况都会当作静态页处理。1 访问静态页文件 2 Controller进行资源跳转。</p><ol><li>静态资源路径下  index.html</li></ol><ul><li><p>可以配置静态资源路径</p></li><li><p>但是不可以配置<strong>静态资源的访问前缀</strong>。否则导致 index.html 不能被默认访问</p></li><li><p><code>spring.mvc.static-path-pattern</code> ❌❌❌</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">spring:<br>#  mvc:<br>#    <span class="hljs-keyword">static</span>-path-pattern: <span class="hljs-regexp">/res/</span>**   这个会导致welcome page功能失效<br><br>  resources:<br>    <span class="hljs-keyword">static</span>-locations: [<span class="hljs-keyword">classpath</span>:<span class="hljs-regexp">/haha/</span>]<br></code></pre></div></td></tr></table></figure><ol start="2"><li>controller能处理/index</li></ol><h5 id="2-4-2-3-自定义-Favicon"><a href="#2-4-2-3-自定义-Favicon" class="headerlink" title="2.4.2.3 自定义 Favicon"></a>2.4.2.3 自定义 Favicon</h5><p>favicon.ico 放在<strong>静态资源目录</strong>下即可。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#  mvc:</span><br><span class="hljs-comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span><br></code></pre></div></td></tr></table></figure><h5 id="2-4-2-4-静态资源配置原理"><a href="#2-4-2-4-静态资源配置原理" class="headerlink" title="2.4.2.4  静态资源配置原理"></a>2.4.2.4  静态资源配置原理</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">      ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><ul><li>✔ 是一个SERVLET应用</li><li>✔ 在WebMVC自动配置类导入之前已经导入<code>Servlet </code> <code>DispatcherServlet</code>  <code>WebMvcConfigurer</code></li><li>❌没导入 <code>WebMvcConfigurationSupport</code></li><li>✔ WebMvcAutoConfiguration <strong>执行</strong></li></ul><hr><ul><li>然后看到静态内部类 <code>WebMvcAutoConfigurationAdapter</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">...<br><span class="hljs-meta">@Import(EnableWebMvcConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfigurationAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><p><code>WebMvcProperties.class</code>和 <code>ResourceProperties.class</code>分别绑定前缀属性：<strong>spring.mvc</strong>, <strong>spring.resources</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcProperties</span> </span>&#123;...&#125;<br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceProperties</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><ul><li>只有一个有参构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WebMvcAutoConfigurationAdapter</span><span class="hljs-params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class="hljs-function"><span class="hljs-params">            ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="hljs-function"><span class="hljs-params">            ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="hljs-function"><span class="hljs-params">            ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="hljs-function"><span class="hljs-params">            ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;<br>        <span class="hljs-keyword">this</span>.mvcProperties = mvcProperties;<br>        <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>        <span class="hljs-keyword">this</span>.messageConvertersProvider = messageConvertersProvider;<br>        <span class="hljs-keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();<br>        <span class="hljs-keyword">this</span>.dispatcherServletPath = dispatcherServletPath;<br>        <span class="hljs-keyword">this</span>.servletRegistrations = servletRegistrations;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li>所有参数的值都会从<strong>容器</strong>中确定</li><li>ResourceProperties resourceProperties；获取和<strong>spring.resources</strong>绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties 获取和<strong>spring.mvc</strong>绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory Spring的 <strong>beanFactory</strong></li><li>HttpMessageConverters 找到所有的<strong>HttpMessageConverters</strong></li><li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的<strong>自定义器</strong>。</li><li>DispatcherServletPath  </li><li>ServletRegistrationBean   给应用注册Servlet、Filter….</li></ul><hr><ul><li><p>内部成员方法<code>addResourceHandlers</code>   —-&gt;  <strong>资源处理默认规则</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;<br>      logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>   Duration cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getPeriod();<br>   CacheControl cacheControl = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br>   <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>      customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>            .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>   &#125;<br>   String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();<br>   <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>      customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)<br>            .addResourceLocations(getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()))<br>            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>先在<code>if (!this.resourceProperties.isAddMappings())</code> 打断点</p></li></ul><p>进入<code>isAddMappings</code>方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAddMappings</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.addMappings;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Whether to enable default resource handling. 是否启用默认资源处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> addMappings = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 默认为true</span><br></code></pre></div></td></tr></table></figure><p>所以配置上：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">false</span>   <span class="hljs-string">禁用所有静态资源规则</span><br></code></pre></div></td></tr></table></figure><p>所以可以用这种方式禁用静态资源的访问</p><ul><li>中间获取了静态资源的缓存规则，包括缓存时间等</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Duration cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getPeriod();<br>CacheControl cacheControl = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Duration <span class="hljs-title">getPeriod</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.period;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Cache period for the resources served by the resource handler. If a duration</span><br><span class="hljs-comment"> * suffix is not specified, seconds will be used. Can be overridden by the</span><br><span class="hljs-comment"> * &#x27;spring.resources.cache.cachecontrol&#x27; properties.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@DurationUnit(ChronoUnit.SECONDS)</span><br><span class="hljs-keyword">private</span> Duration period;<br></code></pre></div></td></tr></table></figure><p>根据注释上的提示，可以，period单位是秒，在配置文件中可以自定义缓存时间</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">add-mappings:</span> <span class="hljs-literal">true</span> <span class="hljs-string">//</span> <span class="hljs-string">默认为true</span><br>    <span class="hljs-attr">cache:</span><br>      <span class="hljs-attr">period:</span> <span class="hljs-number">11000</span> <span class="hljs-string">//</span> <span class="hljs-string">单位s</span><br></code></pre></div></td></tr></table></figure><ul><li>第一个if，如果存在<code>/webjars/**</code>路径，则去 <code>/META-INF/resources/webjars/</code>下找资源，并配置好设置的缓存规则。这种方式就是在WebJars方式导入静态资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>   customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>         .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>         .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>如果不是webjars方式导入，则从resources目录下找资源</li></ul><p>先获取资源路径，默认路径就是 <code>/**</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStaticPathPattern</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.staticPathPattern;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Path pattern used for static resources.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String staticPathPattern = <span class="hljs-string">&quot;/**&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>接下来的代码与上面逻辑相同。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>   customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)<br>         .addResourceLocations(getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()))<br>         .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>进入<code>this.resourceProperties.getStaticLocations()</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.staticLocations;<br>&#125;<br><br><span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br><span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br></code></pre></div></td></tr></table></figure><p>就是默认的四个静态资源访问路径。</p><hr><ul><li>进入静态内部类<code>EnableWebMvcConfiguration</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResourceLoaderAware</span> </span>&#123;...&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,</span></span><br><span class="hljs-function"><span class="hljs-params">      FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;<br>   WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="hljs-keyword">new</span> WelcomePageHandlerMapping(<br>         <span class="hljs-keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),<br>         <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());<br>   welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>   welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());<br>   <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>welcomePageHandlerMapping</code>这个方法就是控制欢迎页。</p><p>进入<code>WelcomePageHandlerMapping</code>有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,<br>      ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;<br>   <span class="hljs-keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="hljs-string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;<br>      logger.info(<span class="hljs-string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());<br>      setRootViewName(<span class="hljs-string">&quot;forward:index.html&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;<br>      logger.info(<span class="hljs-string">&quot;Adding welcome page template: index&quot;</span>);<br>      setRootViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>要用欢迎页功能，路径必须是/**，欢迎页存在，走if</p></li><li><p>不能存在，走else if：调用Controller  /index</p></li></ul><hr><ul><li>Favicon</li></ul><p>浏览器会自动发送 /favicon.ico 请求获取图标，整个session期间不再获取</p><h4 id="2-4-3-请求参数处理"><a href="#2-4-3-请求参数处理" class="headerlink" title="2.4.3 请求参数处理"></a>2.4.3 请求参数处理</h4><h5 id="2-4-3-1-请求映射"><a href="#2-4-3-1-请求映射" class="headerlink" title="2.4.3.1 请求映射"></a>2.4.3.1 请求映射</h5><ul><li><p>@xxxMapping；</p></li><li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p></li><li><ul><li>以前：**/getUser  获取用户   /deleteUser 删除用户   /editUser  修改用户    /saveUser 保存用户</li><li>现在： /user   GET-<strong>获取</strong>用户   DELETE-<strong>删除</strong>用户   PUT-<strong>修改</strong>用户     POST-<strong>保存</strong>用户</li><li>核心Filter：<code>HiddenHttpMethodFilter</code></li></ul></li><li><ul><li><ul><li>用法： <strong>表单</strong>method=post，隐藏域 _method=put</li><li>SpringBoot中手动开启</li></ul></li></ul></li></ul><p>因为<form>表单请求方式method只有 GET 和 POST，所以要让过滤器HiddenHttpMethodFilter将请求参数名替换。</p><p>四种测试方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET-张三&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveUser</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST-张三&quot;</span>;<br>&#125;<br><br><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">putUser</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PUT-张三&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DELETE-张三&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>hiddenHttpMethodFilter</code>来控制method的请求方式。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> OrderedHiddenHttpMethodFilter <span class="hljs-title">hiddenHttpMethodFilter</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OrderedHiddenHttpMethodFilter();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderedHiddenHttpMethodFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HiddenHttpMethodFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderedFilter</span></span><br></code></pre></div></td></tr></table></figure><p>父类<code>HiddenHttpMethodFilter</code>里的方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        HttpServletRequest requestToUse = request;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(<span class="hljs-string">&quot;javax.servlet.error.exception&quot;</span>) == <span class="hljs-keyword">null</span>) &#123;<br>            String paramValue = request.getParameter(<span class="hljs-keyword">this</span>.methodParam);<br>            <span class="hljs-keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;<br>                String method = paramValue.toUpperCase(Locale.ENGLISH);<br>                <span class="hljs-keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;<br>                    requestToUse = <span class="hljs-keyword">new</span> HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        filterChain.doFilter((ServletRequest)requestToUse, response);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p><code>HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);</code>这里实现了method的转换，重写了getMethod().</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpMethodRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String method;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpMethodRequestWrapper</span><span class="hljs-params">(HttpServletRequest request, String method)</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>(request);<br>            <span class="hljs-keyword">this</span>.method = method;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMethod</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.method;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>表单提交会带上<strong>_method=PUT</strong></p></li><li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p><ul><li><p>请求是否正常，并且是POST</p><ul><li><p>获取到<strong>_method</strong>的值。</p></li><li><p>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></p></li><li><p><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></p></li><li><p><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></p></li></ul></li></ul></li></ul><p><strong>Rest使用客户端工具，</strong></p><ul><li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#开启页面表单的Rest功能</span><br></code></pre></div></td></tr></table></figure><h6 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h6><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/DispatcherServlet.png" alt="DispatcherServlet"></p><p>SpringMVC功能最终都会经过 org.springframework.web.servlet.DispatcherServlet 的 <code>doDispatch</code>方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HttpServletRequest processedRequest = request;<br>        HandlerExecutionChain mappedHandler = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">boolean</span> multipartRequestParsed = <span class="hljs-keyword">false</span>;<br><br>        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ModelAndView mv = <span class="hljs-keyword">null</span>;<br>            Exception dispatchException = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                processedRequest = checkMultipart(request);<br>                multipartRequestParsed = (processedRequest != request);<br><br>                <span class="hljs-comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span><br>                mappedHandler = getHandler(processedRequest);<br>                <br>                <span class="hljs-comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/handlerMappings.png" alt="handlerMappings"></p><p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/mappingRegistry.png" alt="mappingRegistry"></p><p>所有的请求映射都在HandlerMapping中。</p><ul><li><p>SpringBoot自动配置欢迎页的 <code>WelcomePageHandlerMapping</code> 。访问 /能访问到index.html；</p></li><li><p>SpringBoot自动配置了默认 的 <code>RequestMappingHandlerMapping</code></p></li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p></li><li><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.handlerMappings != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-keyword">this</span>.handlerMappings) &#123;<br>            HandlerExecutionChain handler = mapping.getHandler(request);<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> handler;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>默认使用的是 _method 这个名称的变量，用于携带请求方式<ul><li>自定义变量名称要自定义 Filter</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span></span>&#123;<br>    <span class="hljs-comment">//自定义filter</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HiddenHttpMethodFilter <span class="hljs-title">hiddenHttpMethodFilter</span><span class="hljs-params">()</span></span>&#123;<br>        HiddenHttpMethodFilter methodFilter = <span class="hljs-keyword">new</span> HiddenHttpMethodFilter();<br>        methodFilter.setMethodParam(<span class="hljs-string">&quot;_m&quot;</span>);<br>        <span class="hljs-keyword">return</span> methodFilter;<br>    &#125;    <br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-4-3-2-普通参数与基本注解"><a href="#2-4-3-2-普通参数与基本注解" class="headerlink" title="2.4.3.2 普通参数与基本注解"></a>2.4.3.2 普通参数与基本注解</h5><ul><li><code>@PathVariable</code> 路径变量</li><li><code>@RequestHeader</code> 获取请求头</li><li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a=1&amp;b=2）</li><li><code>@CookieValue</code> 获取Cookie值</li><li><code>@RequestAttribute</code> 获取request域属性</li><li><code>@RequestBody</code> 获取请求体[POST]</li><li><code>@MatrixVariable</code> 矩阵变量</li><li><code>@ModelAttribute</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterTestController</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//  car/2/owner/zhangsan</span><br>    <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-comment">//        map.put(&quot;id&quot;,id);</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,name);</span><br><span class="hljs-comment">//        map.put(&quot;pv&quot;,pv);</span><br><span class="hljs-comment">//        map.put(&quot;userAgent&quot;,userAgent);</span><br><span class="hljs-comment">//        map.put(&quot;headers&quot;,header);</span><br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,age);<br>        map.put(<span class="hljs-string">&quot;inters&quot;</span>,inters);<br>        map.put(<span class="hljs-string">&quot;params&quot;</span>,params);<br>        map.put(<span class="hljs-string">&quot;_ga&quot;</span>,_ga);<br>        System.out.println(cookie.getName()+<span class="hljs-string">&quot;===&gt;&quot;</span>+cookie.getValue());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span></span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;content&quot;</span>,content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span><br>    <span class="hljs-comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span><br>    <span class="hljs-comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span><br>    <span class="hljs-comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span><br>    <span class="hljs-comment">//3、矩阵变量必须有url路径变量才能被解析</span><br>    <span class="hljs-meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">carsSell</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;low&quot;</span>,low);<br>        map.put(<span class="hljs-string">&quot;brand&quot;</span>,brand);<br>        map.put(<span class="hljs-string">&quot;path&quot;</span>,path);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">// /boss/1;age=20/2;age=10</span><br>    <span class="hljs-meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">boss</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class="hljs-function"><span class="hljs-params">                    <span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;bossAge&quot;</span>,bossAge);<br>        map.put(<span class="hljs-string">&quot;empAge&quot;</span>,empAge);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-5-数据访问"><a href="#2-5-数据访问" class="headerlink" title="2.5 数据访问"></a>2.5 数据访问</h3><h4 id="2-5-1-SQL"><a href="#2-5-1-SQL" class="headerlink" title="2.5.1 SQL"></a>2.5.1 SQL</h4><h6 id="1、数据源的自动配置-HikariDataSource"><a href="#1、数据源的自动配置-HikariDataSource" class="headerlink" title="1、数据源的自动配置 - HikariDataSource"></a>1、数据源的自动配置 - HikariDataSource</h6><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/hypocrite30/ImgBed/raw/master/img/SpringBoot/jdbc-starter.png" alt="jdbc-starter"></p><p>数据库驱动？</p><p>为什么导入JDBC场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。</p><p>数据库版本和驱动版本对应</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">默认版本：<span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>想要修改版本<br>1、直接依赖引入具体版本（maven的就近依赖原则）<br>2、重新声明版本（maven的属性的就近优先原则）<br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="2、分析自动配置"><a href="#2、分析自动配置" class="headerlink" title="2、分析自动配置"></a>2、分析自动配置</h5><ul><li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p></li><li><ul><li>修改数据源相关的配置：<strong>spring.datasource</strong></li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong></li><li>底层配置好的连接池是：<strong>HikariDataSource</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Conditional(PooledDataSourceCondition.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span><br><span class="hljs-meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span><br><span class="hljs-meta">DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,</span><br><span class="hljs-meta">DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PooledDataSourceConfiguration</span></span><br></code></pre></div></td></tr></table></figure><ul><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p></li><li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate的自动配置，可以来对数据库进行crud</strong></p></li><li><ul><li>可以修改这个配置项@ConfigurationProperties(prefix = <strong>“spring.jdbc”</strong>) 来修改JdbcTemplate</li><li>@Bean@Primary   JdbcTemplate；容器中有这个组件</li></ul></li><li><p>JndiDataSourceAutoConfiguration： jndi的自动配置</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p></li></ul><h5 id="3、修改配置项"><a href="#3、修改配置项" class="headerlink" title="3、修改配置项"></a>3、修改配置项</h5><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db_account</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></div></td></tr></table></figure><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boot05WebAdminApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span><br><span class="hljs-comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span><br>        Long aLong = jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);<br>        log.info(<span class="hljs-string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>鸣谢：</p><p><a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></p><p><a href="https://yuque.com/atguigu/springboot">https://yuque.com/atguigu/springboot</a></p><p><a href="https://blog.csdn.net/weixin_40753536/article/details/81285046">https://blog.csdn.net/weixin_40753536/article/details/81285046</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm</title>
    <link href="/2021/03/27/Algorithm/Algorithm/"/>
    <url>/2021/03/27/Algorithm/Algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="🦴Algorithm"><a href="#🦴Algorithm" class="headerlink" title="🦴Algorithm"></a>🦴Algorithm</h1><p> 📕 Juejin：<a href="https://juejin.cn/user/668945886743486">https://juejin.cn/user/668945886743486</a> 附解题详解</p><p>💻 GitHub：<a href="https://github.com/hypocrite30/LeetCode">https://github.com/hypocrite30/LeetCode</a> 代码仓库</p><p><strong>欢迎关注，交流学习。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos 6无法使用yum解决办法</title>
    <link href="/2021/03/27/Linux/Centos%206%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8yum%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2021/03/27/Linux/Centos%206%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8yum%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Centos-6无法使用yum解决办法"><a href="#Centos-6无法使用yum解决办法" class="headerlink" title="Centos 6无法使用yum解决办法"></a>Centos 6无法使用yum解决办法</h1><p>CentOS 6已经随着2020年11月的结束进入了EOL（Reaches End of Life），不过有一些老设备依然需要支持，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了最后一个版本的镜像，只是这个镜像不会再有更新了</p><p>官方便在12月2日正式将CentOS 6相关的软件源移出了官方源，随之而来逐级镜像也会陆续将其删除。</p><p>不过有一些老设备依然需要维持在当前系统，CentOS官方也给这些还不想把CentOS 6扔进垃圾堆的用户保留了各个版本软件源的镜像，只是这个软件源不会再有更新了。</p><h2 id="一、一键修复"><a href="#一、一键修复" class="headerlink" title="一、一键修复"></a>一、一键修复</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sed -i <span class="hljs-string">&quot;s|enabled=1|enabled=0|g&quot;</span> <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br>mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.backup<br>curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Aliyun.repo <br>yum clean all<br>yum makecache<br></code></pre></div></td></tr></table></figure><h2 id="二、手动修复"><a href="#二、手动修复" class="headerlink" title="二、手动修复"></a>二、手动修复</h2><p>首先把fastestmirrors关了</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#编辑</span><br>vi <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br><span class="hljs-comment">#修改</span><br>enable=<span class="hljs-number">0</span><br><span class="hljs-comment">#或者执行以下命令</span><br>sed -i <span class="hljs-string">&quot;s|enabled=1|enabled=0|g&quot;</span> <span class="hljs-regexp">/etc/yum</span><span class="hljs-regexp">/pluginconf.d/</span>fastestmirror.conf<br></code></pre></div></td></tr></table></figure><p>先把之前的repo挪到备份，然后下面两个二选一</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.bak<br></code></pre></div></td></tr></table></figure><p>替换为官方Vault源(海外服务器用)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Official.repo<br></code></pre></div></td></tr></table></figure><p>或者替换为阿里云Vault镜像(国内服务器用)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl -o <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo https:/</span><span class="hljs-regexp">/www.xmpan.com/</span>Centos-<span class="hljs-number">6</span>-Vault-Aliyun.repo<br></code></pre></div></td></tr></table></figure><blockquote><p>以上转自：熊猫畔</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java手动实现迭代器。(LeetCode 341)</title>
    <link href="/2021/03/23/JavaSE/Java%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%82(LeetCode%20341)/"/>
    <url>/2021/03/23/JavaSE/Java%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%82(LeetCode%20341)/</url>
    
    <content type="html"><![CDATA[<h1 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a>341. 扁平化嵌套列表迭代器</h1><hr><p><a href="https://imgtu.com/i/6T7qHO"><img src="https://z3.ax1x.com/2021/03/23/6T7qHO.png" alt="leetCode 341"></a></p><p><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">https://leetcode-cn.com/problems/flatten-nested-list-iterator/</a></p><ul><li>先声明 <code>NestedInteger</code> 的结构（题目给出）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NestedInteger</span> </span>&#123;<br><br>    <span class="hljs-comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isInteger</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span><br>    <span class="hljs-comment">// Return null if this NestedInteger holds a nested list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span><br>    <span class="hljs-comment">// Return null if this NestedInteger holds a single integer</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;NestedInteger&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="迭代器（效率最高）"><a href="#迭代器（效率最高）" class="headerlink" title="迭代器（效率最高）"></a>迭代器（效率最高）</h2><ul><li>手动遍历，将遍历结果存在集合中，然后生成迭代器，其他操作基于此迭代器即可。</li><li>遍历方式是DFS，因为此结构可以联系到数据结构中的 <code>树</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use Java Iterator</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Iterator&lt;Integer&gt; iterator;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (NestedInteger node : nestedList) &#123;<br>            DFS(node, list);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.iterator = list.iterator(); <span class="hljs-comment">// all the operation use list&#x27;s iterator</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> iterator.next();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> iterator.hasNext();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DFS get every element into List res;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(NestedInteger node, List&lt;Integer&gt; res)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node.isInteger()) &#123;<br>            res.add(node.getInteger());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (NestedInteger child : node.getList()) &#123;<br>            DFS(child, res);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="队列-DFS（用队列实现-Iterator）"><a href="#队列-DFS（用队列实现-Iterator）" class="headerlink" title="队列 + DFS（用队列实现 Iterator）"></a>队列 + DFS（用队列实现 Iterator）</h2><ul><li>道理同上，DFS手动遍历，将遍历结果存在队列中</li><li>用队列手动实现 <code>iterator</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use DFS and Queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> ArrayDeque&lt;Integer&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        DFS(nestedList);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasNext() ? queue.pollFirst() : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> !queue.isEmpty();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * DFS the nestedList, offer the elements into the queue</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (NestedInteger elem : nestedList) &#123;<br>            <span class="hljs-keyword">if</span> (elem.isInteger()) &#123; <span class="hljs-comment">// elem is Integer, offer the queue</span><br>                queue.addLast(elem.getInteger());<br>            &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// elem is List, DFS the list and offer the elements into queue</span><br>                DFS(elem.getList());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="栈-递归-Stack-Recursion"><a href="#栈-递归-Stack-Recursion" class="headerlink" title="栈 + 递归 (Stack + Recursion)"></a>栈 + 递归 (Stack + Recursion)</h2><ul><li>不同于队列的是，队列要在初始化阶段，将遍历的结果全部处理好，最后按照顺序进行操作即可。</li><li>利用栈的思想是，先将这些 <code>NestedInteger</code>按顺序（倒序）存放在栈中，而要使用里面的元素时，再一步步的<strong>拆封</strong>出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * use Stack and Recursion</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    Deque&lt;NestedInteger&gt; stack = <span class="hljs-keyword">new</span> ArrayDeque&lt;NestedInteger&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nestedList.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            stack.push(nestedList.get(i));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hasNext() ? stack.pop().getInteger() : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// stack not empty, judge the peek elem&#x27;s type(List/Integer)</span><br>            NestedInteger elem = stack.peek();<br>            <span class="hljs-keyword">if</span> (elem.isInteger()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// peek elem is list, iterate the list to push elem into the stack</span><br>                elem = stack.pop();<br>                List&lt;NestedInteger&gt; list = elem.getList();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                    stack.push(list.get(i));<br>                &#125;<br>                <span class="hljs-keyword">return</span> hasNext();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-plus</title>
    <link href="/2021/03/20/SSM/mybatis-plus/"/>
    <url>/2021/03/20/SSM/mybatis-plus/</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h3><p>国产的开源框架，基于 MyBatis</p><p>核心功能就是简化 MyBatis 的开发，提高效率。</p><h3 id="MyBatis-Plus-快速上手"><a href="#MyBatis-Plus-快速上手" class="headerlink" title="MyBatis Plus 快速上手"></a>MyBatis Plus 快速上手</h3><p>Spring Boot(2.3.0) + MyBatis Plus（国产的开源框架，并没有接入到 Spring 官方孵化器中）</p><p>1、创建 Maven 工程</p><p><a href="https://imgtu.com/i/cAs0KO"><img src="https://z3.ax1x.com/2021/03/31/cAs0KO.png" alt="cAs0KO.png"></a></p><p>2、pom.xml 引入 MyBatis Plus 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、创建实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、创建 Mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>5、application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></div></td></tr></table></figure><p>6、启动类需要添加 @MapperScan(“mapper所在的包”)，否则无法加载 Mppaer bean。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.southwind.mybatisplus.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisplusApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MybatisplusApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>7、测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper mapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        mapper.selectList(<span class="hljs-keyword">null</span>).forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><blockquote><p>@TableName</p></blockquote><p>映射数据库的表名</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>@TableId</p></blockquote><p>设置主键映射，value 映射主键字段名</p><p>type 设置主键类型，主键的生成策略，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">AUTO(<span class="hljs-number">0</span>),<br>NONE(<span class="hljs-number">1</span>),<br>INPUT(<span class="hljs-number">2</span>),<br>ASSIGN_ID(<span class="hljs-number">3</span>),<br>ASSIGN_UUID(<span class="hljs-number">4</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>ID_WORKER(<span class="hljs-number">3</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>ID_WORKER_STR(<span class="hljs-number">3</span>),<br><span class="hljs-comment">/** <span class="hljs-doctag">@deprecated</span> */</span><br><span class="hljs-meta">@Deprecated</span><br>UUID(<span class="hljs-number">4</span>);<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增</td></tr><tr><td>NONE</td><td>MP set 主键，雪花算法实现</td></tr><tr><td>INPUT</td><td>需要开发者手动赋值</td></tr><tr><td>ASSIGN_ID</td><td>MP 分配 ID，Long、Integer、String</td></tr><tr><td>ASSIGN_UUID</td><td>分配 UUID，Strinig</td></tr></tbody></table><p>INPUT 如果开发者没有手动赋值，则数据库通过自增的方式给主键赋值，如果开发者手动赋值，则存入该值。</p><p>AUTO 默认就是数据库自增，开发者无需赋值。</p><p>ASSIGN_ID MP 自动赋值，雪花算法。</p><p>ASSIGN_UUID 主键的数据类型必须是 String，自动生成 UUID 进行赋值</p><blockquote><p>@TableField</p></blockquote><p>映射非主键字段，value 映射字段名</p><p>exist 表示是否为数据库字段 false，如果实体类中的成员变量在数据库中没有对应的字段，则可以使用 exist，VO、DTO</p><p>select 表示是否查询该字段</p><p>fill 表示是否自动填充，将对象存入数据库的时候，由 MyBatis Plus 自动给某些字段赋值，create_time、update_time</p><p>1、给表添加 create_time、update_time 字段</p><p>2、实体类中添加成员变量</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、创建自动填充处理器</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.handler;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>@Version</p></blockquote><p>标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功。</p><p>version = 2</p><p>线程 1:update … set version = 2  where version = 1</p><p>线程2 ：update … set version = 2 where version = 1</p><p>1、数据库表添加 version 字段，默认值为 1</p><p>2、实体类添加 version 成员变量，并且添加 @Version </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、注册配置类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>@EnumValue</p></blockquote><p>1、通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.enums;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">StatusEnum</span> </span>&#123;<br>    WORK(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;上班&quot;</span>),<br>    REST(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;休息&quot;</span>);<br><br>    StatusEnum(Integer code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@EnumValue</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>    <span class="hljs-keyword">private</span> StatusEnum status;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">type-enums-package:</span> <br>  <span class="hljs-string">com.southwind.mybatisplus.enums</span><br></code></pre></div></td></tr></table></figure><p>2、实现接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.enums;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">AgeEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IEnum</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    ONE(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;一岁&quot;</span>),<br>    TWO(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;两岁&quot;</span>),<br>    THREE(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;三岁&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    AgeEnum(Integer code, String msg) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.code;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>@TableLogic</p></blockquote><p>映射逻辑删除</p><p>1、数据表添加 deleted 字段</p><p>2、实体类添加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.AgeEnum;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,select = false)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> AgeEnum age;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>    <span class="hljs-meta">@TableField(value = &quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> StatusEnum statusEnum;<br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Integer deleted;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、application.yml 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">global-config:</span><br>  <span class="hljs-attr">db-config:</span><br>    <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//mapper.selectList(null);</span><br>QueryWrapper wrapper = <span class="hljs-keyword">new</span> QueryWrapper();<br><span class="hljs-comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(&quot;name&quot;,&quot;小红&quot;);</span><br><span class="hljs-comment">//        map.put(&quot;age&quot;,3);</span><br><span class="hljs-comment">//        wrapper.allEq(map);</span><br><span class="hljs-comment">//        wrapper.gt(&quot;age&quot;,2);</span><br><span class="hljs-comment">//        wrapper.ne(&quot;name&quot;,&quot;小红&quot;);</span><br><span class="hljs-comment">//        wrapper.ge(&quot;age&quot;,2);</span><br><br><span class="hljs-comment">//like &#x27;%小&#x27;</span><br><span class="hljs-comment">//        wrapper.likeLeft(&quot;name&quot;,&quot;小&quot;);</span><br><span class="hljs-comment">//like &#x27;小%&#x27;</span><br><span class="hljs-comment">//        wrapper.likeRight(&quot;name&quot;,&quot;小&quot;);</span><br><br><span class="hljs-comment">//inSQL</span><br><span class="hljs-comment">//        wrapper.inSql(&quot;id&quot;,&quot;select id from user where id &lt; 10&quot;);</span><br><span class="hljs-comment">//        wrapper.inSql(&quot;age&quot;,&quot;select age from user where age &gt; 3&quot;);</span><br><br><span class="hljs-comment">//        wrapper.orderByDesc(&quot;age&quot;);</span><br><br><span class="hljs-comment">//        wrapper.orderByAsc(&quot;age&quot;);</span><br><span class="hljs-comment">//        wrapper.having(&quot;id &gt; 8&quot;);</span><br><br>mapper.selectList(wrapper).forEach(System.out::println);<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//        System.out.println(mapper.selectById(7));</span><br><span class="hljs-comment">//        mapper.selectBatchIds(Arrays.asList(7,8,9)).forEach(System.out::println);</span><br><br><span class="hljs-comment">//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理</span><br><span class="hljs-comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(&quot;id&quot;,7);</span><br><span class="hljs-comment">//        mapper.selectByMap(map).forEach(System.out::println);</span><br><br>QueryWrapper wrapper = <span class="hljs-keyword">new</span> QueryWrapper();<br>wrapper.eq(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">////        System.out.println(mapper.selectCount(wrapper));</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //将查询的结果集封装到Map中</span><br><span class="hljs-comment">//        mapper.selectMaps(wrapper).forEach(System.out::println);</span><br><span class="hljs-comment">//        System.out.println(&quot;-------------------&quot;);</span><br><span class="hljs-comment">//        mapper.selectList(wrapper).forEach(System.out::println);</span><br><br><span class="hljs-comment">//分页查询</span><br><span class="hljs-comment">//        Page&lt;User&gt; page = new Page&lt;&gt;(2,2);</span><br><span class="hljs-comment">//        Page&lt;User&gt; result = mapper.selectPage(page,null);</span><br><span class="hljs-comment">//        System.out.println(result.getSize());</span><br><span class="hljs-comment">//        System.out.println(result.getTotal());</span><br><span class="hljs-comment">//        result.getRecords().forEach(System.out::println);</span><br><br><span class="hljs-comment">//        Page&lt;Map&lt;String,Object&gt;&gt; page = new Page&lt;&gt;(1,2);</span><br><span class="hljs-comment">//        mapper.selectMapsPage(page,null).getRecords().forEach(System.out::println);</span><br><br><span class="hljs-comment">//        mapper.selectObjs(null).forEach(System.out::println);</span><br><br><br>System.out.println(mapper.selectOne(wrapper));<br></code></pre></div></td></tr></table></figure><h3 id="自定义-SQL（多表关联查询）"><a href="#自定义-SQL（多表关联查询）" class="headerlink" title="自定义 SQL（多表关联查询）"></a>自定义 SQL（多表关联查询）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductVO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer category;<br>    <span class="hljs-keyword">private</span> Integer count;<br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-keyword">private</span> Integer userId;<br>    <span class="hljs-keyword">private</span> String userName;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.ProductVO;<br><span class="hljs-keyword">import</span> com.southwind.mybatisplus.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select p.*,u.name userName from product p,user u where p.user_id = u.id and u.id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">List&lt;ProductVO&gt; <span class="hljs-title">productList</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User user = <span class="hljs-keyword">new</span> User();<br>user.setTitle(<span class="hljs-string">&quot;小明&quot;</span>);<br>user.setAge(<span class="hljs-number">22</span>);<br>mapper.insert(user);<br>System.out.println(user);<br></code></pre></div></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//mapper.deleteById(1);</span><br><span class="hljs-comment">//        mapper.deleteBatchIds(Arrays.asList(7,8));</span><br><span class="hljs-comment">//        QueryWrapper wrapper = new QueryWrapper();</span><br><span class="hljs-comment">//        wrapper.eq(&quot;age&quot;,14);</span><br><span class="hljs-comment">//        mapper.delete(wrapper);</span><br><br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">10</span>);<br>mapper.deleteByMap(map);<br></code></pre></div></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>        <span class="hljs-regexp">//u</span>pdate ... version = <span class="hljs-number">3</span> where version = <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>        User user = mapper.selectById(<span class="hljs-number">7</span>);<br><span class="hljs-regexp">//</span>        user.setTitle(<span class="hljs-string">&quot;一号&quot;</span>);<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>        <span class="hljs-regexp">//u</span>pdate ... version = <span class="hljs-number">3</span> where version = <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>        User user1 = mapper.selectById(<span class="hljs-number">7</span>);<br><span class="hljs-regexp">//</span>        user1.setTitle(<span class="hljs-string">&quot;二号&quot;</span>);<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>        mapper.updateById(user1);<br><span class="hljs-regexp">//</span>        mapper.updateById(user);<br><br>User user = mapper.selectById(<span class="hljs-number">1</span>);<br>user.setTitle(<span class="hljs-string">&quot;小红&quot;</span>);<br>QueryWrapper wrapper = new QueryWrapper();<br>wrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">22</span>);<br>mapper.update(user,wrapper);<br></code></pre></div></td></tr></table></figure><h3 id="MyBatisPlus-自动生成"><a href="#MyBatisPlus-自动生成" class="headerlink" title="MyBatisPlus 自动生成"></a>MyBatisPlus 自动生成</h3><p>根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller</p><p>1、pom.xml 导入 MyBatis Plus Generator</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1.tmp<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Velocity（默认）、Freemarker、Beetl</p><p>2、启动类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.southwind.mybatisplus;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建generator对象</span><br>        AutoGenerator autoGenerator = <span class="hljs-keyword">new</span> AutoGenerator();<br>        <span class="hljs-comment">//数据源</span><br>        DataSourceConfig dataSourceConfig = <span class="hljs-keyword">new</span> DataSourceConfig();<br>        dataSourceConfig.setDbType(DbType.MYSQL);<br>        dataSourceConfig.setUrl(<span class="hljs-string">&quot;jdbc:mysql://ip:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>);<br>        dataSourceConfig.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSourceConfig.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSourceConfig.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        autoGenerator.setDataSource(dataSourceConfig);<br>        <span class="hljs-comment">//全局配置</span><br>        GlobalConfig globalConfig = <span class="hljs-keyword">new</span> GlobalConfig();<br>        globalConfig.setOutputDir(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        globalConfig.setOpen(<span class="hljs-keyword">false</span>);<br>        globalConfig.setAuthor(<span class="hljs-string">&quot;southwind&quot;</span>);<br>        globalConfig.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<br>        autoGenerator.setGlobalConfig(globalConfig);<br>        <span class="hljs-comment">//包信息</span><br>        PackageConfig packageConfig = <span class="hljs-keyword">new</span> PackageConfig();<br>        packageConfig.setParent(<span class="hljs-string">&quot;com.southwind.mybatisplus&quot;</span>);<br>        packageConfig.setModuleName(<span class="hljs-string">&quot;generator&quot;</span>);<br>        packageConfig.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        packageConfig.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        packageConfig.setServiceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>);<br>        packageConfig.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        packageConfig.setEntity(<span class="hljs-string">&quot;entity&quot;</span>);<br>        autoGenerator.setPackageInfo(packageConfig);<br>        <span class="hljs-comment">//配置策略</span><br>        StrategyConfig strategyConfig = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategyConfig.setEntityLombokModel(<span class="hljs-keyword">true</span>);<br>        strategyConfig.setNaming(NamingStrategy.underline_to_camel);<br>        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);<br>        autoGenerator.setStrategy(strategyConfig);<br><br>        autoGenerator.execute();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>来自：<a href="https://space.bilibili.com/434617924">https://space.bilibili.com/434617924</a></p><p><a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-9.28</title>
    <link href="/2021/03/20/SSM/mybatis/"/>
    <url>/2021/03/20/SSM/mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境：</p><ul><li>JDK1.8</li><li>Mysql 5.7</li><li>maven 3.6.1</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>Mysql</li><li>Java基础</li><li>Maven</li><li>Junit</li></ul><p>SSM框架：配置文件的。  最好的方式：看官网文档；</p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><div align=center><img src="https://z3.ax1x.com/2021/03/31/cAwfYV.png" alt="cAwfYV.png" border="0" /></div><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持定制化 SQL、存储过程以及高级映射。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到Github。</li></ul><p>如何获得Mybatis？</p><ul><li><p>maven仓库：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库(Jdbc)，io文件持久化。</li><li>生活：冷藏. 罐头。</li></ul><p><strong>为什么需要需要持久化？</strong></p><ul><li><p>有一些对象，不能让他丢掉。</p></li><li><p>内存太贵了</p></li></ul><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显。</li></ul><h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul><li>帮助程序猿将数据存入到数据库中。</li><li>方便</li><li>传统的JDBC代码太复杂了。简化。框架。自动化。</li><li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li><li>优点：<ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><p><strong>最重要的一点：使用的人多！</strong></p><p>Spring   SpringMVC    SpringBoot</p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p><h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CREATE DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br>CREATE TABLE `user`(<br>  `id` INT(<span class="hljs-number">20</span>) NOT NULL PRIMARY KEY,<br>  `name` VARCHAR(<span class="hljs-number">30</span>) DEFAULT NULL,<br>  `pwd` VARCHAR(<span class="hljs-number">30</span>) DEFAULT NULL<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>INSERT INTO `user`(`id`,`name`,`pwd`) VALUES <br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;狂神&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123890&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>新建项目</p><ol><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">   <br><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3></li></ol><ul><li><p>编写mybatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//sqlSessionFactory --&gt; sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span><br>    <span class="hljs-comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br>        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">                <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">                <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.dao.UserDao&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--select查询语句--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>       select * from mybatis.user<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3></li></ul><p>注意点：</p><p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件中注册 mappers</p><ul><li><p>junit测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//第一步：获得SqlSession对象</span><br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br><br>    <span class="hljs-comment">//方式一：getMapper</span><br>    UserDao userDao = sqlSession.getMapper(UserDao.class);<br>    List&lt;User&gt; userList = userDao.getUserList();<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//关闭SqlSession</span><br>    sqlSession.close();<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul><p>你们可以能会遇到的问题：</p><ol><li>配置文件没有注册</li><li>绑定接口错误。</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ol><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p><h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p><ul><li>id : 就是对应的namespace中的方法名；</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType ： 参数类型！</li></ul><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据ID查询用户</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span> resultType=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;<br>        select * from mybatis.user where id = #&#123;id&#125;<br>&lt;/select&gt;<br><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>   <br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>   <br>    User user = mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>   <br>    sqlSession.close();<br>&#125;<br>   <br></code></pre></div></td></tr></table></figure><h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3></li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from mybatis.user where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意点：</p><ul><li>增删改需要提交事务！</li></ul><h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul><li>标签不要匹配错</li><li>resource 绑定mapper，需要使用路径！</li><li>程序配置文件必须符合规范！</li><li>NullPointerException，没有注册到资源!</li><li>输出的xml文件中存在中文乱码问题！</li><li>maven资源没有导出问题！</li></ul><h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//万能的Map</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">@Test<br>public void addUser2()&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br><br>    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();<br><br>    map.put(&quot;userid&quot;,5);<br>    map.put(&quot;passWord&quot;,&quot;2222333&quot;);<br><br>    mapper.addUser2(map);<br><br>    sqlSession.close();<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p><p>多个参数用Map，<strong>或者注解！</strong></p><h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p><ol><li><p>Java代码执行的时候，传递通配符 % %</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br></code></pre></div></td></tr></table></figure></li><li><p>在sql拼接中使用通配符！</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br></code></pre></div></td></tr></table></figure><h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3></li></ul><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境！</p><p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p><h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p><p><a href="https://imgtu.com/i/cABU8f"><img src="https://z3.ax1x.com/2021/03/31/cABU8f.png" alt="cABU8f.png"></a></p><p>编写一个配置文件</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></div></td></tr></table></figure><p>在核心配置文件中映入</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11111&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的！</li></ul><h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul><li>类型别名是为 Java 类型设置一个短的名字。‘</li><li>存在的意义仅在于用来减少类完全限定名的冗余。</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p><p><a href="https://imgtu.com/i/cAB65q"><img src="https://z3.ax1x.com/2021/03/31/cAB65q.png" alt="cAB65q.png"></a></p><p><img src="https://upload-images.jianshu.io/upload_images/22416923-5fb07cc49d386349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1569657672791.png"></p><h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li>plugins插件<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>练习时间：</p><ul><li>将数据库配置文件外部引入</li><li>实体类别名</li><li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li></ul><h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><a href="https://imgtu.com/i/cAB5qJ"><img src="https://z3.ax1x.com/2021/03/31/cAB5qJ.png" alt="cAB5qJ.png"></a></p><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白了就是可以想象为 ：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><p><a href="https://imgtu.com/i/cABOxO"><img src="https://z3.ax1x.com/2021/03/31/cABOxO.png" alt="cABOxO.png"></a></p><p>这里面的每一个Mapper，就代表一个具体的业务！</p><h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p><p><a href="https://imgtu.com/i/cADSZd"><img src="https://z3.ax1x.com/2021/03/31/cADSZd.png" alt="cADSZd.png"></a></p><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试出现问题</p><p><a href="https://imgtu.com/i/cADEQS"><img src="https://z3.ax1x.com/2021/03/31/cADEQS.png" alt="cADEQS.png"></a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">//    select * from mybatis.user where id = #&#123;id&#125;<br>//类型处理器<br>//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;<br></code></pre></div></td></tr></table></figure><p>解决方法：</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   pwd<br><span class="hljs-built_in">id</span>   <span class="hljs-built_in">name</span>   password<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li><li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li><li> 如果世界总是这么简单就好了。</li></ul><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout 、debug</p><p>现在：日志工厂！</p><p><a href="https://imgtu.com/i/cADmZj"><img src="https://z3.ax1x.com/2021/03/31/cADmZj.png" alt="cADmZj.png"></a></p><ul><li><p>SLF4J </p></li><li><p>LOG4J  【掌握】</p></li><li><p>LOG4J2</p></li><li><p> JDK_LOGGING</p></li><li><p>COMMONS_LOGGING</p></li><li><p>STDOUT_LOGGING   【掌握】</p></li><li><p>NO_LOGGING</p></li></ul><p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://imgtu.com/i/cADuon"><img src="https://z3.ax1x.com/2021/03/31/cADuon.png" alt="cADuon.png"></a></p><h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li><p>先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Log4j的使用！，直接测试运行刚才的查询</p><p><a href="https://imgtu.com/i/cAD1zT"><img src="https://z3.ax1x.com/2021/03/31/cAD1zT.png" alt="cAD1zT.png"></a></p></li></ol><p><strong>简单使用</strong></p><ol><li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);<br></code></pre></div></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);<br>logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);<br>logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">语法：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit startIndex,pageSize;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit <span class="hljs-number">3</span>;  #[<span class="hljs-number">0</span>,n]<br></code></pre></div></td></tr></table></figure><p>使用Mybatis实现分页，核心SQL</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//分页</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--//分页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br>UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; userList =  mapper.getUserByLimit(map);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//分页2</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br><span class="hljs-comment">//RowBounds实现</span><br>RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//通过Java代码层面实现分页</span><br>List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="hljs-keyword">null</span>,rowBounds);<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><a href="https://imgtu.com/i/cAD8QU"><img src="https://z3.ax1x.com/2021/03/31/cAD8QU.png" alt="cAD8QU.png"></a></p><p>了解即可，万一 以后公司的架构师，说要使用，你需要知道它是什么东西！</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p><strong>关于接口的理解</strong></p><p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p><strong>三个面向区别</strong></p><p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p><h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>需要再核心配置文件中绑定接口！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p></li></ol><p>本质：反射机制实现</p><p>底层：动态代理！</p><p> <a href="https://imgtu.com/i/cADteJ"><img src="https://z3.ax1x.com/2021/03/31/cADteJ.png" alt="cADteJ.png"></a></p><p><strong>Mybatis详细的执行流程！</strong></p><p><a href="https://imgtu.com/i/cADNw9"><img src="https://z3.ax1x.com/2021/03/31/cADNw9.png" alt="cADNw9.png"></a></p><h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编写接口，增加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserByID</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试类</p><p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p><p><strong>关于@Param() 注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li></ul><p><strong>#{}     ${} 区别</strong></p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">has</span> <span class="hljs-title">a</span> <span class="hljs-title">fully</span> <span class="hljs-title">featured</span> <span class="hljs-title">builder</span>, <span class="hljs-title">Automate</span> <span class="hljs-title">your</span> <span class="hljs-title">logging</span> <span class="hljs-title">variables</span>, <span class="hljs-title">and</span> <span class="hljs-title">much</span> <span class="hljs-title">more</span>.</span><br></code></pre></div></td></tr></table></figure><ul><li>java library</li><li>plugs</li><li>build tools</li><li>with one annotation your class</li></ul><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在实体类上加注解即可！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br></code></pre></div></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@SneakyThrows</span><br></code></pre></div></td></tr></table></figure><p>说明：</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Data</span>：无参构造，get、set、tostring、hashcode，equals<br><span class="hljs-variable">@AllArgsConstructor</span><br><span class="hljs-variable">@NoArgsConstructor</span><br><span class="hljs-variable">@EqualsAndHashCode</span><br><span class="hljs-variable">@ToString</span><br><span class="hljs-variable">@Getter</span><br></code></pre></div></td></tr></table></figure><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p><p><a href="https://imgtu.com/i/cADwJx"><img src="https://z3.ax1x.com/2021/03/31/cADwJx.png" alt="cADwJx.png"></a></p><ul><li>多个学生，对应一个老师</li><li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li><li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li></ul><p><a href="https://imgtu.com/i/cAD0W6"><img src="https://z3.ax1x.com/2021/03/31/cAD0W6.png" alt="cAD0W6.png"></a></p><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(`id`, `name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;秦老师&#x27;</span>); <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `fktid` (`tid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><br></code></pre></div></td></tr></table></figure><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li>导入lombok</li><li>新建实体类 Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.XML文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li><li>测试查询是否能够成功！</li></ol><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路:</span><br><span class="hljs-comment">        1. 查询所有的学生信息</span><br><span class="hljs-comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span><br><span class="hljs-comment">    --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>    select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>    select s.id sid,s.name sname,t.name tname<br>    from student s,teacher t<br>    where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>回顾Mysql 多对一查询方式：</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p><p>对于老师而言，就是一对多的关系!</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>环境搭建，和刚才一样</li></ol><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--按结果嵌套查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>    select s.id sid, s.name sname, t.name tname,t.id tid<br>    from student s,teacher t<br>    where s.tid = t.id and t.id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span><br><span class="hljs-comment">    javaType=&quot;&quot; 指定属性的类型！</span><br><span class="hljs-comment">    集合中的泛型信息，我们使用ofType获取</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>    select * from mybatis.teacher where id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from mybatis.student where tid = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>关联 - association   【多对一】</li><li>集合 - collection   【一对多】</li><li>javaType    &amp;   ofType<ol><li>JavaType  用来指定实体类中属性的类型</li><li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li></ul><p><strong>慢SQL       1s        1000s</strong>      </p><p>面试高频</p><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化！</li></ul><h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p><p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。<br><br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></div></td></tr></table></figure><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br></code></pre></div></td></tr></table></figure><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;<br>    <br>    <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">select * from mybatis.blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    update mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>==<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>==</p><p>if</p><p>where ， set  ， choose ，when</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><ol><li><p>使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在需要使用的地方使用Include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段！</li><li>不要存在where标签</li></ul><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <br><br>  <span class="hljs-operator">&lt;</span>foreach item<span class="hljs-operator">=</span>&quot;id&quot; collection<span class="hljs-operator">=</span>&quot;ids&quot;<br>      <span class="hljs-keyword">open</span><span class="hljs-operator">=</span>&quot;(&quot; separator<span class="hljs-operator">=</span>&quot;or&quot; <span class="hljs-keyword">close</span><span class="hljs-operator">=</span>&quot;)&quot;<span class="hljs-operator">&gt;</span><br>        #&#123;id&#125;<br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><br>(id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>)<br><br></code></pre></div></td></tr></table></figure><p><a href="https://imgtu.com/i/cADrQO"><img src="https://z3.ax1x.com/2021/03/31/cADrQO.png" alt="cADrQO.png"></a></p><p><a href="https://imgtu.com/i/cADyOe"><img src="https://z3.ax1x.com/2021/03/31/cADyOe.png" alt="cADyOe.png"></a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>            id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>==动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了==</p><p>建议：</p><ul><li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li></ul><h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">查询  ：  连接数据库 ，耗资源！<br>一次查询的结果，给他暂存在一个可以直接取到的地方！<span class="hljs-comment">--&gt; 内存 ： 缓存</span><br><br>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了<br></code></pre></div></td></tr></table></figure><ol><li><p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li><p>什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。【可以使用缓存】</li></ul></li></ol><h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul><li>一级缓存也叫本地缓存：  SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Sesion中查询两次相同记录</li><li>查看日志输出</li></ol><p><a href="https://imgtu.com/i/cAD2TA"><img src="https://z3.ax1x.com/2021/03/31/cAD2TA.png" alt="cAD2TA.png"></a></p><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><p><a href="https://imgtu.com/i/cADTOg"><img src="https://z3.ax1x.com/2021/03/31/cADTOg.png" alt="cADTOg.png"></a></p></li></ol><ol start="3"><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存！</p><p><a href="https://imgtu.com/i/cADHmQ"><img src="https://z3.ax1x.com/2021/03/31/cADHmQ.png" alt="cADHmQ.png"></a></p></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p><p>一级缓存就是一个Map。</p><h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--显示的开启全局缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>   <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>测试</p><ol><li><p>问题:我们需要将实体类序列化！否则就会报错！</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">Caused by: java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.NotSerializableException</span>: com<span class="hljs-selector-class">.kuang</span><span class="hljs-selector-class">.pojo</span>.User<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li></ul><h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><a href="https://imgtu.com/i/cArQ7d"><img src="https://z3.ax1x.com/2021/03/31/cArQ7d.png" alt="cArQ7d.png"></a></p><h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存<br></code></pre></div></td></tr></table></figure><p>要在程序中使用ehcache，先要导包！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在mapper中指定使用我们的ehcache缓存实现！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">       user.home – 用户主目录</span><br><span class="hljs-comment">       user.dir  – 用户当前工作目录</span><br><span class="hljs-comment">       java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br>    <br>    &lt;defaultCache<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;10000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;259200&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br> <br>    &lt;cache<br>            name=&quot;cloud_user&quot;<br>            eternal=&quot;false&quot;<br>            maxElementsInMemory=&quot;5000&quot;<br>            overflowToDisk=&quot;false&quot;<br>            diskPersistent=&quot;false&quot;<br>            timeToIdleSeconds=&quot;1800&quot;<br>            timeToLiveSeconds=&quot;1800&quot;<br>            memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;<br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      name:缓存名称。</span><br><span class="hljs-comment">      maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">      maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="hljs-comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">      clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="hljs-comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="hljs-comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">   --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>Redis数据库来做缓存！  K-V</p><blockquote><p>From：<a href="https://www.kuangstudy.com/">https://www.kuangstudy.com/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java For-loop&amp; For-each &amp; Iterator 效率分析</title>
    <link href="/2021/03/16/JavaSE/Java%20For-loop&amp;%20For-each%20&amp;%20Iterator%20%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <url>/2021/03/16/JavaSE/Java%20For-loop&amp;%20For-each%20&amp;%20Iterator%20%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<ul><li><p><code>public static native long nanoTime();</code>  来测试时间，主程序外围获取当前时间，然后作差得到运行时间。</p></li><li><p>程序中同时测试 <code>ArrayList</code>和 <code>LinkedList</code>两种实现方式的遍历效率，代表了数组和链表两种数据结构。</p></li><li><p>成员变量 <code>public static final int MAGNITUDE = 10000;</code>用来控制数据的 <code>数量级</code>。</p></li><li><p>初始化声明两种 <code>List&lt;String&gt;</code>，并递增变量至数量级大小，过程中转化为 String 存储到集合当中，作为实验数据。</p></li><li><p>测试的运行程序逻辑是：将集合中的数据取出来，并赋值给另一个元素 <code>str</code>。但是这里存在时间复杂度的区别， <code>ArrayList</code>中的 <code>get(int index)</code>在数组实现上 时间复杂度是常数级i的 <code>O(1)</code>，而 <code>LinkedList</code>中的 <code>get(int index)</code>在链表实现上 时间复杂度是线性 <code>O(n)</code>，但是测试的 <code>ArrayList</code>和 <code>LinkedList</code>的时间比较是<code>同数据结构</code>之间比较，符合控制变量法，所以不需要结果上的 数值，而关注 运行时间的 <code>时间数量级</code>，这样比较才有意义。</p></li></ul><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAGNITUDE = <span class="hljs-number">10000</span>;    <span class="hljs-comment">// 数量级</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testForloop</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAGNITUDE; i++) &#123;<br>            str = list.get(i);<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testForeach</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            str = s;<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">testIterator</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br>        String str = <span class="hljs-keyword">null</span>;<br>        start = System.nanoTime();<br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            str = iterator.next();<br>        &#125;<br>        end = System.nanoTime();<br>        <span class="hljs-keyword">return</span> end - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/* initialize */</span><br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        List&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAGNITUDE; i++) &#123;<br>            arrayList.add(String.valueOf(i));<br>            linkedList.add(String.valueOf(i));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========Test for ArrayList========&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;For loop: &quot;</span> + testForloop(arrayList));<br>        System.out.println(<span class="hljs-string">&quot;Foreach: &quot;</span> + testForeach(arrayList));<br>        System.out.println(<span class="hljs-string">&quot;Iterator: &quot;</span> + testIterator(arrayList));<br><br>        System.out.println(<span class="hljs-string">&quot;========Test for LinkedList========&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;For loop: &quot;</span> + testForloop(linkedList));<br>        System.out.println(<span class="hljs-string">&quot;Foreach: &quot;</span> + testForeach(linkedList));<br>        System.out.println(<span class="hljs-string">&quot;Iterator: &quot;</span> + testIterator(linkedList));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><ul><li>如上文分析：<code>同数据结构</code> 比较原则。</li></ul><h3 id="数量级：1-000"><a href="#数量级：1-000" class="headerlink" title="数量级：1,000"></a>数量级：1,000</h3><blockquote><p>========Test for ArrayList========<br>For loop: 99000<br>Foreach: 321700<br>Iterator: 194500<br>========Test for LinkedList========<br>For loop: 1215800<br>Foreach: 341500<br>Iterator: 94900</p></blockquote><h3 id="数量级：10-000"><a href="#数量级：10-000" class="headerlink" title="数量级：10,000"></a>数量级：10,000</h3><blockquote><p>========Test for ArrayList========<br>For loop: 933200<br>Foreach: 942500<br>Iterator: 585800<br>========Test for LinkedList========<br>For loop: 129958500<br>Foreach: 1433000<br>Iterator: 967600</p></blockquote><h3 id="数量级：100-000"><a href="#数量级：100-000" class="headerlink" title="数量级：100,000"></a>数量级：100,000</h3><blockquote><p>========Test for ArrayList========<br>For loop: 3730800<br>Foreach: 6669800<br>Iterator: 5215100<br>========Test for LinkedList========<br>For loop: 18907275800<br>Foreach: 7468100<br>Iterator: 5632400</p></blockquote><ul><li><code>ArrayList</code>：在小数量级上，For-loop效率会高一点，For &lt; Iterator &lt; For-each，这里得出的结论根据时间消耗得出，无法仔细比较效率高低，数量级小时，For效率高一点，整体来说，三者速度级别差不多。</li><li><code>LinkedList</code>：链表中很明显 For loop 效率就低很多了。For-each和Iterator相差不大。数量大（一般超过 100,000级别）效果更明显。Iterator &lt; For-each &lt; &lt;&lt;For-loop。Iterator和For-each效率在链表中差不多，For差一些就是了。</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p> For-each 和 Iterator 基本都在一个数量级上，这可能与 For-each 就是基于 Iterator 实现的，至于 For-each 会稍微慢一点，可能是 For-each 隐式转换 Iterator 耗费多余时间，</p></li><li><p><code>ArrayList</code>基于数组，index都是确定的，在查改反面效率会高一点，自然带着下表的 For 效率会高很多。<code>LinkedList</code>基于链表，查改开销会比较大，但它是<code>双向循环带头节点的链表</code>，增删会比数组快，这两种数据结构的比较差别就在这，实际中还是要看在哪方面的应用来确定。</p></li></ul><h2 id="工程中三种循环的使用建议。"><a href="#工程中三种循环的使用建议。" class="headerlink" title="工程中三种循环的使用建议。"></a>工程中三种循环的使用建议。</h2><ul><li><code>《Effective Java》第三版第58条</code>中建议，一般采用 Foreach 进行循环，因为它在 <code>简洁性</code>和 <code>预防Bug</code>上优于For-loop 和 Iterator（确切说是 Iterator 配合 while 使用）</li></ul><p><code>简洁性</code>就不需要多阐述了，光看代码量和可读性，就知道 For-each 的<code>简洁性</code>特点。</p><h4 id="For-each-优势于-while-loop"><a href="#For-each-优势于-while-loop" class="headerlink" title="For-each 优势于 while-loop"></a>For-each 优势于 while-loop</h4><hr><h5 id="预防Bug"><a href="#预防Bug" class="headerlink" title="预防Bug"></a>预防Bug</h5><ul><li>说到预防Bug，这里牵涉到 第57条 中的 <code>将局部变量的作用域最小化</code>。</li></ul><h5 id="为什么要“将局部变量的作用域最小化”"><a href="#为什么要“将局部变量的作用域最小化”" class="headerlink" title="为什么要“将局部变量的作用域最小化”"></a>为什么要“将局部变量的作用域最小化”</h5><p>书中提到，原因类似于 第15条的本质，<code>使类和成员的可访问性最小化</code>。将局部变量作用域最小化，可以增强代码的可读性和可维护性，并降低出错的可能性。</p><blockquote><p> 循环中提供了特殊的机会来将变量的作用域最小化。无论是传统的for循环，还是for-each形式的 for 循环，都允许声明<strong>循环变量</strong>，它们的作用域被限定<strong>在正好需要的范围</strong>之内。如果在循环终止之后不再需要循环变量的内容，for-loop就优先于 while loop。</p></blockquote><ul><li>如下是一种遍历集合的首选做法：</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Preferred idiom for iterating over a collection or array</span><br><span class="hljs-keyword">for</span> (Element e : c) &#123;<br>    ... <span class="hljs-comment">// Do Someting with e</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>如果需要访问迭代器，可能要调用它的 remove 方法，首选做法是利用传统的 for 循环替代 for-each 循环：</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Idiom for iterating when you need the iterator</span><br><span class="hljs-keyword">for</span> (Iterator&lt;Element&gt; i = c.iterator(); i.hasNext(); ) &#123;<br>    Element e = i.next();<br>    ... <span class="hljs-comment">// Do someting with e and i</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>为什么有些时候不能用 for-each ，它的实现还是基于 iterator 的 <code>hasNext() + next()</code>，但是有时候需要在循环过程中对集合进行操作，此时就必须使用 iterator 对象进行操作了，因为使用 iterator 循环时，集合的操作权就交给了 iterator，虽然可以用集合对象进行操作，如 <code>romove()</code>但这样会破坏 iterator 初始化的结果，导致最终程序运行的结果与预期偏差很大，这里引用我的另一篇文章，有 Java 在 iterator 中 remove() 的 bug详解。</p><blockquote><p><a href="https://www.jianshu.com/p/642d6fd39013">https://www.jianshu.com/p/642d6fd39013</a></p></blockquote><ul><li>至于为什么 for loop 要比 while loop 更好，参考一下代码片段，连续的两个 whIle loop，以及出现的一个 bug</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator&lt;Element&gt; i = c.iterator();<br><span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>    doSometing(i.next());<br>&#125;<br>...<br>Iterator&lt;Element&gt; i2 = c.iterator();<br><span class="hljs-keyword">while</span> (i.hasNext()) &#123;   <span class="hljs-comment">// This is bug!</span><br>    doSometing(i2.next());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在第二个 while loop 中，使用了 迭代器 <code>i</code> 的判断，实际操作的是 <code>i2</code> 遍历的对象，bug 就在这里，实际工程中，因为   迭代器 <code>i</code>的产生是在 while loop 外面的，作用于包含了整段程序，包括 while loop 使用结束之后，加上中间有其他的逻辑代码，难免会不小心使用到上面残余的 迭代器<code>i</code>，这就造成很严重的 bug，而不会轻易被发现，IDE也不会报错。 所以要利用好 for loop 声明迭代器，控制它的作用范围。</p><p>上面的bug程序最终的结果是下面的 while loop 不会执行，因为在上面的 while loop 执行结束之后，迭代器 <code>i</code>就会遍历到尽头，这样继续判断 <code>i.hasNext()</code>只会返回 <code>false</code>。</p><h4 id="For-each-优势于-For-loop"><a href="#For-each-优势于-For-loop" class="headerlink" title="For-each 优势于 For-loop"></a>For-each 优势于 For-loop</h4><hr><ul><li>以下面一个 两层集合嵌套迭代出现的 bug 来展开讨论</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Can you spot the bug?</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Suit</span> </span>&#123;CLUB, DIAMOND, HEART, SPADE&#125;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Rank</span> </span>&#123;<br>    ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,<br>    EIGHT, NINE, TEN, JACK, QUEEN, KING<br>&#125;<br>...<br><span class="hljs-keyword">static</span> Collection&lt;Suit&gt; suits = Arrays.asList(Suit.values());<br><span class="hljs-keyword">static</span> Collection&lt;Rank&gt; ranks = Arrays.asList(Rank.values());<br><br>List&lt;Card&gt; deck = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); )<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )<br>        deck.add(<span class="hljs-keyword">new</span> Card(i.next(), j.next()));<br>    <br></code></pre></div></td></tr></table></figure><p>这里的bug比较难找，可能很多大师也会犯这个错误。bug在于，在迭代器上对外部的集合 suits 调用太多 <code>next</code> 方法，它应该从外部的循环进行调用，以便每种花色都调用一次，但它却是从内部循环调用，因此每次牌调用一次。在用完所有花色之后，循环就会抛出 <code>NoSuchElementException</code>异常。</p><p>如果碰巧外部集合的大小是内部集合大小的几倍（可能因为它们是相同的集合），循环就会正常终止，但是实际完成情况跟预期是有出入的。</p><ul><li>下面是打印一对骰子出现的所有可能情况：</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Same bug, different symptom!</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Face</span> </span>&#123;ONE, TWO, THREE, FOUR, FIVE, SIX&#125;<br>Collection&lt;Face&gt; faces = EnumSet.allOf(Face.class);<br><br><span class="hljs-keyword">for</span> (Iterator&lt;Face&gt; i = faces.iterator(); i.hasNext(); )<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Face&gt; j = faces.iterator(); i.hasNext(); )<br>        System.out.println(i.next() + <span class="hljs-string">&quot; &quot;</span> + j.next());<br></code></pre></div></td></tr></table></figure><blockquote><p>ONE ONE<br>TWO TWO<br>THREE THREE<br>FOUR FOUR<br>FIVE FIVE<br>SIX SIX</p></blockquote><p>同样的错误，也是重复调用 <code>next</code>。这种程序不会抛出异常，所以往往找bug会特别难受。</p><ul><li>下面开始修正此 bug</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Fixed, but ugly - so we need for-each</span><br><span class="hljs-keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); ) &#123;<br>    Suit suit = i.next();<br>    <span class="hljs-keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )<br>        deck.add(<span class="hljs-keyword">new</span> Card(suit, j.next()));<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>至此引出 for-each ，让这个问题完全消失，并且产生的代码也能很简洁。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// Preferred idiom for neat iteration on collections and arrays</span><br><span class="hljs-keyword">for</span> (Suit suit : suits)<br>    <span class="hljs-keyword">for</span> (Rank rank : ranks)<br>        deck.add(<span class="hljs-keyword">new</span> Card(suit, rank));<br></code></pre></div></td></tr></table></figure><h4 id="For-each-无法使用的地方"><a href="#For-each-无法使用的地方" class="headerlink" title="For-each 无法使用的地方"></a>For-each 无法使用的地方</h4><hr><ul><li><code>解构过滤</code>：如果需要遍历集合，并删除指定元素，需要使用显式的迭代器，以便使用它的 remove 方法。使用 Java 8 中添加的 Collection 的 <code>removeIf</code>，常常可以避免显式遍历。</li><li><code>转换</code>：如果需要遍历列表或者数组，并取代它的部分或者全部元素值，就需要列表迭代器或者数组索引，以便设置元素的值。</li><li><code>平行迭代</code>：如果需要并行地遍历多个集合，就需要显式地控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以同步前进（就如上述有问题的牌和骰子的示例中无意间所示范的那样）</li></ul><h4 id="For-each-拓展使用"><a href="#For-each-拓展使用" class="headerlink" title="For-each 拓展使用"></a>For-each 拓展使用</h4><ul><li>for-each 不止能遍历集合和数组，还能遍历实现 <code>Iterable</code>接口的任何对象，只需要实现接口对应的方法即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an iterator over elements of type &#123;<span class="hljs-doctag">@code</span> T&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an Iterator.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">Iterator&lt;T&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-keyword">super</span> T&gt; action)</span> </span>&#123;<br>        Objects.requireNonNull(action);<br>        <span class="hljs-keyword">for</span> (T t : <span class="hljs-keyword">this</span>) &#123;<br>            action.accept(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，与传统的for循环相比，for-each循环在简洁性、灵活性以及出错预防性方面都占有绝对优势，并且<strong>没有性能惩罚</strong>的问题。因此，当可以选择的时候，for-each循环应该优先于for循环。</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java在Iterator中remove &amp; ConcurrentModificationException问题</title>
    <link href="/2021/03/15/JavaSE/Java%20%E5%9C%A8Iterator%E4%B8%AD%20remove%20&amp;%20ConcurrentModificationException%E9%97%AE%E9%A2%98/"/>
    <url>/2021/03/15/JavaSE/Java%20%E5%9C%A8Iterator%E4%B8%AD%20remove%20&amp;%20ConcurrentModificationException%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b&quot;</span>.equals(cur)) &#123;<br>                arrayList.remove(cur);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*for (String s : arrayList) &#123;</span><br><span class="hljs-comment">            if (&quot;b&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">                arrayList.remove(s);</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                System.out.println(s + &quot; &quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>for-each实际就是隐式使用 iterator 遍历集合，上面的例子会抛出异常，并删除失败。</li></ul><blockquote><p>a<br>Exception in thread “main” java.util.ConcurrentModificationException<br>    at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:937)<br>    at java.base/java.util.ArrayList$Itr.next(ArrayList.java:891)<br>    at Solution.main(Solution.java:14)</p></blockquote><ul><li>然而删除<strong>倒数第二个</strong>元素却不会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;c&quot;</span>.equals(cur)) &#123;<br>                arrayList.remove(cur);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*for (String s : arrayList) &#123;</span><br><span class="hljs-comment">            if (&quot;c&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">                arrayList.remove(s);</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                System.out.println(s + &quot; &quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>a<br>b<br>[a, b, d]</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p>首先先观察 ArrayList 的 <code>iterator()</code>，看迭代器怎么构造。</p></li><li><p>ArrayList 的 父类 <code>AbstractList</code>中</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Itr();<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>Itr 是里面的内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Index of element to be returned by subsequent call to next.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> cursor = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Index of element returned by most recent call to next or</span><br><span class="hljs-comment">     * previous.  Reset to -1 if this element is deleted by a call</span><br><span class="hljs-comment">     * to remove.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> lastRet = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The modCount value that the iterator believes that the backing</span><br><span class="hljs-comment">     * List should have.  If this expectation is violated, the iterator</span><br><span class="hljs-comment">     * has detected concurrent modification.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> expectedModCount = modCount;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cursor != size();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        checkForComodification();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> i = cursor;<br>            E next = get(i);<br>            lastRet = i;<br>            cursor = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;<br>            checkForComodification();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException();<br>        checkForComodification();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            AbstractList.<span class="hljs-keyword">this</span>.remove(lastRet);<br>            <span class="hljs-keyword">if</span> (lastRet &lt; cursor)<br>                cursor--;<br>            lastRet = -<span class="hljs-number">1</span>;<br>            expectedModCount = modCount;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p><code>cursor</code>：下一个要访问的元素的索引</p></li><li><p><code>lastRet</code>：上一个访问的元素的索引</p></li><li><p><code>expectedModCount</code>是期望的该 List 被修改的次数，初始化为<code>modCount</code></p></li><li><p><code>modCount</code>是AbstractList 的一个成员变量。</p></li></ul><blockquote><p>The number of times this list has been structurally modified. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.<br>This field is used by the iterator and list iterator implementation returned by the iterator and listIterator methods. If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a ConcurrentModificationException in response to the next, remove, previous, set or add operations. This provides fail-fast behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration.<br>Use of this field by subclasses is optional. If a subclass wishes to provide fail-fast iterators (and list iterators), then it merely has to increment this field in its add(int, E) and remove(int) methods (and any other methods that it overrides that result in structural modifications to the list). A single call to add(int, E) or remove(int) must add no more than one to this field, or the iterators (and list iterators) will throw bogus ConcurrentModificationExceptions. If an implementation does not wish to provide fail-fast iterators, this field may be ignored.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount = <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><ul><li>结构修改是指那些改变列表大小的修改，或者以某种方式扰乱列表，使得正在进行的迭代可能产生不正确的结果。</li><li>此字段由迭代器和<code>listIterator</code>方法返回的迭代器和列表迭代器实现使用。如果此字段的值意外更改，迭代器（或列表迭代器）将抛出<code>ConcurrentModificationException</code>以响应<code>next</code>、<code>remove</code>、previous、<code>set</code>或<code>add</code>操作。这提供了<code>快速失败</code>的行为。</li></ul><ul><li>深入 ArrayList 里观察 <code>next()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>    checkForComodification();<br>    <span class="hljs-keyword">int</span> i = cursor;<br>    <span class="hljs-keyword">if</span> (i &gt;= size)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    Object[] elementData = ArrayList.<span class="hljs-keyword">this</span>.elementData;<br>    <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>    cursor = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (E) elementData[lastRet = i];<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>抛出的<code>ConcurrentModificationException</code>异常是<code>checkForComodification()</code>抛出的。</p></li><li><p>条件是：<code>modCount != expectedModCount</code></p></li></ul><p>所以在 add remove 的过程中 <code>modCount</code>会自增自减。如果用集合的 <code>remove</code>则 List 的<code>modCount</code>减少一，而 Iterator 的 <code>expectedModCount</code>不变，就会抛出异常。</p><ul><li>至于为什么倒数第二个元素删除不会报错，我们要先了解 Iterator 遍历的特点。</li></ul><p>while + iterator 的组合是需要先判空 <code>hasNext()</code>，然后再<code>next()</code>，最后才 <code>remove()</code>，否则会报错，可以自行实验，调换 next 和 remove。</p><p>因为要先 next，将游标<code>越过</code>当前的元素，然后再决定要怎么操作当前的（游标前面的）这个元素，即游标是插在 当前元素 和 下一个元素的中间（可以这么理解）。</p><p>删除倒数第二个元素的时候，cursor指向<code>最后一个元素</code>，而此时删掉了倒数第二个元素后，cursor和size()正好相等了，所以<code>hasNext()</code>返回false，遍历结束，成功的删除了倒数第二个元素。</p><h2 id="建议用法"><a href="#建议用法" class="headerlink" title="建议用法"></a>建议用法</h2><ul><li><p>一个原则是，尽量在遍历的过程中不要对原集合进行增删，容易改变原结构，可以用 immutable 的思想，重新封装一个集合。</p></li><li><p>要 remove() ，则要在 <code>iterator()</code>上面来进行 <code>remove()</code>，因为Iterator迭代，就把操作权交给了 Iterator，就不要再用原集合进行操作了。</p></li><li><p>正确用法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        arrayList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        arrayList.add(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        Iterator&lt;String&gt; iterator = arrayList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            String cur = iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a&quot;</span>.equals(cur)) &#123;<br>                iterator.remove();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(cur + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(arrayList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>b<br>c<br>d<br>[b, c, d]</p></blockquote><ul><li>以上分析是基于 <code>ArrayList</code>，基于链表的 LinkedList道理大同小异，思想不变，测试的结果也是不变的。</li><li>既然正确是 使用 iterator 来操作集合，就应该去阅读 iterator 里的 next() 实现，而不应该去看 ArrayList 里的实现，要更深入了解就去阅读源码吧。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java算法竞赛常用模板</title>
    <link href="/2021/02/10/JavaSE/Java%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/02/10/JavaSE/Java%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Java算法竞赛常用模板"><a href="#Java算法竞赛常用模板" class="headerlink" title="Java算法竞赛常用模板"></a>Java算法竞赛常用模板</h1><h2 id="一、输入输出"><a href="#一、输入输出" class="headerlink" title="一、输入输出"></a>一、输入输出</h2><h3 id="简单输入"><a href="#简单输入" class="headerlink" title="简单输入"></a>简单输入</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner <br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><br>Scanner sc1 = <span class="hljs-keyword">new</span> Scanner(System.in);<br>Scanner sc2 = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-keyword">new</span> BufferedInputStream(System.in));<br><span class="hljs-comment">// sc2用到缓冲流，读入更快</span><br></code></pre></div></td></tr></table></figure><p>测试：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        long t1, t2, t3;<br>        Scanner sc1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br>        Scanner sc2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> BufferedInputStream(System.<span class="hljs-params">in</span>)</span>);<br><br>        t1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        String next = sc1.next<span class="hljs-literal">()</span>;<br>        t2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        t3 = t2 - t1;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;sc1:&quot;</span> + t3);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(next);<br><br>        t1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        String next2 = sc2.next<span class="hljs-literal">()</span>;<br>        t2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>        t3 = t2 - t1;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;sc2:&quot;</span> + t3);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(next2);<br>    &#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>abc<br>sc1:7968695900<br>abc<br>abc<br>sc2:1945031900<br>abc</p></blockquote><h3 id="复杂输入"><a href="#复杂输入" class="headerlink" title="复杂输入"></a>复杂输入</h3><div class="hljs code-wrapper"><pre><code>    如：1,2,3,4,5</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br>    String str = sc.next<span class="hljs-literal">()</span>;<br>    String<span class="hljs-literal">[]</span> split = str.split(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> strInt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-identifier">split</span>.<span class="hljs-identifier">length</span>]</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>        strInt<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">split</span>[<span class="hljs-params">i</span>])</span>;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">strInt</span>)</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>1,2,3,4,5<br>[1, 2, 3, 4, 5]</p></blockquote><h3 id="文件输入"><a href="#文件输入" class="headerlink" title="文件输入"></a>文件输入</h3><div class="hljs code-wrapper"><pre><code>    用于大数据的读入，不用手动输入那么麻烦。BufferedInputStream缓冲流来加速，文件输入流用**绝对路径**，避免不必要的麻烦，要不就把资源文件放在src目录下。</code></pre></div><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws FileNotFoundException &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> <span class="hljs-type">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-type"></span><br><span class="hljs-type"></span>    FileInputStream(<span class="hljs-string">&quot;E:\\input.txt&quot;</span>)));<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>        list.add(sc.nextInt());<br>    &#125;<br>    System.out.println(list);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>按照空格分割字符串</li></ul><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">String</span>[] s=<span class="hljs-built_in">str</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; +&quot;</span>);<br><span class="hljs-keyword">String</span>[] s=<span class="hljs-built_in">str</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\\s+&quot;</span>);<br><span class="hljs-comment">// 以一个或多个空格分割</span><br></code></pre></div></td></tr></table></figure><ul><li><p><strong>public int indexOf(String str)：</strong>返回字符串中第一次出现str的位置；</p></li><li><p><strong>public int indexOf(String str,int fromIndex)：</strong>返回字符串从fromIndex开始第一次出现str的位置；</p></li><li><p><strong>public String substring(int beginIndex)：</strong>返回该字符串从beginIndex开始到结尾的子字符串；</p></li><li><p><strong>public String substring(int beginIndex,int endIndex)：</strong>返回该字符串从beginIndex开始到endsIndex结尾的子字符串</p></li><li><p><strong>public char[] toCharArray ()</strong> <strong>：</strong>将此字符串转换为新的字符数组</p></li><li><p><strong>public String replace (CharSequence target, CharSequence replacement)</strong> <strong>：</strong>将与target匹配的字符串使用replacement字符串替换。</p></li><li><p><strong>String replaceAll(String regex, String replacement)：</strong>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串</p></li></ul><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> ss=<span class="hljs-built_in">str</span>.replaceAll(<span class="hljs-string">&quot; +&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">String</span> ss=<span class="hljs-built_in">str</span>.replaceAll(<span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">// 二者都能把一个或多个空格换成逗号</span><br></code></pre></div></td></tr></table></figure><h3 id="大数"><a href="#大数" class="headerlink" title="大数"></a>大数</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">//BigDecimal类型构造方法</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(double val)</span></span><br>          <span class="hljs-comment">//将 double 转换为 BigDecimal，后者是 double 的二进制浮点值准确的十进制表示形式。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(int val)</span></span><br>          <span class="hljs-comment">//将 int 转换为 BigDecimal。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(long val)</span></span><br>          <span class="hljs-comment">//将 long 转换为 BigDecimal。</span><br><span class="hljs-function"><span class="hljs-title">BigDecimal</span><span class="hljs-params">(String val)</span></span><br>          <span class="hljs-comment">//将 BigDecimal 的字符串表示形式转换为 BigDecimal。</span><br><span class="hljs-comment">//BigInteger类型构造方法</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(int val)</span></span><br>          <span class="hljs-comment">//将 int 转换为 BigInteger。</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(String val)</span></span><br>          <span class="hljs-comment">//将 BigDecimal 的字符串表示形式转换为 BigInteger。</span><br><span class="hljs-comment">//BigInteger转换方法</span><br>BigInteger valueOf(long val)<br>          <span class="hljs-comment">//返回其值等于指定 long 的值的 BigInteger。</span><br>  <span class="hljs-comment">//如：BigInteger bi1=new BigInteger(1000);</span><br><span class="hljs-comment">//通用方法</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.max</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//返回最大数</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.min</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//返回最小数</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.add</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：+</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.subtract</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：-</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.multiply</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：*</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.divide</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：/</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.mod</span>(BigInteger(BigDecimal))<br>    <span class="hljs-comment">//相当于：%</span><br><span class="hljs-function"><span class="hljs-title">BigInteger</span><span class="hljs-params">(BigDecimal)</span></span><span class="hljs-selector-class">.abs</span>()<br>    <span class="hljs-comment">//返回其值是此 BigIntege(BigDecimal)r 的绝对值的 BigInteger(BigDecimal)。</span><br></code></pre></div></td></tr></table></figure><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><ul><li>Calendar实例化</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Calendar calendar = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br></code></pre></div></td></tr></table></figure><ul><li><strong>YEAR</strong>       指示年的 get 和 set 的字段数字。</li><li><strong>MONTH</strong>  指示月份的 get 和 set 的字段数字。</li><li><strong>DATE</strong>       指示日的 get 和 set 的字段数字。-</li><li><strong>HOUR</strong>       get 和 set 的字段数字,指示当天中的某小时</li><li><strong>MINUTE</strong> get 和 set 的字段数字,指示当前小时中的某分钟</li><li><strong>SECOND</strong> get 和 set 的字段数字,指示当前分钟中的某秒</li><li><strong>DAY_OF_MONTH</strong>   get 和 set 的字段数字, 指示以月为起点过了几天。</li><li><strong>DAY_OF_WEEK</strong>   get 和 set 的字段数字, 指示以周为起点过了几天。</li><li><strong>DAY_OF_YEAR</strong>   get 和 set 的字段数字, 指示以年为起点过了几天。</li><li><strong>DAY_OF_WEEK_IN_MONTH</strong>   get 和 set 的字段数字, 指示当前月中的第几个星期。</li></ul><blockquote><p>public static final int SUNDAY = 1;</p><p>public static final int JANUARY = 0;</p><p>以上表示，一周的开始是周日，即为1，以此类推。</p><p>一年的开始是一月，即为0，所以对月的设置要 - 1，对月的读取要 + 1</p></blockquote><div class="hljs code-wrapper"><pre><code>    `get(int field); `// 获取给定字段的值，field即上面的字段数字</code></pre></div><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">Calendar calendar = Calendar.getInstance();<br><span class="hljs-comment">// 设置日期为: 2020.1.21</span><br>calendar.<span class="hljs-keyword">set</span>(Calendar.YEAR, 2020);<br>calendar.<span class="hljs-keyword">set</span>(Calendar.MONTH, 0);<br>calendar.<span class="hljs-keyword">set</span>(Calendar.DAY_OF_MONTH, 21);<br><span class="hljs-comment">// 获取2020.1.21是星期几</span><br>System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(calendar.<span class="hljs-built_in">get</span>(Calendar.DAY_OF_WEEK));<br><br>输出：<br>3 <span class="hljs-comment">// 3代表星期二</span><br></code></pre></div></td></tr></table></figure><h4 id="Calendar类与Date类的转换"><a href="#Calendar类与Date类的转换" class="headerlink" title="Calendar类与Date类的转换"></a>Calendar类与Date类的转换</h4><ul><li><p>Date类</p><div class="hljs code-wrapper"><pre><code>  Date date = new Date();  System.out.println(&quot;毫秒:&quot;+date.getTime());//输入毫秒     //时间转字符串  SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  String time = sdf.format(date);  System.out.println(&quot;时间转字符串:&quot;+time);     //利用字符串来转时间格式（记得抛出异常）  String time02 = &quot;2018-09-05&quot;;  SimpleDateFormat  sdf2 = new SimpleDateFormat (&quot;yyyy-MM-dd&quot;);  Date date2 = sdf2.parse(time02);  System.out.println(&quot;字符串转时间格式：&quot;+date2);</code></pre></div></li><li><p>Calendar类</p><div class="hljs code-wrapper"><pre><code>  // 使用默认时区和语言环境获得一个日历  Calendar cal = Calendar.getInstance();  // 赋值时年月日时分秒常用的6个值，注意月份下标从0开始，所以取月份要+1  System.out.println(&quot;年:&quot; + cal.get(Calendar.YEAR));  System.out.println(&quot;月:&quot; + (cal.get(Calendar.MONTH) + 1));  System.out.println(&quot;日:&quot; + cal.get(Calendar.DAY_OF_MONTH));  System.out.println(&quot;时:&quot; + cal.get(Calendar.HOUR_OF_DAY));  System.out.println(&quot;分:&quot; + cal.get(Calendar.MINUTE));  System.out.println(&quot;秒:&quot; + cal.get(Calendar.SECOND));     //手动设置某个日期  Calendar cal02 = Calendar.getInstance();  //注意，设置时间的时候月份的下标是在0开始的  //设置时间不一定要这6个参数3个参数也是可以的  cal02.set(2018,9,1,12,0,0);//二零一八年十月一号十二点  System.out.println(cal02.getTime());//getTime()返回Date类型</code></pre></div></li><li><p>Calendar转换为Date</p></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Calendar cal = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>Date date = cal.get<span class="hljs-constructor">Time()</span>;<br>SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)</span>;<br>String s = simpleDateFormat.format(date);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;时间为====&quot;</span>+s);<br></code></pre></div></td></tr></table></figure><ul><li>Date转换为Calendar</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Date date2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br>Calendar cal2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>cal2.set<span class="hljs-constructor">Time(<span class="hljs-params">date2</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(cal2.get(Calendar.YEAR) +<span class="hljs-string">&quot;-&quot;</span>+(cal2.get(Calendar.MONTH)+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;-&quot;</span>+cal2.get(Calendar.DATE));<br></code></pre></div></td></tr></table></figure><p>例题：</p><p>从键盘输入一个日期，格式为yyyy-M-d</p><p>要求计算该日期与1949年10月1日距离多少天</p><p>例如：</p><p>用户输入了：1949-10-2 程序输出：1</p><p>用户输入了：1949-11-1 程序输出：31</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        Calendar cal = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>        Scanner sc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(<span class="hljs-params">new</span> BufferedInputStream(System.<span class="hljs-params">in</span>)</span>);<br>        String s = sc.next<span class="hljs-literal">()</span>;<br>        String<span class="hljs-literal">[]</span> str = s.split(<span class="hljs-string">&quot;-&quot;</span>);<br>        cal.set(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[0])</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[1])</span> - <span class="hljs-number">1</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">str</span>[2])</span>);<br>        Calendar standard = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>;<br>        standard.set(<span class="hljs-number">1949</span>, <span class="hljs-number">10</span> - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        long t1 = cal.get<span class="hljs-constructor">TimeInMillis()</span>;<br>        long t2 = standard.get<span class="hljs-constructor">TimeInMillis()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println((t1 - t2)<span class="hljs-operator"> / </span>(<span class="hljs-number">1000</span><span class="hljs-operator"> * </span><span class="hljs-number">60</span><span class="hljs-operator"> * </span><span class="hljs-number">60</span><span class="hljs-operator"> * </span><span class="hljs-number">24</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><div class="hljs code-wrapper"><pre><code>    定义：（常用）</code></pre></div><blockquote><p>Deque<Integer> q=new LinkedList<Integer>();</p></blockquote><p>LinkedList底层是链表，ArrayDeque底层是数组实现</p><ul><li><p><code>offerFirst / addFirst(Object e);</code> 队首插入</p></li><li><p><code>offerLast / addLast(Object e); </code>队尾插入</p></li><li><p><code>pollFirst(); </code>队首删除</p></li><li><p><code>pollLast(); </code>队尾删除</p></li><li><p><code>peekFirst(); </code>队首获取</p></li><li><p><code>peekLast(); </code>队尾获取</p></li></ul><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="其他进制字符串-gt-十进制整数"><a href="#其他进制字符串-gt-十进制整数" class="headerlink" title="其他进制字符串-&gt;十进制整数"></a>其他进制字符串-&gt;十进制整数</h3><ul><li>public static Integer valueOf(int i)</li><li>public static Integer valueOf(String s)</li><li>public static Integer valueOf(String s, int radix) - radix为s字符串符合的进制</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(12)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 十进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;12&quot;</span>)</span>);<span class="hljs-comment">//12</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;12&quot;</span>,10)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 二进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 2)</span>);<span class="hljs-comment">//12</span><br> <br><span class="hljs-comment">// 8进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 8)</span>);<span class="hljs-comment">//576</span><br> <br><span class="hljs-comment">// 16进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-string">&quot;1100&quot;</span>, 16)</span>);<span class="hljs-comment">//4352</span><br></code></pre></div></td></tr></table></figure><p>同理，用 public static int parseInt(String s)或 public static int parseInt(String s, int radix)转换为int型</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 十进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;12&quot;</span>)</span>); <span class="hljs-comment">// 12</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;12&quot;</span>, 10)</span>); <span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 二进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 2)</span>); <span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 8进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 8)</span>); <span class="hljs-comment">// 576</span><br> <br><span class="hljs-comment">// 16进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 16)</span>); <span class="hljs-comment">// 4352</span><br> <br><span class="hljs-comment">// 32进制字符串 =&gt; 十进制整数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;1100&quot;</span>, 32)</span>); <span class="hljs-comment">// 33792</span><br></code></pre></div></td></tr></table></figure><h3 id="十进制整数-gt-其他进制字符串"><a href="#十进制整数-gt-其他进制字符串" class="headerlink" title="十进制整数-&gt;其他进制字符串"></a>十进制整数-&gt;其他进制字符串</h3><ul><li>public static String toBinaryString(int i) - 转二进制</li><li>public static String toOctalString(int i) - 转八进制</li><li>public static String toHexString(int i) - 转十六进制</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> n = <span class="hljs-number">12</span>;<br><span class="hljs-comment">// 十进制整数 -&gt; 十进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>)</span>);<span class="hljs-comment">// 12</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 二进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 2)</span>);<span class="hljs-comment">// 1100</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 8进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 8)</span>);<span class="hljs-comment">// 14</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 16进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 16)</span>);<span class="hljs-comment">// c</span><br> <br><span class="hljs-comment">// 十进制整数 -&gt; 32进制字符串</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">n</span>, 32)</span>);<span class="hljs-comment">// c</span><br></code></pre></div></td></tr></table></figure><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>    <span class="hljs-built_in">String</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[] &#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>&#125;;<br>    <span class="hljs-comment">// 按照长度降序</span><br>    Arrays.sort(arr, (s1, s2) -&gt; &#123;<br>        <span class="hljs-keyword">return</span> s2.length() - s1.length();<br>    &#125;);<br>    System.out.println(Arrays.toString(arr));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h2><ul><li>Arrays工具类转stream再求和</li></ul><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">int[]<span class="hljs-built_in"> array </span>=<span class="hljs-built_in"> new </span>int[]&#123;1,2,3&#125;;<br>Arrays.stream(array).sum();<br></code></pre></div></td></tr></table></figure><ul><li>for loop 求和，虽然代码量比上面的大一点，但是效率比上面的高很多，建议还是使用for loop求和，别搞花里胡哨的</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java中数组多种遍历求和的效率分析</title>
    <link href="/2021/02/01/JavaSE/java%E4%B8%AD%E6%95%B0%E7%BB%84%E5%A4%9A%E7%A7%8D%E9%81%8D%E5%8E%86%E6%B1%82%E5%92%8C%E7%9A%84%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <url>/2021/02/01/JavaSE/java%E4%B8%AD%E6%95%B0%E7%BB%84%E5%A4%9A%E7%A7%8D%E9%81%8D%E5%8E%86%E6%B1%82%E5%92%8C%E7%9A%84%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="java中数组多种遍历求和的效率分析"><a href="#java中数组多种遍历求和的效率分析" class="headerlink" title="java中数组多种遍历求和的效率分析"></a>java中数组多种遍历求和的效率分析</h1><h2 id="int型数组的遍历求和效率分析"><a href="#int型数组的遍历求和效率分析" class="headerlink" title="int型数组的遍历求和效率分析"></a>int型数组的遍历求和效率分析</h2><ul><li>转换成流的形式，再求和。IntStream.of(a).sum();</li><li>另一种转换流求和的方式，Arrays.stream(a).sum();</li><li>普通for loop 求和：for i</li><li>增强for loop 求和：for-each</li></ul><p>测试方法使用的是 System.nanoTime() 求出求和段的运行时间，单位为纳秒(10^-9 s)</p><h3 id="测试代码如下："><a href="#测试代码如下：" class="headerlink" title="测试代码如下："></a>测试代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            a[i] = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">long</span> l1, l2;<br>        <span class="hljs-keyword">int</span> sum1, sum2, sum3 = <span class="hljs-number">0</span>, sum4 = <span class="hljs-number">0</span>;<br><br>        l1 = System.nanoTime();<br>        sum1 = IntStream.of(a).sum();<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;IntStream.of(a).sum(): &quot;</span>);<br>        System.out.println(sum1);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        sum2 = Arrays.stream(a).sum();<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;Arrays.stream(a).sum(): &quot;</span>);<br>        System.out.println(sum2);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            sum3 += a[i];<br>        &#125;<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;for loop: &quot;</span>);<br>        System.out.println(sum3);<br>        System.out.println(l2 - l1);<br><br>        l1 = System.nanoTime();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : a) &#123;<br>            sum4 += i;<br>        &#125;<br>        l2 = System.nanoTime();<br>        System.out.print(<span class="hljs-string">&quot;iterator loop: &quot;</span>);<br>        System.out.println(sum4);<br>        System.out.println(l2 - l1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>IntStream.of(a).sum(): 5050<br>24215600<br>Arrays.stream(a).sum(): 5050<br>184000<br>for loop: 5050<br>1600<br>iterator loop: 5050<br>1800</p></blockquote><p>求和结果都是正确的。所以根据最后求和速度进行排序，效率从低到高：</p><blockquote><p>IntStream.of(A).sum() &lt; Arrays.stream(A).sum() &lt; iterator loop &lt; for loop</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机下Linux配置静态ip，使得XShell成功连接</title>
    <link href="/2021/01/23/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8BLinux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%EF%BC%8C%E4%BD%BF%E5%BE%97XShell%E6%88%90%E5%8A%9F%E8%BF%9E%E6%8E%A5/"/>
    <url>/2021/01/23/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8BLinux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%EF%BC%8C%E4%BD%BF%E5%BE%97XShell%E6%88%90%E5%8A%9F%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机下Linux配置静态ip，使得XShell成功连接"><a href="#虚拟机下Linux配置静态ip，使得XShell成功连接" class="headerlink" title="虚拟机下Linux配置静态ip，使得XShell成功连接"></a>虚拟机下Linux配置静态ip，使得XShell成功连接</h1><ul><li>Linux：centOS6.7</li><li>虚拟机：VMware Workstation Pro15</li><li>SSH客户端：XShell6</li></ul><h2 id="一、配置VMware的虚拟网络编辑器"><a href="#一、配置VMware的虚拟网络编辑器" class="headerlink" title="一、配置VMware的虚拟网络编辑器"></a>一、配置VMware的虚拟网络编辑器</h2><p>进VMware之前，右键，用管理员模式打开，后面需要管理员权限，先不要开虚拟机</p><blockquote><p>菜单栏（最顶上一栏） -&gt; 编辑 -&gt;  虚拟网络编辑器</p></blockquote><p><a href="https://imgtu.com/i/sTn2BF"><img src="https://z3.ax1x.com/2021/01/23/sTn2BF.png" alt="sTn2BF.png"></a></p><p>按照①②配置，<strong>把③的子网IP记住</strong>，后面要用到。</p><p>然后点击④进入NAT设置。</p><p><img src="https://s3.ax1x.com/2021/01/23/sT1Epd.png" alt="NAT设置"></p><p>①中配置<strong>默认网关</strong>，其中前三大位要与前面记住的子网IP前面相同，后面默认会配置2，也可以自定义。然后该默认网关192.168.248.2要记住，后面需要用到。</p><p>②照做就行</p><p>③按确定返回上图，再点击下栏确定就可以保存虚拟网络编辑器的配置。</p><h2 id="二、配置VMware-Network-Adapter-VMnet8的指定IP"><a href="#二、配置VMware-Network-Adapter-VMnet8的指定IP" class="headerlink" title="二、配置VMware Network Adapter VMnet8的指定IP"></a>二、配置VMware Network Adapter VMnet8的指定IP</h2><blockquote><p> windows设置 -&gt; 网络和Internet -&gt; 更改适配器选项 -&gt;  右键VMware Network Adapter VMnet8进入属性</p></blockquote><p><a href="https://imgchr.com/i/sT86w6"><img src="https://s3.ax1x.com/2021/01/23/sT86w6.png" alt="sT86w6.png"></a></p><p><a href="https://imgchr.com/i/sT8vlj"><img src="https://s3.ax1x.com/2021/01/23/sT8vlj.png" alt="sT8vlj.png"></a></p><p><a href="https://imgchr.com/i/sTGUBt"><img src="https://s3.ax1x.com/2021/01/23/sTGUBt.png" alt="VMnet8属性"></a></p><p>①选择IPv4的项目，②然后进入属性。</p><p><a href="https://imgchr.com/i/sTGqD1"><img src="https://s3.ax1x.com/2021/01/23/sTGqD1.png" alt="sTGqD1.png"></a></p><p>默认是自动获得IP地址，勾选“使用下面的IP地址”自定义IP</p><p>①配置IP地址，前三位同虚拟网络编辑器配置的子网IP前三位相同，最后一位的1自定义，这里我设置为1</p><p>②配完①一般子网掩码会自动填好，没自动补上就填上虚拟网络编辑器里的子网掩码。</p><p>③默认网关就是干菜虚拟网络编辑器里面NAT设置里的那个默认网关。</p><p>④确定保存，然后再确定就保存成功了。</p><h2 id="三、配置网络适配器"><a href="#三、配置网络适配器" class="headerlink" title="三、配置网络适配器"></a>三、配置网络适配器</h2><p>管理员模式进入VMware，选择要配置的那台虚拟机，进入网络适配器</p><p><a href="https://imgchr.com/i/sTYOfO"><img src="https://s3.ax1x.com/2021/01/23/sTYOfO.png" alt="sTYOfO.png"></a></p><p><a href="https://imgchr.com/i/sTtE9S"><img src="https://s3.ax1x.com/2021/01/23/sTtE9S.png" alt="sTtE9S.png"></a></p><p>如图配置即可。</p><h2 id="四、配置ifcfg-eth0文件"><a href="#四、配置ifcfg-eth0文件" class="headerlink" title="四、配置ifcfg-eth0文件"></a>四、配置ifcfg-eth0文件</h2><p>打开虚拟机，建议用root用户登录，方便后面对ifcfg-eth0文件进行编辑。</p><p>打开terminal终端，输入指令：<strong>vim /etc/sysconfig/network-scripts/ifcfg-eth0</strong></p><p>这是使用终端vim的方式修改，不会vim操作的自行百度，或者根据上面的路劲去找ifcfg-eth0文件打开进行修改。</p><p>下面的配置建议对字段进行复制，防止配错。</p><ol><li><strong>以下进行修改</strong></li></ol><ul><li>ONBOOT=yes  # 系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。</li><li>BOOTPROTO=static  # 静态模式</li></ul><ol start="2"><li><strong>将下面的字段追加到最后一行，根据注释进行相应的配置</strong></li></ol><ul><li>IPADDR=192.168.248.128    # 自定义的IP地址，用XShell对服务器进行连接的IP，前三位与前面保持一致</li><li>NETMASK=255.255.255.0    # 子网掩码</li><li>NETWORK=192.168.248.0   #  网络地址，与虚拟网络编辑器设置的一样</li><li>BROADCAST=192.168.248.255  # 广播地址，前三位与前面一致，最后一位255</li><li>DNS1=192.168.248.2  # DNS地址，与默认网关相同</li><li>GATEWAY=192.168.248.2  # 默认网关</li></ul><p>然后esc : wq保存</p><p>退出后，终端输入指令：<strong>service network restart</strong>  重启网络</p><p>然后 ping baidu.com，看能不能ping通，能说明能上网。</p><p>输入指令：ifconfig，查看刚才自定义的静态ip地址是否配置成功。</p><p><a href="https://imgchr.com/i/sTa2DJ"><img src="https://s3.ax1x.com/2021/01/23/sTa2DJ.png" alt="sTa2DJ.png"></a></p><h2 id="五、SSH客户端连接服务器"><a href="#五、SSH客户端连接服务器" class="headerlink" title="五、SSH客户端连接服务器"></a>五、SSH客户端连接服务器</h2><p>可以先本地cmd中ping 一下服务器</p><p><a href="https://imgchr.com/i/sTdFbj"><img src="https://s3.ax1x.com/2021/01/23/sTdFbj.png" alt="sTdFbj.png"></a></p><p>如图能ping通，接下来进入XShell，将该ip连接就可以了，至此虚拟机静态IP配置结束。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>负数取模运算</title>
    <link href="/2020/05/27/JavaSE/%E8%B4%9F%E6%95%B0%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    <url>/2020/05/27/JavaSE/%E8%B4%9F%E6%95%B0%E5%8F%96%E6%A8%A1%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="负数取模运算"><a href="#负数取模运算" class="headerlink" title="负数取模运算"></a>负数取模运算</h1><hr><h2 id="一、引例"><a href="#一、引例" class="headerlink" title="一、引例"></a>一、引例</h2><div class="hljs code-wrapper"><pre><code>System.out.println(&quot;3 % 5 = &quot; + 3 % 5);System.out.println(&quot;-3 % 5 = &quot; + -3 % 5);System.out.println(&quot;3 % -5 = &quot; + 3 % -5);System.out.println(&quot;-3 % -5 = &quot; + -3 % -5);</code></pre></div><blockquote><p> 3 % 5 = 3<br> -3 % 5 = -3<br> 3 % -5 = 3<br> -3 % -5 = -3  </p></blockquote><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><blockquote><p>被除数是负数，则取模后符号也为负</p></blockquote><blockquote><p>被除数是正数，则取模后符号也为正</p></blockquote><blockquote><p>结果的符号与除数的正负号无关</p></blockquote><h2 id="二、整数除法问题"><a href="#二、整数除法问题" class="headerlink" title="二、整数除法问题"></a>二、整数除法问题</h2><ul><li><p>向上取整(Ceiling) 向X轴正方向取整，即取比实际结果稍大的数<br>比如：17 / 8 == 3， 8 / 3 == 3，-9 / 4 == -2</p></li><li><p>向下取整(Floor) 向X轴负方向取整，即取比实际结果稍小的数<br>比如：17 / 8 == 2， 8 / 3 == 2，-9 / 4 == -3</p></li><li><p>向零取整(Truncate) 向原点方向取整，即直接省略小数部分，取整<br>比如：17 / 8 == 2， 8 / 3 == 2，-9 / 4 == -2</p></li></ul><h2 id="三、取模通用公式"><a href="#三、取模通用公式" class="headerlink" title="三、取模通用公式"></a>三、取模通用公式</h2><blockquote><p>a % b = r</p></blockquote><blockquote><p>r = a - (a/b) * b</p></blockquote><h2 id="四、计算机语言差异性"><a href="#四、计算机语言差异性" class="headerlink" title="四、计算机语言差异性"></a>四、计算机语言差异性</h2><ul><li><p>C/Java<br>采用Truncate除法，即向零取整</p></li><li><p>Python<br>采用Floor除法，即向下取整</p></li></ul><h2 id="五、Truncate除法的问题"><a href="#五、Truncate除法的问题" class="headerlink" title="五、Truncate除法的问题"></a>五、Truncate除法的问题</h2><p>在一些题目中，数组元素可能出现负数，这样导致取模的时候，会出现取整问题的歧义</p><blockquote><p>在Java中，默认Truncate除法，为避免歧义可以使用：</p></blockquote><blockquote><p>1、使用Math.floorMod方法进行Floor除法</p></blockquote><blockquote><p>2、如在前缀和计算中，用<br>int modulus = <strong>(sum % K + K) % k</strong>;<br>而不用 <strong>sum % k</strong>，避免负数干扰结果</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>404</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="ABOUT-ME"><a href="#ABOUT-ME" class="headerlink" title="ABOUT ME"></a>ABOUT ME</h1><p>📭 How to reach me: </p><ul><li><a href="mailto:1027093394@qq.com">1027093394@qq.com</a></li><li><a href="mailto:cwh1027093394@gmail.com">cwh1027093394@gmail.com</a></li></ul><p>🔗 My Site:</p><ul><li><strong>Blog</strong>: <a href="https://hypocrite30.top/">https://hypocrite30.top/</a></li><li><strong>JueJin</strong>: <a href="https://juejin.cn/user/668945886743486">https://juejin.cn/user/668945886743486</a></li><li><strong>Github</strong>: <a href="https://github.com/hypocrite30">https://github.com/hypocrite30</a></li></ul><p>🎓 Learning <strong>Computer science and technology</strong></p><p>💗 Favor: <strong>Music</strong>🎵 <strong>Guitar</strong>🎸<strong>Coding</strong>💻 <strong>Blogging</strong>🖊 <strong>Basketball</strong>🏀 <strong>Gaming</strong>🎮 <strong>Exercising</strong>💪</p><p>📙 Motto：<strong>To see the world as it is and to love it.</strong></p><h1 id="ABOUT-BLOG"><a href="#ABOUT-BLOG" class="headerlink" title="ABOUT BLOG"></a>ABOUT BLOG</h1><p>博客作为学习记录，Power by Hexo &amp; Github Page，搭得粗糙请见谅。有需求或疑问 mail 与我交流。文章有错误或疏漏请多指正，不胜感激！</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>分类</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
